pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub extern fn __assert([*c]const u8, c_int, [*c]const u8) noreturn;
pub extern fn __assert_func([*c]const u8, c_int, [*c]const u8, [*c]const u8) noreturn;
pub const int_least64_t = i64;
pub const uint_least64_t = u64;
pub const int_fast64_t = i64;
pub const uint_fast64_t = u64;
pub const int_least32_t = i32;
pub const uint_least32_t = u32;
pub const int_fast32_t = i32;
pub const uint_fast32_t = u32;
pub const int_least16_t = i16;
pub const uint_least16_t = u16;
pub const int_fast16_t = i16;
pub const uint_fast16_t = u16;
pub const int_least8_t = i8;
pub const uint_least8_t = u8;
pub const int_fast8_t = i8;
pub const uint_fast8_t = u8;
pub const intmax_t = c_longlong;
pub const uintmax_t = c_ulonglong;
pub const ptrdiff_t = c_int;
pub const wchar_t = c_uint;
pub const max_align_t = extern struct {
    __clang_max_align_nonce1: c_longlong align(8),
    __clang_max_align_nonce2: c_longdouble align(8),
};
pub const uint = c_uint;
pub const absolute_time_t = extern struct {
    _private_us_since_boot: u64,
};
pub fn to_us_since_boot(arg_t: absolute_time_t) callconv(.C) u64 {
    var t = arg_t;
    return t._private_us_since_boot;
}
pub fn update_us_since_boot(arg_t: [*c]absolute_time_t, arg_us_since_boot: u64) callconv(.C) void {
    var t = arg_t;
    var us_since_boot = arg_us_since_boot;
    _ = if (us_since_boot <= @as(u64, @bitCast(@as(c_longlong, 9223372036854775807)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\common\\pico_base\\include/pico/types.h", @as(c_int, 63), "update_us_since_boot", "us_since_boot <= INT64_MAX");
    t.*._private_us_since_boot = us_since_boot;
}
pub fn from_us_since_boot(arg_us_since_boot: u64) callconv(.C) absolute_time_t {
    var us_since_boot = arg_us_since_boot;
    var t: absolute_time_t = undefined;
    update_us_since_boot(&t, us_since_boot);
    return t;
}
pub const datetime_t = extern struct {
    year: i16,
    month: i8,
    day: i8,
    dotw: i8,
    hour: i8,
    min: i8,
    sec: i8,
};
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_longlong;
pub const __uint64_t = c_ulonglong;
pub const __intmax_t = c_longlong;
pub const __uintmax_t = c_ulonglong;
pub const __intptr_t = c_int;
pub const __uintptr_t = c_uint; // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:338:31: warning: TODO implement translation of stmt class GCCAsmStmtClass
// C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:344:20: warning: unable to translate function, demoted to extern
pub extern fn __breakpoint() callconv(.C) void; // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:339:40: warning: TODO implement translation of stmt class GCCAsmStmtClass
// C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:360:28: warning: unable to translate function, demoted to extern
pub extern fn __compiler_memory_barrier() void;
pub extern fn panic_unsupported() noreturn;
pub extern fn panic(fmt: [*c]const u8, ...) noreturn;
pub extern fn running_on_fpga() bool;
pub extern fn rp2040_chip_version() u8;
pub fn rp2040_rom_version() callconv(.C) u8 {
    return @as([*c]u8, @ptrFromInt(@as(c_int, 19))).*;
}
pub inline fn tight_loop_contents() void {} // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:338:31: warning: TODO implement translation of stmt class GCCAsmStmtClass
// C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:446:31: warning: unable to translate function, demoted to extern
pub extern fn __mul_instruction(arg_a: i32, arg_b: i32) i32; // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:338:31: warning: TODO implement translation of stmt class GCCAsmStmtClass
// C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:481:28: warning: unable to translate function, demoted to extern
pub extern fn __get_current_exception() uint; // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:339:40: warning: TODO implement translation of stmt class GCCAsmStmtClass
// C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:504:20: warning: unable to translate function, demoted to extern
pub extern fn busy_wait_at_least_cycles(arg_minimum_cycles: u32) callconv(.C) void;
pub inline fn get_core_num() uint {
    return @as([*c]u32, @ptrFromInt(@as(c_uint, 3489660928) +% @as(c_uint, 0))).*;
}
pub const PICO_OK: c_int = 0;
pub const PICO_ERROR_NONE: c_int = 0;
pub const PICO_ERROR_TIMEOUT: c_int = -1;
pub const PICO_ERROR_GENERIC: c_int = -2;
pub const PICO_ERROR_NO_DATA: c_int = -3;
pub const PICO_ERROR_NOT_PERMITTED: c_int = -4;
pub const PICO_ERROR_INVALID_ARG: c_int = -5;
pub const PICO_ERROR_IO: c_int = -6;
pub const PICO_ERROR_BADAUTH: c_int = -7;
pub const PICO_ERROR_CONNECT_FAILED: c_int = -8;
pub const PICO_ERROR_INSUFFICIENT_RESOURCES: c_int = -9;
pub const enum_pico_error_codes = c_int;
pub const struct_stdio_driver = opaque {};
pub const stdio_driver_t = struct_stdio_driver;
pub extern fn stdio_init_all() bool;
pub extern fn stdio_flush() void;
pub extern fn getchar_timeout_us(timeout_us: u32) c_int;
pub extern fn stdio_set_driver_enabled(driver: ?*stdio_driver_t, enabled: bool) void;
pub extern fn stdio_filter_driver(driver: ?*stdio_driver_t) void;
pub extern fn stdio_set_translate_crlf(driver: ?*stdio_driver_t, translate: bool) void;
pub extern fn putchar_raw(c: c_int) c_int;
pub extern fn puts_raw(s: [*c]const u8) c_int;
pub extern fn stdio_set_chars_available_callback(@"fn": ?*const fn (?*anyopaque) callconv(.C) void, param: ?*anyopaque) void;
pub const io_rw_32 = u32;
pub const io_ro_32 = u32;
pub const io_wo_32 = u32;
pub const io_rw_16 = u16;
pub const io_ro_16 = u16;
pub const io_wo_16 = u16;
pub const io_rw_8 = u8;
pub const io_ro_8 = u8;
pub const io_wo_8 = u8;
pub const ioptr = [*c]volatile u8;
pub const const_ioptr = ioptr;
pub inline fn xip_alias_check_addr(arg_addr: ?*const anyopaque) u32 {
    var addr = arg_addr;
    var rc: u32 = @as(usize, @intCast(@intFromPtr(addr)));
    {
        if ((false or false) and !false) {
            _ = if ((rc >= @as(c_uint, 268435456)) and (rc < @as(c_uint, 285212672))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_base\\include/hardware/address_mapped.h", @as(c_int, 95), "xip_alias_check_addr", "rc >= 0x10000000u && rc < 0x11000000u");
        }
    }
    return rc;
}
pub inline fn hw_set_bits(arg_addr: [*c]volatile io_rw_32, arg_mask: u32) void {
    var addr = arg_addr;
    var mask = arg_mask;
    @as([*c]volatile io_rw_32, @ptrCast(@alignCast(@as(?*anyopaque, @ptrFromInt((@as(c_uint, 2) << @intCast(12)) | @as(usize, @intCast(@intFromPtr(@as(?*volatile anyopaque, @ptrCast(addr)))))))))).* = mask;
}
pub inline fn hw_clear_bits(arg_addr: [*c]volatile io_rw_32, arg_mask: u32) void {
    var addr = arg_addr;
    var mask = arg_mask;
    @as([*c]volatile io_rw_32, @ptrCast(@alignCast(@as(?*anyopaque, @ptrFromInt((@as(c_uint, 3) << @intCast(12)) | @as(usize, @intCast(@intFromPtr(@as(?*volatile anyopaque, @ptrCast(addr)))))))))).* = mask;
}
pub inline fn hw_xor_bits(arg_addr: [*c]volatile io_rw_32, arg_mask: u32) void {
    var addr = arg_addr;
    var mask = arg_mask;
    @as([*c]volatile io_rw_32, @ptrCast(@alignCast(@as(?*anyopaque, @ptrFromInt((@as(c_uint, 1) << @intCast(12)) | @as(usize, @intCast(@intFromPtr(@as(?*volatile anyopaque, @ptrCast(addr)))))))))).* = mask;
}
pub inline fn hw_write_masked(arg_addr: [*c]volatile io_rw_32, arg_values: u32, arg_write_mask: u32) void {
    var addr = arg_addr;
    var values = arg_values;
    var write_mask = arg_write_mask;
    hw_xor_bits(addr, (addr.* ^ values) & write_mask);
}
pub const timer_hw_t = extern struct {
    timehw: io_wo_32,
    timelw: io_wo_32,
    timehr: io_ro_32,
    timelr: io_ro_32,
    alarm: [4]io_rw_32,
    armed: io_rw_32,
    timerawh: io_ro_32,
    timerawl: io_ro_32,
    dbgpause: io_rw_32,
    pause: io_rw_32,
    intr: io_rw_32,
    inte: io_rw_32,
    intf: io_rw_32,
    ints: io_ro_32,
}; // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub fn check_hardware_alarm_num_param(arg_alarm_num: uint) callconv(.C) void {
    var alarm_num = arg_alarm_num;
    {
        if ((false or false) and !false) {
            _ = if (!(alarm_num >= @as(c_uint, 4))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_timer\\include/hardware/timer.h", @as(c_int, 54), "check_hardware_alarm_num_param", "!(alarm_num >= 4u)");
        }
    }
}
pub fn time_us_32() callconv(.C) u32 {
    return @as([*c]timer_hw_t, @ptrFromInt(@as(c_uint, 1074085888))).*.timerawl;
}
pub extern fn time_us_64() u64;
pub extern fn busy_wait_us_32(delay_us: u32) void;
pub extern fn busy_wait_us(delay_us: u64) void;
pub extern fn busy_wait_ms(delay_ms: u32) void;
pub extern fn busy_wait_until(t: absolute_time_t) void;
pub fn time_reached(arg_t: absolute_time_t) callconv(.C) bool {
    var t = arg_t;
    var target: u64 = to_us_since_boot(t);
    var hi_target: u32 = @as(u32, @bitCast(@as(c_uint, @truncate(target >> @intCast(32)))));
    var hi: u32 = @as([*c]timer_hw_t, @ptrFromInt(@as(c_uint, 1074085888))).*.timerawh;
    return (hi >= hi_target) and ((@as([*c]timer_hw_t, @ptrFromInt(@as(c_uint, 1074085888))).*.timerawl >= @as(u32, @bitCast(@as(c_uint, @truncate(target))))) or (hi != hi_target));
}
pub const hardware_alarm_callback_t = ?*const fn (uint) callconv(.C) void;
pub extern fn hardware_alarm_claim(alarm_num: uint) void;
pub extern fn hardware_alarm_claim_unused(required: bool) c_int;
pub extern fn hardware_alarm_unclaim(alarm_num: uint) void;
pub extern fn hardware_alarm_is_claimed(alarm_num: uint) bool;
pub extern fn hardware_alarm_set_callback(alarm_num: uint, callback: hardware_alarm_callback_t) void;
pub extern fn hardware_alarm_set_target(alarm_num: uint, t: absolute_time_t) bool;
pub extern fn hardware_alarm_cancel(alarm_num: uint) void;
pub extern fn hardware_alarm_force_irq(alarm_num: uint) void;
pub fn get_absolute_time() callconv(.C) absolute_time_t {
    var t: absolute_time_t = undefined;
    update_us_since_boot(&t, time_us_64());
    return t;
}
pub fn us_to_ms(arg_us: u64) callconv(.C) u32 {
    var us = arg_us;
    if ((us >> @intCast(32)) != 0) {
        return @as(u32, @bitCast(@as(c_uint, @truncate(us / @as(u64, @bitCast(@as(c_ulonglong, @as(c_uint, 1000))))))));
    } else {
        return @as(u32, @bitCast(@as(c_uint, @truncate(us)))) / @as(c_uint, 1000);
    }
    return @import("std").mem.zeroes(u32);
}
pub fn to_ms_since_boot(arg_t: absolute_time_t) callconv(.C) u32 {
    var t = arg_t;
    var us: u64 = to_us_since_boot(t);
    return us_to_ms(us);
}
pub fn delayed_by_us(t: absolute_time_t, arg_us: u64) callconv(.C) absolute_time_t {
    var us = arg_us;
    var t2: absolute_time_t = undefined;
    var base: u64 = to_us_since_boot(t);
    var delayed: u64 = base +% us;
    if (@as(i64, @bitCast(delayed)) < @as(i64, @bitCast(@as(c_longlong, @as(c_int, 0))))) {
        delayed = @as(u64, @bitCast(@as(c_longlong, 9223372036854775807)));
    }
    update_us_since_boot(&t2, delayed);
    return t2;
}
pub fn delayed_by_ms(t: absolute_time_t, arg_ms: u32) callconv(.C) absolute_time_t {
    var ms = arg_ms;
    var t2: absolute_time_t = undefined;
    var base: u64 = to_us_since_boot(t);
    var delayed: u64 = base +% (@as(c_ulonglong, @bitCast(@as(c_ulonglong, ms))) *% @as(c_ulonglong, 1000));
    if (@as(i64, @bitCast(delayed)) < @as(i64, @bitCast(@as(c_longlong, @as(c_int, 0))))) {
        delayed = @as(u64, @bitCast(@as(c_longlong, 9223372036854775807)));
    }
    update_us_since_boot(&t2, delayed);
    return t2;
}
pub fn make_timeout_time_us(arg_us: u64) callconv(.C) absolute_time_t {
    var us = arg_us;
    return delayed_by_us(get_absolute_time(), us);
}
pub fn make_timeout_time_ms(arg_ms: u32) callconv(.C) absolute_time_t {
    var ms = arg_ms;
    return delayed_by_ms(get_absolute_time(), ms);
}
pub fn absolute_time_diff_us(arg_from: absolute_time_t, arg_to: absolute_time_t) callconv(.C) i64 {
    var from = arg_from;
    var to = arg_to;
    return @as(i64, @bitCast(to_us_since_boot(to) -% to_us_since_boot(from)));
}
pub fn absolute_time_min(arg_a: absolute_time_t, arg_b: absolute_time_t) callconv(.C) absolute_time_t {
    var a = arg_a;
    var b = arg_b;
    return if (to_us_since_boot(a) < to_us_since_boot(b)) a else b;
}
pub extern const at_the_end_of_time: absolute_time_t;
pub fn is_at_the_end_of_time(arg_t: absolute_time_t) callconv(.C) bool {
    var t = arg_t;
    return to_us_since_boot(t) == to_us_since_boot(at_the_end_of_time);
}
pub extern const nil_time: absolute_time_t;
pub fn is_nil_time(arg_t: absolute_time_t) callconv(.C) bool {
    var t = arg_t;
    return !(to_us_since_boot(t) != 0);
}
pub extern fn sleep_until(target: absolute_time_t) void;
pub extern fn sleep_us(us: u64) void;
pub extern fn sleep_ms(ms: u32) void;
pub extern fn best_effort_wfe_or_timeout(timeout_timestamp: absolute_time_t) bool;
pub const alarm_id_t = i32;
pub const alarm_callback_t = ?*const fn (alarm_id_t, ?*anyopaque) callconv(.C) i64;
pub const struct_alarm_pool = opaque {};
pub const alarm_pool_t = struct_alarm_pool;
pub extern fn alarm_pool_init_default() void;
pub extern fn alarm_pool_get_default() ?*alarm_pool_t;
pub extern fn alarm_pool_create(hardware_alarm_num: uint, max_timers: uint) ?*alarm_pool_t;
pub extern fn alarm_pool_create_with_unused_hardware_alarm(max_timers: uint) ?*alarm_pool_t;
pub extern fn alarm_pool_hardware_alarm_num(pool: ?*alarm_pool_t) uint;
pub extern fn alarm_pool_core_num(pool: ?*alarm_pool_t) uint;
pub extern fn alarm_pool_destroy(pool: ?*alarm_pool_t) void;
pub extern fn alarm_pool_add_alarm_at(pool: ?*alarm_pool_t, time: absolute_time_t, callback: alarm_callback_t, user_data: ?*anyopaque, fire_if_past: bool) alarm_id_t;
pub extern fn alarm_pool_add_alarm_at_force_in_context(pool: ?*alarm_pool_t, time: absolute_time_t, callback: alarm_callback_t, user_data: ?*anyopaque) alarm_id_t;
pub fn alarm_pool_add_alarm_in_us(arg_pool: ?*alarm_pool_t, arg_us: u64, arg_callback: alarm_callback_t, arg_user_data: ?*anyopaque, arg_fire_if_past: bool) callconv(.C) alarm_id_t {
    var pool = arg_pool;
    var us = arg_us;
    var callback = arg_callback;
    var user_data = arg_user_data;
    var fire_if_past = arg_fire_if_past;
    return alarm_pool_add_alarm_at(pool, delayed_by_us(get_absolute_time(), us), callback, user_data, fire_if_past);
}
pub fn alarm_pool_add_alarm_in_ms(arg_pool: ?*alarm_pool_t, arg_ms: u32, arg_callback: alarm_callback_t, arg_user_data: ?*anyopaque, arg_fire_if_past: bool) callconv(.C) alarm_id_t {
    var pool = arg_pool;
    var ms = arg_ms;
    var callback = arg_callback;
    var user_data = arg_user_data;
    var fire_if_past = arg_fire_if_past;
    return alarm_pool_add_alarm_at(pool, delayed_by_ms(get_absolute_time(), ms), callback, user_data, fire_if_past);
}
pub extern fn alarm_pool_cancel_alarm(pool: ?*alarm_pool_t, alarm_id: alarm_id_t) bool;
pub fn add_alarm_at(arg_time: absolute_time_t, arg_callback: alarm_callback_t, arg_user_data: ?*anyopaque, arg_fire_if_past: bool) callconv(.C) alarm_id_t {
    var time = arg_time;
    var callback = arg_callback;
    var user_data = arg_user_data;
    var fire_if_past = arg_fire_if_past;
    return alarm_pool_add_alarm_at(alarm_pool_get_default(), time, callback, user_data, fire_if_past);
}
pub fn add_alarm_in_us(arg_us: u64, arg_callback: alarm_callback_t, arg_user_data: ?*anyopaque, arg_fire_if_past: bool) callconv(.C) alarm_id_t {
    var us = arg_us;
    var callback = arg_callback;
    var user_data = arg_user_data;
    var fire_if_past = arg_fire_if_past;
    return alarm_pool_add_alarm_in_us(alarm_pool_get_default(), us, callback, user_data, fire_if_past);
}
pub fn add_alarm_in_ms(arg_ms: u32, arg_callback: alarm_callback_t, arg_user_data: ?*anyopaque, arg_fire_if_past: bool) callconv(.C) alarm_id_t {
    var ms = arg_ms;
    var callback = arg_callback;
    var user_data = arg_user_data;
    var fire_if_past = arg_fire_if_past;
    return alarm_pool_add_alarm_in_ms(alarm_pool_get_default(), ms, callback, user_data, fire_if_past);
}
pub fn cancel_alarm(arg_alarm_id: alarm_id_t) callconv(.C) bool {
    var alarm_id = arg_alarm_id;
    return alarm_pool_cancel_alarm(alarm_pool_get_default(), alarm_id);
}
pub const repeating_timer_t = struct_repeating_timer;
pub const repeating_timer_callback_t = ?*const fn ([*c]repeating_timer_t) callconv(.C) bool;
pub const struct_repeating_timer = extern struct {
    delay_us: i64,
    pool: ?*alarm_pool_t,
    alarm_id: alarm_id_t,
    callback: repeating_timer_callback_t,
    user_data: ?*anyopaque,
};
pub extern fn alarm_pool_add_repeating_timer_us(pool: ?*alarm_pool_t, delay_us: i64, callback: repeating_timer_callback_t, user_data: ?*anyopaque, out: [*c]repeating_timer_t) bool;
pub fn alarm_pool_add_repeating_timer_ms(arg_pool: ?*alarm_pool_t, arg_delay_ms: i32, arg_callback: repeating_timer_callback_t, arg_user_data: ?*anyopaque, arg_out: [*c]repeating_timer_t) callconv(.C) bool {
    var pool = arg_pool;
    var delay_ms = arg_delay_ms;
    var callback = arg_callback;
    var user_data = arg_user_data;
    var out = arg_out;
    return alarm_pool_add_repeating_timer_us(pool, @as(i64, @bitCast(@as(c_longlong, delay_ms))) * @as(i64, @bitCast(@as(c_longlong, @as(c_int, 1000)))), callback, user_data, out);
}
pub fn add_repeating_timer_us(arg_delay_us: i64, arg_callback: repeating_timer_callback_t, arg_user_data: ?*anyopaque, arg_out: [*c]repeating_timer_t) callconv(.C) bool {
    var delay_us = arg_delay_us;
    var callback = arg_callback;
    var user_data = arg_user_data;
    var out = arg_out;
    return alarm_pool_add_repeating_timer_us(alarm_pool_get_default(), delay_us, callback, user_data, out);
}
pub fn add_repeating_timer_ms(arg_delay_ms: i32, arg_callback: repeating_timer_callback_t, arg_user_data: ?*anyopaque, arg_out: [*c]repeating_timer_t) callconv(.C) bool {
    var delay_ms = arg_delay_ms;
    var callback = arg_callback;
    var user_data = arg_user_data;
    var out = arg_out;
    return alarm_pool_add_repeating_timer_us(alarm_pool_get_default(), @as(i64, @bitCast(@as(c_longlong, delay_ms))) * @as(i64, @bitCast(@as(c_longlong, @as(c_int, 1000)))), callback, user_data, out);
}
pub extern fn cancel_repeating_timer(timer: [*c]repeating_timer_t) bool;
pub const interp_hw_t = extern struct {
    accum: [2]io_rw_32,
    base: [3]io_rw_32,
    pop: [3]io_ro_32,
    peek: [3]io_ro_32,
    ctrl: [2]io_rw_32,
    add_raw: [2]io_rw_32,
    base01: io_wo_32,
};
pub const sio_hw_t = extern struct {
    cpuid: io_ro_32,
    gpio_in: io_ro_32,
    gpio_hi_in: io_ro_32,
    _pad0: u32,
    gpio_out: io_rw_32,
    gpio_set: io_wo_32,
    gpio_clr: io_wo_32,
    gpio_togl: io_wo_32,
    gpio_oe: io_rw_32,
    gpio_oe_set: io_wo_32,
    gpio_oe_clr: io_wo_32,
    gpio_oe_togl: io_wo_32,
    gpio_hi_out: io_rw_32,
    gpio_hi_set: io_wo_32,
    gpio_hi_clr: io_wo_32,
    gpio_hi_togl: io_wo_32,
    gpio_hi_oe: io_rw_32,
    gpio_hi_oe_set: io_wo_32,
    gpio_hi_oe_clr: io_wo_32,
    gpio_hi_oe_togl: io_wo_32,
    fifo_st: io_rw_32,
    fifo_wr: io_wo_32,
    fifo_rd: io_ro_32,
    spinlock_st: io_ro_32,
    div_udividend: io_rw_32,
    div_udivisor: io_rw_32,
    div_sdividend: io_rw_32,
    div_sdivisor: io_rw_32,
    div_quotient: io_rw_32,
    div_remainder: io_rw_32,
    div_csr: io_ro_32,
    _pad1: u32,
    interp: [2]interp_hw_t,
};
pub const padsbank0_hw_t = extern struct {
    voltage_select: io_rw_32,
    io: [30]io_rw_32,
}; // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub const iobank0_status_ctrl_hw_t = extern struct {
    status: io_ro_32,
    ctrl: io_rw_32,
};
pub const io_irq_ctrl_hw_t = extern struct {
    inte: [4]io_rw_32,
    intf: [4]io_rw_32,
    ints: [4]io_ro_32,
};
pub const iobank0_hw_t = extern struct {
    io: [30]iobank0_status_ctrl_hw_t,
    intr: [4]io_rw_32,
    proc0_irq_ctrl: io_irq_ctrl_hw_t,
    proc1_irq_ctrl: io_irq_ctrl_hw_t,
    dormant_wake_irq_ctrl: io_irq_ctrl_hw_t,
}; // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub const irq_handler_t = ?*const fn () callconv(.C) void;
pub fn check_irq_param(arg_num: uint) callconv(.C) void {
    var num = arg_num;
    {
        if ((false or false) and !false) {
            _ = if (!(num >= @as(c_uint, 32))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_irq\\include/hardware/irq.h", @as(c_int, 131), "check_irq_param", "!(num >= 32u)");
        }
    }
}
pub extern fn irq_set_priority(num: uint, hardware_priority: u8) void;
pub extern fn irq_get_priority(num: uint) uint;
pub extern fn irq_set_enabled(num: uint, enabled: bool) void;
pub extern fn irq_is_enabled(num: uint) bool;
pub extern fn irq_set_mask_enabled(mask: u32, enabled: bool) void;
pub extern fn irq_set_exclusive_handler(num: uint, handler: irq_handler_t) void;
pub extern fn irq_get_exclusive_handler(num: uint) irq_handler_t;
pub extern fn irq_add_shared_handler(num: uint, handler: irq_handler_t, order_priority: u8) void;
pub extern fn irq_remove_handler(num: uint, handler: irq_handler_t) void;
pub extern fn irq_has_shared_handler(num: uint) bool;
pub extern fn irq_get_vtable_handler(num: uint) irq_handler_t;
pub fn irq_clear(arg_int_num: uint) callconv(.C) void {
    var int_num = arg_int_num;
    @as([*c]volatile u32, @ptrFromInt(@as(c_uint, 3758096384) +% @as(c_uint, 57984))).* = @as(c_uint, 1) << @intCast(@as(u32, @bitCast(int_num & @as(uint, @bitCast(@as(c_int, 31))))));
}
pub extern fn irq_set_pending(num: uint) void;
pub extern fn irq_init_priorities() void;
pub extern fn user_irq_claim(irq_num: uint) void;
pub extern fn user_irq_unclaim(irq_num: uint) void;
pub extern fn user_irq_claim_unused(required: bool) c_int;
pub extern fn user_irq_is_claimed(irq_num: uint) bool;
pub const GPIO_FUNC_XIP: c_int = 0;
pub const GPIO_FUNC_SPI: c_int = 1;
pub const GPIO_FUNC_UART: c_int = 2;
pub const GPIO_FUNC_I2C: c_int = 3;
pub const GPIO_FUNC_PWM: c_int = 4;
pub const GPIO_FUNC_SIO: c_int = 5;
pub const GPIO_FUNC_PIO0: c_int = 6;
pub const GPIO_FUNC_PIO1: c_int = 7;
pub const GPIO_FUNC_GPCK: c_int = 8;
pub const GPIO_FUNC_USB: c_int = 9;
pub const GPIO_FUNC_NULL: c_int = 31;
pub const enum_gpio_function = c_uint;
pub const GPIO_IRQ_LEVEL_LOW: c_int = 1;
pub const GPIO_IRQ_LEVEL_HIGH: c_int = 2;
pub const GPIO_IRQ_EDGE_FALL: c_int = 4;
pub const GPIO_IRQ_EDGE_RISE: c_int = 8;
pub const enum_gpio_irq_level = c_uint;
pub const gpio_irq_callback_t = ?*const fn (uint, u32) callconv(.C) void;
pub const GPIO_OVERRIDE_NORMAL: c_int = 0;
pub const GPIO_OVERRIDE_INVERT: c_int = 1;
pub const GPIO_OVERRIDE_LOW: c_int = 2;
pub const GPIO_OVERRIDE_HIGH: c_int = 3;
pub const enum_gpio_override = c_uint;
pub const GPIO_SLEW_RATE_SLOW: c_int = 0;
pub const GPIO_SLEW_RATE_FAST: c_int = 1;
pub const enum_gpio_slew_rate = c_uint;
pub const GPIO_DRIVE_STRENGTH_2MA: c_int = 0;
pub const GPIO_DRIVE_STRENGTH_4MA: c_int = 1;
pub const GPIO_DRIVE_STRENGTH_8MA: c_int = 2;
pub const GPIO_DRIVE_STRENGTH_12MA: c_int = 3;
pub const enum_gpio_drive_strength = c_uint;
pub fn check_gpio_param(arg_gpio: uint) callconv(.C) void {
    var gpio = arg_gpio;
    {
        if ((false or false) and !false) {
            _ = if (!(gpio >= @as(c_uint, 30))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_gpio\\include/hardware/gpio.h", @as(c_int, 172), "check_gpio_param", "!(gpio >= 30u)");
        }
    }
}
pub extern fn gpio_set_function(gpio: uint, @"fn": enum_gpio_function) void;
pub extern fn gpio_get_function(gpio: uint) enum_gpio_function;
pub extern fn gpio_set_pulls(gpio: uint, up: bool, down: bool) void;
pub fn gpio_pull_up(arg_gpio: uint) callconv(.C) void {
    var gpio = arg_gpio;
    gpio_set_pulls(gpio, @as(c_int, 1) != 0, @as(c_int, 0) != 0);
}
pub fn gpio_is_pulled_up(arg_gpio: uint) callconv(.C) bool {
    var gpio = arg_gpio;
    return (@as([*c]padsbank0_hw_t, @ptrFromInt(@as(c_uint, 1073856512))).*.io[gpio] & @as(c_uint, 8)) != @as(c_uint, @bitCast(@as(c_int, 0)));
}
pub fn gpio_pull_down(arg_gpio: uint) callconv(.C) void {
    var gpio = arg_gpio;
    gpio_set_pulls(gpio, @as(c_int, 0) != 0, @as(c_int, 1) != 0);
}
pub fn gpio_is_pulled_down(arg_gpio: uint) callconv(.C) bool {
    var gpio = arg_gpio;
    return (@as([*c]padsbank0_hw_t, @ptrFromInt(@as(c_uint, 1073856512))).*.io[gpio] & @as(c_uint, 4)) != @as(c_uint, @bitCast(@as(c_int, 0)));
}
pub fn gpio_disable_pulls(arg_gpio: uint) callconv(.C) void {
    var gpio = arg_gpio;
    gpio_set_pulls(gpio, @as(c_int, 0) != 0, @as(c_int, 0) != 0);
}
pub extern fn gpio_set_irqover(gpio: uint, value: uint) void;
pub extern fn gpio_set_outover(gpio: uint, value: uint) void;
pub extern fn gpio_set_inover(gpio: uint, value: uint) void;
pub extern fn gpio_set_oeover(gpio: uint, value: uint) void;
pub extern fn gpio_set_input_enabled(gpio: uint, enabled: bool) void;
pub extern fn gpio_set_input_hysteresis_enabled(gpio: uint, enabled: bool) void;
pub extern fn gpio_is_input_hysteresis_enabled(gpio: uint) bool;
pub extern fn gpio_set_slew_rate(gpio: uint, slew: enum_gpio_slew_rate) void;
pub extern fn gpio_get_slew_rate(gpio: uint) enum_gpio_slew_rate;
pub extern fn gpio_set_drive_strength(gpio: uint, drive: enum_gpio_drive_strength) void;
pub extern fn gpio_get_drive_strength(gpio: uint) enum_gpio_drive_strength;
pub extern fn gpio_set_irq_enabled(gpio: uint, event_mask: u32, enabled: bool) void;
pub extern fn gpio_set_irq_callback(callback: gpio_irq_callback_t) void;
pub extern fn gpio_set_irq_enabled_with_callback(gpio: uint, event_mask: u32, enabled: bool, callback: gpio_irq_callback_t) void;
pub extern fn gpio_set_dormant_irq_enabled(gpio: uint, event_mask: u32, enabled: bool) void;
pub fn gpio_get_irq_event_mask(arg_gpio: uint) callconv(.C) u32 {
    var gpio = arg_gpio;
    check_gpio_param(gpio);
    var irq_ctrl_base: [*c]io_irq_ctrl_hw_t = if (get_core_num() != 0) &@as([*c]iobank0_hw_t, @ptrFromInt(@as(c_uint, 1073823744))).*.proc1_irq_ctrl else &@as([*c]iobank0_hw_t, @ptrFromInt(@as(c_uint, 1073823744))).*.proc0_irq_ctrl;
    var status_reg: [*c]const volatile io_ro_32 = &irq_ctrl_base.*.ints[gpio >> @intCast(3)];
    return (status_reg.* >> @intCast(@as(c_uint, @bitCast(@as(c_int, 4))) *% (gpio & @as(c_uint, 7)))) & @as(c_uint, 15);
}
pub extern fn gpio_acknowledge_irq(gpio: uint, event_mask: u32) void;
pub extern fn gpio_add_raw_irq_handler_with_order_priority_masked(gpio_mask: uint, handler: irq_handler_t, order_priority: u8) void;
pub fn gpio_add_raw_irq_handler_with_order_priority(arg_gpio: uint, arg_handler: irq_handler_t, arg_order_priority: u8) callconv(.C) void {
    var gpio = arg_gpio;
    var handler = arg_handler;
    var order_priority = arg_order_priority;
    check_gpio_param(gpio);
    gpio_add_raw_irq_handler_with_order_priority_masked(@as(c_uint, 1) << @intCast(gpio), handler, order_priority);
}
pub extern fn gpio_add_raw_irq_handler_masked(gpio_mask: uint, handler: irq_handler_t) void;
pub fn gpio_add_raw_irq_handler(arg_gpio: uint, arg_handler: irq_handler_t) callconv(.C) void {
    var gpio = arg_gpio;
    var handler = arg_handler;
    check_gpio_param(gpio);
    gpio_add_raw_irq_handler_masked(@as(c_uint, 1) << @intCast(gpio), handler);
}
pub extern fn gpio_remove_raw_irq_handler_masked(gpio_mask: uint, handler: irq_handler_t) void;
pub fn gpio_remove_raw_irq_handler(arg_gpio: uint, arg_handler: irq_handler_t) callconv(.C) void {
    var gpio = arg_gpio;
    var handler = arg_handler;
    check_gpio_param(gpio);
    gpio_remove_raw_irq_handler_masked(@as(c_uint, 1) << @intCast(gpio), handler);
}
pub extern fn gpio_init(gpio: uint) void;
pub extern fn gpio_deinit(gpio: uint) void;
pub extern fn gpio_init_mask(gpio_mask: uint) void;
pub fn gpio_get(arg_gpio: uint) callconv(.C) bool {
    var gpio = arg_gpio;
    return !!(((@as(c_ulong, 1) << @intCast(gpio)) & @as(c_ulong, @bitCast(@as(c_ulong, @as([*c]sio_hw_t, @ptrFromInt(@as(c_uint, 3489660928))).*.gpio_in)))) != 0);
}
pub fn gpio_get_all() callconv(.C) u32 {
    return @as([*c]sio_hw_t, @ptrFromInt(@as(c_uint, 3489660928))).*.gpio_in;
}
pub fn gpio_set_mask(arg_mask: u32) callconv(.C) void {
    var mask = arg_mask;
    @as([*c]sio_hw_t, @ptrFromInt(@as(c_uint, 3489660928))).*.gpio_set = mask;
}
pub fn gpio_clr_mask(arg_mask: u32) callconv(.C) void {
    var mask = arg_mask;
    @as([*c]sio_hw_t, @ptrFromInt(@as(c_uint, 3489660928))).*.gpio_clr = mask;
}
pub fn gpio_xor_mask(arg_mask: u32) callconv(.C) void {
    var mask = arg_mask;
    @as([*c]sio_hw_t, @ptrFromInt(@as(c_uint, 3489660928))).*.gpio_togl = mask;
}
pub fn gpio_put_masked(arg_mask: u32, arg_value: u32) callconv(.C) void {
    var mask = arg_mask;
    var value = arg_value;
    @as([*c]sio_hw_t, @ptrFromInt(@as(c_uint, 3489660928))).*.gpio_togl = (@as([*c]sio_hw_t, @ptrFromInt(@as(c_uint, 3489660928))).*.gpio_out ^ value) & mask;
}
pub fn gpio_put_all(arg_value: u32) callconv(.C) void {
    var value = arg_value;
    @as([*c]sio_hw_t, @ptrFromInt(@as(c_uint, 3489660928))).*.gpio_out = value;
}
pub fn gpio_put(arg_gpio: uint, arg_value: bool) callconv(.C) void {
    var gpio = arg_gpio;
    var value = arg_value;
    var mask: u32 = @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 1) << @intCast(gpio)))));
    if (value) {
        gpio_set_mask(mask);
    } else {
        gpio_clr_mask(mask);
    }
}
pub fn gpio_get_out_level(arg_gpio: uint) callconv(.C) bool {
    var gpio = arg_gpio;
    return !!((@as([*c]sio_hw_t, @ptrFromInt(@as(c_uint, 3489660928))).*.gpio_out & (@as(c_uint, 1) << @intCast(gpio))) != 0);
}
pub fn gpio_set_dir_out_masked(arg_mask: u32) callconv(.C) void {
    var mask = arg_mask;
    @as([*c]sio_hw_t, @ptrFromInt(@as(c_uint, 3489660928))).*.gpio_oe_set = mask;
}
pub fn gpio_set_dir_in_masked(arg_mask: u32) callconv(.C) void {
    var mask = arg_mask;
    @as([*c]sio_hw_t, @ptrFromInt(@as(c_uint, 3489660928))).*.gpio_oe_clr = mask;
}
pub fn gpio_set_dir_masked(arg_mask: u32, arg_value: u32) callconv(.C) void {
    var mask = arg_mask;
    var value = arg_value;
    @as([*c]sio_hw_t, @ptrFromInt(@as(c_uint, 3489660928))).*.gpio_oe_togl = (@as([*c]sio_hw_t, @ptrFromInt(@as(c_uint, 3489660928))).*.gpio_oe ^ value) & mask;
}
pub fn gpio_set_dir_all_bits(arg_values: u32) callconv(.C) void {
    var values = arg_values;
    @as([*c]sio_hw_t, @ptrFromInt(@as(c_uint, 3489660928))).*.gpio_oe = values;
}
pub fn gpio_set_dir(arg_gpio: uint, arg_out: bool) callconv(.C) void {
    var gpio = arg_gpio;
    var out = arg_out;
    var mask: u32 = @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 1) << @intCast(gpio)))));
    if (out) {
        gpio_set_dir_out_masked(mask);
    } else {
        gpio_set_dir_in_masked(mask);
    }
}
pub fn gpio_is_dir_out(arg_gpio: uint) callconv(.C) bool {
    var gpio = arg_gpio;
    return !!((@as([*c]sio_hw_t, @ptrFromInt(@as(c_uint, 3489660928))).*.gpio_oe & (@as(c_uint, 1) << @intCast(gpio))) != 0);
}
pub fn gpio_get_dir(arg_gpio: uint) callconv(.C) uint {
    var gpio = arg_gpio;
    return @as(uint, @intFromBool(gpio_is_dir_out(gpio)));
}
pub extern fn gpio_debug_pins_init() void;
pub const uart_hw_t = extern struct {
    dr: io_rw_32,
    rsr: io_rw_32,
    _pad0: [4]u32,
    fr: io_ro_32,
    _pad1: u32,
    ilpr: io_rw_32,
    ibrd: io_rw_32,
    fbrd: io_rw_32,
    lcr_h: io_rw_32,
    cr: io_rw_32,
    ifls: io_rw_32,
    imsc: io_rw_32,
    ris: io_ro_32,
    mis: io_ro_32,
    icr: io_rw_32,
    dmacr: io_rw_32,
};
pub const struct_uart_inst = opaque {};
pub const uart_inst_t = struct_uart_inst;
pub fn uart_get_index(arg_uart: ?*uart_inst_t) callconv(.C) uint {
    var uart = arg_uart;
    {
        if ((false or false) and !false) {
            _ = if (!((uart != @as(?*uart_inst_t, @ptrCast(@as([*c]uart_hw_t, @ptrFromInt(@as(c_uint, 1073954816)))))) and (uart != @as(?*uart_inst_t, @ptrCast(@as([*c]uart_hw_t, @ptrFromInt(@as(c_uint, 1073971200)))))))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_uart\\include/hardware/uart.h", @as(c_int, 101), "uart_get_index", "!(uart != ((uart_inst_t *)((uart_hw_t *)0x40034000u)) && uart != ((uart_inst_t *)((uart_hw_t *)0x40038000u)))");
        }
    }
    return @as(uint, @bitCast(if (uart == @as(?*uart_inst_t, @ptrCast(@as([*c]uart_hw_t, @ptrFromInt(@as(c_uint, 1073971200)))))) @as(c_int, 1) else @as(c_int, 0)));
} // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub fn uart_get_instance(arg_instance: uint) callconv(.C) ?*uart_inst_t {
    var instance = arg_instance;
    {
        if ((false or false) and !false) {
            _ = if (!(instance >= @as(c_uint, 2))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_uart\\include/hardware/uart.h", @as(c_int, 107), "uart_get_instance", "!(instance >= 2u)");
        }
    }
    return if (instance != 0) @as(?*uart_inst_t, @ptrCast(@as([*c]uart_hw_t, @ptrFromInt(@as(c_uint, 1073971200))))) else @as(?*uart_inst_t, @ptrCast(@as([*c]uart_hw_t, @ptrFromInt(@as(c_uint, 1073954816)))));
}
pub fn uart_get_hw(arg_uart: ?*uart_inst_t) callconv(.C) [*c]uart_hw_t {
    var uart = arg_uart;
    _ = uart_get_index(uart);
    return @as([*c]uart_hw_t, @ptrCast(@alignCast(uart)));
}
pub const UART_PARITY_NONE: c_int = 0;
pub const UART_PARITY_EVEN: c_int = 1;
pub const UART_PARITY_ODD: c_int = 2;
pub const uart_parity_t = c_uint;
pub extern fn uart_init(uart: ?*uart_inst_t, baudrate: uint) uint;
pub extern fn uart_deinit(uart: ?*uart_inst_t) void;
pub extern fn uart_set_baudrate(uart: ?*uart_inst_t, baudrate: uint) uint;
pub fn uart_set_hw_flow(arg_uart: ?*uart_inst_t, arg_cts: bool, arg_rts: bool) callconv(.C) void {
    var uart = arg_uart;
    var cts = arg_cts;
    var rts = arg_rts;
    hw_write_masked(&uart_get_hw(uart).*.cr, (@as(uint, @intFromBool(!!cts)) << @intCast(15)) | (@as(uint, @intFromBool(!!rts)) << @intCast(14)), @as(c_uint, 16384) | @as(c_uint, 32768));
}
pub extern fn uart_set_format(uart: ?*uart_inst_t, data_bits: uint, stop_bits: uint, parity: uart_parity_t) void;
pub fn uart_set_irq_enables(arg_uart: ?*uart_inst_t, arg_rx_has_data: bool, arg_tx_needs_data: bool) callconv(.C) void {
    var uart = arg_uart;
    var rx_has_data = arg_rx_has_data;
    var tx_needs_data = arg_tx_needs_data;
    uart_get_hw(uart).*.imsc = ((@as(uint, @intFromBool(!!tx_needs_data)) << @intCast(5)) | (@as(uint, @intFromBool(!!rx_has_data)) << @intCast(4))) | (@as(uint, @intFromBool(!!rx_has_data)) << @intCast(6));
    if (rx_has_data) {
        hw_write_masked(&uart_get_hw(uart).*.ifls, @as(u32, @bitCast(@as(c_int, 0) << @intCast(3))), @as(c_uint, 56));
    }
    if (tx_needs_data) {
        hw_write_masked(&uart_get_hw(uart).*.ifls, @as(u32, @bitCast(@as(c_int, 0) << @intCast(0))), @as(c_uint, 7));
    }
}
pub fn uart_is_enabled(arg_uart: ?*uart_inst_t) callconv(.C) bool {
    var uart = arg_uart;
    return !!((uart_get_hw(uart).*.cr & @as(c_uint, 1)) != 0);
}
pub extern fn uart_set_fifo_enabled(uart: ?*uart_inst_t, enabled: bool) void;
pub fn uart_is_writable(arg_uart: ?*uart_inst_t) callconv(.C) bool {
    var uart = arg_uart;
    return !((uart_get_hw(uart).*.fr & @as(c_uint, 32)) != 0);
}
pub fn uart_tx_wait_blocking(arg_uart: ?*uart_inst_t) callconv(.C) void {
    var uart = arg_uart;
    while ((uart_get_hw(uart).*.fr & @as(c_uint, 8)) != 0) {
        tight_loop_contents();
    }
}
pub fn uart_is_readable(arg_uart: ?*uart_inst_t) callconv(.C) bool {
    var uart = arg_uart;
    return !((uart_get_hw(uart).*.fr & @as(c_uint, 16)) != 0);
}
pub fn uart_write_blocking(arg_uart: ?*uart_inst_t, arg_src: [*c]const u8, arg_len: usize) callconv(.C) void {
    var uart = arg_uart;
    var src = arg_src;
    var len = arg_len;
    {
        var i: usize = 0;
        while (i < len) : (i +%= 1) {
            while (!uart_is_writable(uart)) {
                tight_loop_contents();
            }
            uart_get_hw(uart).*.dr = @as(u32, @bitCast(@as(c_uint, (blk: {
                const ref = &src;
                const tmp = ref.*;
                ref.* += 1;
                break :blk tmp;
            }).*)));
        }
    }
}
pub fn uart_read_blocking(arg_uart: ?*uart_inst_t, arg_dst: [*c]u8, arg_len: usize) callconv(.C) void {
    var uart = arg_uart;
    var dst = arg_dst;
    var len = arg_len;
    {
        var i: usize = 0;
        while (i < len) : (i +%= 1) {
            while (!uart_is_readable(uart)) {
                tight_loop_contents();
            }
            (blk: {
                const ref = &dst;
                const tmp = ref.*;
                ref.* += 1;
                break :blk tmp;
            }).* = @as(u8, @bitCast(@as(u8, @truncate(uart_get_hw(uart).*.dr))));
        }
    }
}
pub fn uart_putc_raw(arg_uart: ?*uart_inst_t, arg_c: u8) callconv(.C) void {
    var uart = arg_uart;
    var c = arg_c;
    uart_write_blocking(uart, @as([*c]const u8, @ptrCast(@alignCast(&c))), @as(usize, @bitCast(@as(c_int, 1))));
}
extern var uart_char_to_line_feed: [2]c_short;
pub fn uart_putc(arg_uart: ?*uart_inst_t, arg_c: u8) callconv(.C) void {
    var uart = arg_uart;
    var c = arg_c;
    if (@as(c_int, @bitCast(@as(c_int, uart_char_to_line_feed[uart_get_index(uart)]))) == @as(c_int, @bitCast(@as(c_uint, c)))) {
        uart_putc_raw(uart, @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, '\r'))))));
    }
    uart_putc_raw(uart, c);
}
pub fn uart_puts(arg_uart: ?*uart_inst_t, arg_s: [*c]const u8) callconv(.C) void {
    var uart = arg_uart;
    var s = arg_s;
    var last_was_cr: bool = @as(c_int, 0) != 0;
    while (s.* != 0) {
        if (last_was_cr) {
            uart_putc_raw(uart, s.*);
        } else {
            uart_putc(uart, s.*);
        }
        last_was_cr = @as(c_int, @bitCast(@as(c_uint, (blk: {
            const ref = &s;
            const tmp = ref.*;
            ref.* += 1;
            break :blk tmp;
        }).*))) == @as(c_int, '\r');
    }
}
pub fn uart_getc(arg_uart: ?*uart_inst_t) callconv(.C) u8 {
    var uart = arg_uart;
    var c: u8 = undefined;
    uart_read_blocking(uart, @as([*c]u8, @ptrCast(@alignCast(&c))), @as(usize, @bitCast(@as(c_int, 1))));
    return c;
}
pub extern fn uart_set_break(uart: ?*uart_inst_t, en: bool) void;
pub extern fn uart_set_translate_crlf(uart: ?*uart_inst_t, translate: bool) void;
pub fn uart_default_tx_wait_blocking() callconv(.C) void {
    uart_tx_wait_blocking(@as(?*uart_inst_t, @ptrCast(@as([*c]uart_hw_t, @ptrFromInt(@as(c_uint, 1073954816))))));
}
pub extern fn uart_is_readable_within_us(uart: ?*uart_inst_t, us: u32) bool; // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:45:24: warning: ignoring StaticAssert declaration
// C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:45:24: warning: ignoring StaticAssert declaration
// C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub fn uart_get_dreq(arg_uart: ?*uart_inst_t, arg_is_tx: bool) callconv(.C) uint {
    var uart = arg_uart;
    var is_tx = arg_is_tx;
    return (@as(uint, @bitCast(@as(c_int, 20))) +% (uart_get_index(uart) *% @as(uint, @bitCast(@as(c_int, 2))))) +% @as(uint, @intFromBool(!is_tx));
}
pub extern var stdio_usb: stdio_driver_t;
pub extern fn stdio_usb_init() bool;
pub extern fn stdio_usb_connected() bool;
pub extern fn setup_default_uart() void;
pub extern fn set_sys_clock_48mhz() void;
pub extern fn set_sys_clock_pll(vco_freq: u32, post_div1: uint, post_div2: uint) void;
pub extern fn check_sys_clock_khz(freq_khz: u32, vco_freq_out: [*c]uint, post_div1_out: [*c]uint, post_div2_out: [*c]uint) bool;
pub fn set_sys_clock_khz(arg_freq_khz: u32, arg_required: bool) callconv(.C) bool {
    var freq_khz = arg_freq_khz;
    var required = arg_required;
    var vco: uint = undefined;
    var postdiv1: uint = undefined;
    var postdiv2: uint = undefined;
    if (check_sys_clock_khz(freq_khz, &vco, &postdiv1, &postdiv2)) {
        set_sys_clock_pll(vco, postdiv1, postdiv2);
        return @as(c_int, 1) != 0;
    } else if (required) {
        panic("System clock of %u kHz cannot be exactly achieved", freq_khz);
    }
    return @as(c_int, 0) != 0;
}
pub const struct___va_list = extern struct {
    __ap: ?*anyopaque,
};
pub const __builtin_va_list = struct___va_list;
pub const __gnuc_va_list = __builtin_va_list;
pub const va_list = __gnuc_va_list;
pub const wint_t = c_int;
pub const __blkcnt_t = c_long;
pub const __blksize_t = c_long;
pub const __fsblkcnt_t = __uint64_t;
pub const __fsfilcnt_t = __uint32_t;
pub const _off_t = c_long;
pub const __pid_t = c_int;
pub const __dev_t = c_short;
pub const __uid_t = c_ushort;
pub const __gid_t = c_ushort;
pub const __id_t = __uint32_t;
pub const __ino_t = c_ushort;
pub const __mode_t = __uint32_t;
pub const _off64_t = c_longlong;
pub const __off_t = _off_t;
pub const __loff_t = _off64_t;
pub const __key_t = c_long;
pub const _fpos_t = c_long;
pub const __size_t = c_uint;
pub const _ssize_t = c_int;
pub const __ssize_t = _ssize_t;
const union_unnamed_1 = extern union {
    __wch: wint_t,
    __wchb: [4]u8,
};
pub const _mbstate_t = extern struct {
    __count: c_int,
    __value: union_unnamed_1,
};
pub const _iconv_t = ?*anyopaque;
pub const __clock_t = c_ulong;
pub const __time_t = i64;
pub const __clockid_t = c_ulong;
pub const __timer_t = c_ulong;
pub const __sa_family_t = __uint8_t;
pub const __socklen_t = __uint32_t;
pub const __nl_item = c_int;
pub const __nlink_t = c_ushort;
pub const __suseconds_t = c_long;
pub const __useconds_t = c_ulong;
pub const __va_list = __builtin_va_list;
pub const __ULong = c_ulong;
pub const struct___lock = opaque {};
pub const _LOCK_T = ?*struct___lock;
pub extern fn __retarget_lock_init(lock: [*c]_LOCK_T) void;
pub extern fn __retarget_lock_init_recursive(lock: [*c]_LOCK_T) void;
pub extern fn __retarget_lock_close(lock: _LOCK_T) void;
pub extern fn __retarget_lock_close_recursive(lock: _LOCK_T) void;
pub extern fn __retarget_lock_acquire(lock: _LOCK_T) void;
pub extern fn __retarget_lock_acquire_recursive(lock: _LOCK_T) void;
pub extern fn __retarget_lock_try_acquire(lock: _LOCK_T) c_int;
pub extern fn __retarget_lock_try_acquire_recursive(lock: _LOCK_T) c_int;
pub extern fn __retarget_lock_release(lock: _LOCK_T) void;
pub extern fn __retarget_lock_release_recursive(lock: _LOCK_T) void;
pub const _flock_t = _LOCK_T;
pub const struct___sbuf = extern struct {
    _base: [*c]u8,
    _size: c_int,
};
pub const struct___sFILE = extern struct {
    _p: [*c]u8,
    _r: c_int,
    _w: c_int,
    _flags: c_short,
    _file: c_short,
    _bf: struct___sbuf,
    _lbfsize: c_int,
    _cookie: ?*anyopaque,
    _read: ?*const fn ([*c]struct__reent, ?*anyopaque, [*c]u8, c_int) callconv(.C) c_int,
    _write: ?*const fn ([*c]struct__reent, ?*anyopaque, [*c]const u8, c_int) callconv(.C) c_int,
    _seek: ?*const fn ([*c]struct__reent, ?*anyopaque, _fpos_t, c_int) callconv(.C) _fpos_t,
    _close: ?*const fn ([*c]struct__reent, ?*anyopaque) callconv(.C) c_int,
    _ub: struct___sbuf,
    _up: [*c]u8,
    _ur: c_int,
    _ubuf: [3]u8,
    _nbuf: [1]u8,
    _lb: struct___sbuf,
    _blksize: c_int,
    _offset: _off_t,
    _data: [*c]struct__reent,
    _lock: _flock_t,
    _mbstate: _mbstate_t,
    _flags2: c_int,
};
pub const __FILE = struct___sFILE;
pub const struct___locale_t = opaque {};
pub const struct__Bigint = extern struct {
    _next: [*c]struct__Bigint,
    _k: c_int,
    _maxwds: c_int,
    _sign: c_int,
    _wds: c_int,
    _x: [1]__ULong,
};
pub const struct___tm = extern struct {
    __tm_sec: c_int,
    __tm_min: c_int,
    __tm_hour: c_int,
    __tm_mday: c_int,
    __tm_mon: c_int,
    __tm_year: c_int,
    __tm_wday: c_int,
    __tm_yday: c_int,
    __tm_isdst: c_int,
};
pub const struct__rand48 = extern struct {
    _seed: [3]c_ushort,
    _mult: [3]c_ushort,
    _add: c_ushort,
};
const struct_unnamed_3 = extern struct {
    _unused_rand: c_uint,
    _strtok_last: [*c]u8,
    _asctime_buf: [26]u8,
    _localtime_buf: struct___tm,
    _gamma_signgam: c_int,
    _rand_next: c_ulonglong,
    _r48: struct__rand48,
    _mblen_state: _mbstate_t,
    _mbtowc_state: _mbstate_t,
    _wctomb_state: _mbstate_t,
    _l64a_buf: [8]u8,
    _signal_buf: [24]u8,
    _getdate_err: c_int,
    _mbrlen_state: _mbstate_t,
    _mbrtowc_state: _mbstate_t,
    _mbsrtowcs_state: _mbstate_t,
    _wcrtomb_state: _mbstate_t,
    _wcsrtombs_state: _mbstate_t,
    _h_errno: c_int,
};
const struct_unnamed_4 = extern struct {
    _nextf: [30][*c]u8,
    _nmalloc: [30]c_uint,
};
const union_unnamed_2 = extern union {
    _reent: struct_unnamed_3,
    _unused: struct_unnamed_4,
};
pub const struct__on_exit_args = extern struct {
    _fnargs: [32]?*anyopaque,
    _dso_handle: [32]?*anyopaque,
    _fntypes: __ULong,
    _is_cxa: __ULong,
};
pub const struct__atexit = extern struct {
    _next: [*c]struct__atexit,
    _ind: c_int,
    _fns: [32]?*const fn () callconv(.C) void,
    _on_exit_args: struct__on_exit_args,
};
pub const struct__glue = extern struct {
    _next: [*c]struct__glue,
    _niobs: c_int,
    _iobs: [*c]__FILE,
};
pub const struct__reent = extern struct {
    _errno: c_int,
    _stdin: [*c]__FILE,
    _stdout: [*c]__FILE,
    _stderr: [*c]__FILE,
    _inc: c_int,
    _emergency: [25]u8,
    _unspecified_locale_info: c_int,
    _locale: ?*struct___locale_t,
    __sdidinit: c_int,
    __cleanup: ?*const fn ([*c]struct__reent) callconv(.C) void,
    _result: [*c]struct__Bigint,
    _result_k: c_int,
    _p5s: [*c]struct__Bigint,
    _freelist: [*c][*c]struct__Bigint,
    _cvtlen: c_int,
    _cvtbuf: [*c]u8,
    _new: union_unnamed_2,
    _atexit: [*c]struct__atexit,
    _atexit0: struct__atexit,
    _sig_func: [*c]?*const fn (c_int) callconv(.C) void,
    __sglue: struct__glue,
    __sf: [3]__FILE,
};
pub extern var _impure_ptr: [*c]struct__reent;
pub extern const _global_impure_ptr: [*c]struct__reent;
pub extern fn _reclaim_reent([*c]struct__reent) void;
pub const u_int8_t = __uint8_t;
pub const u_int16_t = __uint16_t;
pub const u_int32_t = __uint32_t;
pub const u_int64_t = __uint64_t;
pub const register_t = __intptr_t;
pub const __sigset_t = c_ulong;
pub const suseconds_t = __suseconds_t;
pub const time_t = i64;
pub const struct_timeval = extern struct {
    tv_sec: time_t,
    tv_usec: suseconds_t,
};
pub const struct_timespec = extern struct {
    tv_sec: time_t,
    tv_nsec: c_long,
};
pub const struct_itimerspec = extern struct {
    it_interval: struct_timespec,
    it_value: struct_timespec,
};
pub const sigset_t = __sigset_t;
pub const __fd_mask = c_ulong;
pub const fd_mask = __fd_mask;
pub const struct_fd_set = extern struct {
    __fds_bits: [2]__fd_mask,
};
pub const fd_set = struct_fd_set;
pub extern fn select(__n: c_int, __readfds: [*c]fd_set, __writefds: [*c]fd_set, __exceptfds: [*c]fd_set, __timeout: [*c]struct_timeval) c_int;
pub extern fn pselect(__n: c_int, __readfds: [*c]fd_set, __writefds: [*c]fd_set, __exceptfds: [*c]fd_set, __timeout: [*c]const struct_timespec, __set: [*c]const sigset_t) c_int;
pub const in_addr_t = __uint32_t;
pub const in_port_t = __uint16_t;
pub const u_register_t = __uintptr_t;
pub const u_char = u8;
pub const u_short = c_ushort;
pub const u_int = c_uint;
pub const u_long = c_ulong;
pub const ushort = c_ushort;
pub const ulong = c_ulong;
pub const blkcnt_t = __blkcnt_t;
pub const blksize_t = __blksize_t;
pub const clock_t = c_ulong;
pub const daddr_t = c_long;
pub const caddr_t = [*c]u8;
pub const fsblkcnt_t = __fsblkcnt_t;
pub const fsfilcnt_t = __fsfilcnt_t;
pub const id_t = __id_t;
pub const ino_t = __ino_t;
pub const off_t = __off_t;
pub const dev_t = __dev_t;
pub const uid_t = __uid_t;
pub const gid_t = __gid_t;
pub const pid_t = __pid_t;
pub const key_t = __key_t;
pub const mode_t = __mode_t;
pub const nlink_t = __nlink_t;
pub const clockid_t = __clockid_t;
pub const timer_t = __timer_t;
pub const useconds_t = __useconds_t;
pub const sbintime_t = __int64_t;
pub const struct_sched_param = extern struct {
    sched_priority: c_int,
};
pub const pthread_t = __uint32_t;
pub const pthread_attr_t = extern struct {
    is_initialized: c_int,
    stackaddr: ?*anyopaque,
    stacksize: c_int,
    contentionscope: c_int,
    inheritsched: c_int,
    schedpolicy: c_int,
    schedparam: struct_sched_param,
    detachstate: c_int,
};
pub const pthread_mutex_t = __uint32_t;
pub const pthread_mutexattr_t = extern struct {
    is_initialized: c_int,
    recursive: c_int,
};
pub const pthread_cond_t = __uint32_t;
pub const pthread_condattr_t = extern struct {
    is_initialized: c_int,
    clock: clock_t,
};
pub const pthread_key_t = __uint32_t;
pub const pthread_once_t = extern struct {
    is_initialized: c_int,
    init_executed: c_int,
};
pub const FILE = __FILE;
pub const fpos_t = _fpos_t;
pub extern fn ctermid([*c]u8) [*c]u8;
pub extern fn tmpfile() [*c]FILE;
pub extern fn tmpnam([*c]u8) [*c]u8;
pub extern fn tempnam([*c]const u8, [*c]const u8) [*c]u8;
pub extern fn fclose([*c]FILE) c_int;
pub extern fn fflush([*c]FILE) c_int;
pub extern fn freopen(noalias [*c]const u8, noalias [*c]const u8, noalias [*c]FILE) [*c]FILE;
pub extern fn setbuf(noalias [*c]FILE, noalias [*c]u8) void;
pub extern fn setvbuf(noalias [*c]FILE, noalias [*c]u8, c_int, usize) c_int;
pub extern fn fprintf(noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn fscanf(noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn printf(noalias [*c]const u8, ...) c_int;
pub extern fn scanf(noalias [*c]const u8, ...) c_int;
pub extern fn sscanf(noalias [*c]const u8, noalias [*c]const u8, ...) c_int;
pub extern fn vfprintf(noalias [*c]FILE, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vprintf([*c]const u8, __gnuc_va_list) c_int;
pub extern fn vsprintf(noalias [*c]u8, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn fgetc([*c]FILE) c_int;
pub extern fn fgets(noalias [*c]u8, c_int, noalias [*c]FILE) [*c]u8;
pub extern fn fputc(c_int, [*c]FILE) c_int;
pub extern fn fputs(noalias [*c]const u8, noalias [*c]FILE) c_int;
pub extern fn getc([*c]FILE) c_int;
pub extern fn getchar() c_int;
pub extern fn gets([*c]u8) [*c]u8;
pub extern fn putc(c_int, [*c]FILE) c_int;
pub extern fn putchar(c_int) c_int;
pub extern fn puts([*c]const u8) c_int;
pub extern fn ungetc(c_int, [*c]FILE) c_int;
pub extern fn fread(noalias ?*anyopaque, _size: usize, _n: usize, noalias [*c]FILE) usize;
pub extern fn fwrite(noalias ?*const anyopaque, _size: usize, _n: usize, [*c]FILE) usize;
pub extern fn fgetpos(noalias [*c]FILE, noalias [*c]fpos_t) c_int;
pub extern fn fseek([*c]FILE, c_long, c_int) c_int;
pub extern fn fsetpos([*c]FILE, [*c]const fpos_t) c_int;
pub extern fn ftell([*c]FILE) c_long;
pub extern fn rewind([*c]FILE) void;
pub extern fn clearerr([*c]FILE) void;
pub extern fn feof([*c]FILE) c_int;
pub extern fn ferror([*c]FILE) c_int;
pub extern fn perror([*c]const u8) void;
pub extern fn fopen(noalias _name: [*c]const u8, noalias _type: [*c]const u8) [*c]FILE;
pub extern fn sprintf(noalias [*c]u8, noalias [*c]const u8, ...) c_int;
pub extern fn remove([*c]const u8) c_int;
pub extern fn rename([*c]const u8, [*c]const u8) c_int;
pub extern fn fseeko([*c]FILE, off_t, c_int) c_int;
pub extern fn ftello([*c]FILE) off_t;
pub extern fn snprintf(noalias [*c]u8, usize, noalias [*c]const u8, ...) c_int;
pub extern fn vsnprintf(noalias [*c]u8, usize, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vfscanf(noalias [*c]FILE, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vscanf([*c]const u8, __gnuc_va_list) c_int;
pub extern fn vsscanf(noalias [*c]const u8, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn asiprintf([*c][*c]u8, [*c]const u8, ...) c_int;
pub extern fn asniprintf([*c]u8, [*c]usize, [*c]const u8, ...) [*c]u8;
pub extern fn asnprintf(noalias [*c]u8, noalias [*c]usize, noalias [*c]const u8, ...) [*c]u8;
pub extern fn diprintf(c_int, [*c]const u8, ...) c_int;
pub extern fn fiprintf([*c]FILE, [*c]const u8, ...) c_int;
pub extern fn fiscanf([*c]FILE, [*c]const u8, ...) c_int;
pub extern fn iprintf([*c]const u8, ...) c_int;
pub extern fn iscanf([*c]const u8, ...) c_int;
pub extern fn siprintf([*c]u8, [*c]const u8, ...) c_int;
pub extern fn siscanf([*c]const u8, [*c]const u8, ...) c_int;
pub extern fn sniprintf([*c]u8, usize, [*c]const u8, ...) c_int;
pub extern fn vasiprintf([*c][*c]u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vasniprintf([*c]u8, [*c]usize, [*c]const u8, __gnuc_va_list) [*c]u8;
pub extern fn vasnprintf([*c]u8, [*c]usize, [*c]const u8, __gnuc_va_list) [*c]u8;
pub extern fn vdiprintf(c_int, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vfiprintf([*c]FILE, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vfiscanf([*c]FILE, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn viprintf([*c]const u8, __gnuc_va_list) c_int;
pub extern fn viscanf([*c]const u8, __gnuc_va_list) c_int;
pub extern fn vsiprintf([*c]u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vsiscanf([*c]const u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vsniprintf([*c]u8, usize, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn fdopen(c_int, [*c]const u8) [*c]FILE;
pub extern fn fileno([*c]FILE) c_int;
pub extern fn pclose([*c]FILE) c_int;
pub extern fn popen([*c]const u8, [*c]const u8) [*c]FILE;
pub extern fn setbuffer([*c]FILE, [*c]u8, c_int) void;
pub extern fn setlinebuf([*c]FILE) c_int;
pub extern fn getw([*c]FILE) c_int;
pub extern fn putw(c_int, [*c]FILE) c_int;
pub extern fn getc_unlocked([*c]FILE) c_int;
pub extern fn getchar_unlocked() c_int;
pub extern fn flockfile([*c]FILE) void;
pub extern fn ftrylockfile([*c]FILE) c_int;
pub extern fn funlockfile([*c]FILE) void;
pub extern fn putc_unlocked(c_int, [*c]FILE) c_int;
pub extern fn putchar_unlocked(c_int) c_int;
pub extern fn dprintf(c_int, noalias [*c]const u8, ...) c_int;
pub extern fn fmemopen(noalias ?*anyopaque, usize, noalias [*c]const u8) [*c]FILE;
pub extern fn open_memstream([*c][*c]u8, [*c]usize) [*c]FILE;
pub extern fn vdprintf(c_int, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn renameat(c_int, [*c]const u8, c_int, [*c]const u8) c_int;
pub extern fn _asiprintf_r([*c]struct__reent, [*c][*c]u8, [*c]const u8, ...) c_int;
pub extern fn _asniprintf_r([*c]struct__reent, [*c]u8, [*c]usize, [*c]const u8, ...) [*c]u8;
pub extern fn _asnprintf_r([*c]struct__reent, noalias [*c]u8, noalias [*c]usize, noalias [*c]const u8, ...) [*c]u8;
pub extern fn _asprintf_r([*c]struct__reent, noalias [*c][*c]u8, noalias [*c]const u8, ...) c_int;
pub extern fn _diprintf_r([*c]struct__reent, c_int, [*c]const u8, ...) c_int;
pub extern fn _dprintf_r([*c]struct__reent, c_int, noalias [*c]const u8, ...) c_int;
pub extern fn _fclose_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _fcloseall_r([*c]struct__reent) c_int;
pub extern fn _fdopen_r([*c]struct__reent, c_int, [*c]const u8) [*c]FILE;
pub extern fn _fflush_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _fgetc_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _fgetc_unlocked_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _fgets_r([*c]struct__reent, noalias [*c]u8, c_int, noalias [*c]FILE) [*c]u8;
pub extern fn _fgets_unlocked_r([*c]struct__reent, noalias [*c]u8, c_int, noalias [*c]FILE) [*c]u8;
pub extern fn _fgetpos_r([*c]struct__reent, [*c]FILE, [*c]fpos_t) c_int;
pub extern fn _fsetpos_r([*c]struct__reent, [*c]FILE, [*c]const fpos_t) c_int;
pub extern fn _fiprintf_r([*c]struct__reent, [*c]FILE, [*c]const u8, ...) c_int;
pub extern fn _fiscanf_r([*c]struct__reent, [*c]FILE, [*c]const u8, ...) c_int;
pub extern fn _fmemopen_r([*c]struct__reent, noalias ?*anyopaque, usize, noalias [*c]const u8) [*c]FILE;
pub extern fn _fopen_r([*c]struct__reent, noalias [*c]const u8, noalias [*c]const u8) [*c]FILE;
pub extern fn _freopen_r([*c]struct__reent, noalias [*c]const u8, noalias [*c]const u8, noalias [*c]FILE) [*c]FILE;
pub extern fn _fprintf_r([*c]struct__reent, noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn _fpurge_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _fputc_r([*c]struct__reent, c_int, [*c]FILE) c_int;
pub extern fn _fputc_unlocked_r([*c]struct__reent, c_int, [*c]FILE) c_int;
pub extern fn _fputs_r([*c]struct__reent, noalias [*c]const u8, noalias [*c]FILE) c_int;
pub extern fn _fputs_unlocked_r([*c]struct__reent, noalias [*c]const u8, noalias [*c]FILE) c_int;
pub extern fn _fread_r([*c]struct__reent, noalias ?*anyopaque, _size: usize, _n: usize, noalias [*c]FILE) usize;
pub extern fn _fread_unlocked_r([*c]struct__reent, noalias ?*anyopaque, _size: usize, _n: usize, noalias [*c]FILE) usize;
pub extern fn _fscanf_r([*c]struct__reent, noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn _fseek_r([*c]struct__reent, [*c]FILE, c_long, c_int) c_int;
pub extern fn _fseeko_r([*c]struct__reent, [*c]FILE, _off_t, c_int) c_int;
pub extern fn _ftell_r([*c]struct__reent, [*c]FILE) c_long;
pub extern fn _ftello_r([*c]struct__reent, [*c]FILE) _off_t;
pub extern fn _rewind_r([*c]struct__reent, [*c]FILE) void;
pub extern fn _fwrite_r([*c]struct__reent, noalias ?*const anyopaque, _size: usize, _n: usize, noalias [*c]FILE) usize;
pub extern fn _fwrite_unlocked_r([*c]struct__reent, noalias ?*const anyopaque, _size: usize, _n: usize, noalias [*c]FILE) usize;
pub extern fn _getc_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _getc_unlocked_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _getchar_r([*c]struct__reent) c_int;
pub extern fn _getchar_unlocked_r([*c]struct__reent) c_int;
pub extern fn _gets_r([*c]struct__reent, [*c]u8) [*c]u8;
pub extern fn _iprintf_r([*c]struct__reent, [*c]const u8, ...) c_int;
pub extern fn _iscanf_r([*c]struct__reent, [*c]const u8, ...) c_int;
pub extern fn _open_memstream_r([*c]struct__reent, [*c][*c]u8, [*c]usize) [*c]FILE;
pub extern fn _perror_r([*c]struct__reent, [*c]const u8) void;
pub extern fn _printf_r([*c]struct__reent, noalias [*c]const u8, ...) c_int;
pub extern fn _putc_r([*c]struct__reent, c_int, [*c]FILE) c_int;
pub extern fn _putc_unlocked_r([*c]struct__reent, c_int, [*c]FILE) c_int;
pub extern fn _putchar_unlocked_r([*c]struct__reent, c_int) c_int;
pub extern fn _putchar_r([*c]struct__reent, c_int) c_int;
pub extern fn _puts_r([*c]struct__reent, [*c]const u8) c_int;
pub extern fn _remove_r([*c]struct__reent, [*c]const u8) c_int;
pub extern fn _rename_r([*c]struct__reent, _old: [*c]const u8, _new: [*c]const u8) c_int;
pub extern fn _scanf_r([*c]struct__reent, noalias [*c]const u8, ...) c_int;
pub extern fn _siprintf_r([*c]struct__reent, [*c]u8, [*c]const u8, ...) c_int;
pub extern fn _siscanf_r([*c]struct__reent, [*c]const u8, [*c]const u8, ...) c_int;
pub extern fn _sniprintf_r([*c]struct__reent, [*c]u8, usize, [*c]const u8, ...) c_int;
pub extern fn _snprintf_r([*c]struct__reent, noalias [*c]u8, usize, noalias [*c]const u8, ...) c_int;
pub extern fn _sprintf_r([*c]struct__reent, noalias [*c]u8, noalias [*c]const u8, ...) c_int;
pub extern fn _sscanf_r([*c]struct__reent, noalias [*c]const u8, noalias [*c]const u8, ...) c_int;
pub extern fn _tempnam_r([*c]struct__reent, [*c]const u8, [*c]const u8) [*c]u8;
pub extern fn _tmpfile_r([*c]struct__reent) [*c]FILE;
pub extern fn _tmpnam_r([*c]struct__reent, [*c]u8) [*c]u8;
pub extern fn _ungetc_r([*c]struct__reent, c_int, [*c]FILE) c_int;
pub extern fn _vasiprintf_r([*c]struct__reent, [*c][*c]u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vasniprintf_r([*c]struct__reent, [*c]u8, [*c]usize, [*c]const u8, __gnuc_va_list) [*c]u8;
pub extern fn _vasnprintf_r([*c]struct__reent, [*c]u8, [*c]usize, [*c]const u8, __gnuc_va_list) [*c]u8;
pub extern fn _vasprintf_r([*c]struct__reent, [*c][*c]u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vdiprintf_r([*c]struct__reent, c_int, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vdprintf_r([*c]struct__reent, c_int, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vfiprintf_r([*c]struct__reent, [*c]FILE, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vfiscanf_r([*c]struct__reent, [*c]FILE, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vfprintf_r([*c]struct__reent, noalias [*c]FILE, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vfscanf_r([*c]struct__reent, noalias [*c]FILE, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _viprintf_r([*c]struct__reent, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _viscanf_r([*c]struct__reent, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vprintf_r([*c]struct__reent, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vscanf_r([*c]struct__reent, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vsiprintf_r([*c]struct__reent, [*c]u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vsiscanf_r([*c]struct__reent, [*c]const u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vsniprintf_r([*c]struct__reent, [*c]u8, usize, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vsnprintf_r([*c]struct__reent, noalias [*c]u8, usize, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vsprintf_r([*c]struct__reent, noalias [*c]u8, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vsscanf_r([*c]struct__reent, noalias [*c]const u8, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn fpurge([*c]FILE) c_int;
pub extern fn __getdelim([*c][*c]u8, [*c]usize, c_int, [*c]FILE) isize;
pub extern fn __getline([*c][*c]u8, [*c]usize, [*c]FILE) isize;
pub extern fn clearerr_unlocked([*c]FILE) void;
pub extern fn feof_unlocked([*c]FILE) c_int;
pub extern fn ferror_unlocked([*c]FILE) c_int;
pub extern fn fileno_unlocked([*c]FILE) c_int;
pub extern fn fflush_unlocked([*c]FILE) c_int;
pub extern fn fgetc_unlocked([*c]FILE) c_int;
pub extern fn fputc_unlocked(c_int, [*c]FILE) c_int;
pub extern fn fread_unlocked(noalias ?*anyopaque, _size: usize, _n: usize, noalias [*c]FILE) usize;
pub extern fn fwrite_unlocked(noalias ?*const anyopaque, _size: usize, _n: usize, [*c]FILE) usize;
pub extern fn __srget_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn __swbuf_r([*c]struct__reent, c_int, [*c]FILE) c_int;
pub extern fn funopen(__cookie: ?*const anyopaque, __readfn: ?*const fn (?*anyopaque, [*c]u8, c_int) callconv(.C) c_int, __writefn: ?*const fn (?*anyopaque, [*c]const u8, c_int) callconv(.C) c_int, __seekfn: ?*const fn (?*anyopaque, fpos_t, c_int) callconv(.C) fpos_t, __closefn: ?*const fn (?*anyopaque) callconv(.C) c_int) [*c]FILE;
pub extern fn _funopen_r([*c]struct__reent, __cookie: ?*const anyopaque, __readfn: ?*const fn (?*anyopaque, [*c]u8, c_int) callconv(.C) c_int, __writefn: ?*const fn (?*anyopaque, [*c]const u8, c_int) callconv(.C) c_int, __seekfn: ?*const fn (?*anyopaque, fpos_t, c_int) callconv(.C) fpos_t, __closefn: ?*const fn (?*anyopaque) callconv(.C) c_int) [*c]FILE;
pub fn __sputc_r(arg__ptr: [*c]struct__reent, arg__c: c_int, arg__p: [*c]FILE) callconv(.C) c_int {
    var _ptr = arg__ptr;
    var _c = arg__c;
    var _p = arg__p;
    if (((blk: {
        const ref = &_p.*._w;
        ref.* -= 1;
        break :blk ref.*;
    }) >= @as(c_int, 0)) or ((_p.*._w >= _p.*._lbfsize) and (@as(c_int, @bitCast(@as(c_uint, @as(u8, @bitCast(@as(i8, @truncate(_c))))))) != @as(c_int, '\n')))) return @as(c_int, @bitCast(@as(c_uint, blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(_c))));
        (blk_1: {
            const ref = &_p.*._p;
            const tmp_2 = ref.*;
            ref.* += 1;
            break :blk_1 tmp_2;
        }).* = tmp;
        break :blk tmp;
    }))) else return __swbuf_r(_ptr, _c, _p);
    return 0;
}
pub fn _getchar_unlocked() callconv(.C) c_int {
    var _ptr: [*c]struct__reent = undefined;
    _ptr = _impure_ptr;
    return if ((blk: {
        const ref = &_ptr.*._stdin.*._r;
        ref.* -= 1;
        break :blk ref.*;
    }) < @as(c_int, 0)) __srget_r(_ptr, _ptr.*._stdin) else @as(c_int, @bitCast(@as(c_uint, (blk: {
        const ref = &_ptr.*._stdin.*._p;
        const tmp = ref.*;
        ref.* += 1;
        break :blk tmp;
    }).*)));
}
pub fn _putchar_unlocked(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    var _ptr: [*c]struct__reent = undefined;
    _ptr = _impure_ptr;
    return __sputc_r(_ptr, _c, _ptr.*._stdout);
}
pub const struct__binary_info_core = extern struct {
    type: u16 align(1),
    tag: u16 align(1),
};
pub const binary_info_t = struct__binary_info_core;
pub const binary_info_core_t = struct__binary_info_core;
pub const struct__binary_info_raw_data = extern struct {
    core: struct__binary_info_core align(1),
    bytes: [1]u8 align(1),
};
pub const binary_info_raw_data_t = struct__binary_info_raw_data;
pub const struct__binary_info_sized_data = extern struct {
    core: struct__binary_info_core align(1),
    length: u32 align(1),
    bytes: [1]u8 align(1),
};
pub const binary_info_sized_data_t = struct__binary_info_sized_data;
pub const struct__binary_info_list_zero_terminated = extern struct {
    core: struct__binary_info_core align(1),
    list: u32 align(1),
};
pub const binary_info_list_zero_terminated_t = struct__binary_info_list_zero_terminated;
pub const struct__binary_info_id_and_int = extern struct {
    core: struct__binary_info_core align(1),
    id: u32 align(1),
    value: i32 align(1),
};
pub const binary_info_id_and_int_t = struct__binary_info_id_and_int;
pub const struct__binary_info_id_and_string = extern struct {
    core: struct__binary_info_core align(1),
    id: u32 align(1),
    value: u32 align(1),
};
pub const binary_info_id_and_string_t = struct__binary_info_id_and_string;
pub const struct__binary_info_block_device = extern struct {
    core: struct__binary_info_core align(1),
    name: u32 align(1),
    address: u32 align(1),
    size: u32 align(1),
    extra: u32 align(1),
    flags: u16 align(1),
};
pub const binary_info_block_device_t = struct__binary_info_block_device;
pub const struct__binary_info_pins_with_func = extern struct {
    core: struct__binary_info_core align(1),
    pin_encoding: u32 align(1),
};
pub const binary_info_pins_with_func_t = struct__binary_info_pins_with_func;
pub const struct__binary_info_pins_with_name = extern struct {
    core: struct__binary_info_core align(1),
    pin_mask: u32 align(1),
    label: u32 align(1),
};
pub const binary_info_pins_with_name_t = struct__binary_info_pins_with_name;
pub const struct__binary_info_named_group = extern struct {
    core: struct__binary_info_core align(1),
    parent_id: u32 align(1),
    flags: u16 align(1),
    group_tag: u16 align(1),
    group_id: u32 align(1),
    label: u32 align(1),
};
pub const binary_info_named_group_t = struct__binary_info_named_group;
pub const BINARY_INFO_BLOCK_DEV_FLAG_READ: c_int = 1;
pub const BINARY_INFO_BLOCK_DEV_FLAG_WRITE: c_int = 2;
pub const BINARY_INFO_BLOCK_DEV_FLAG_REFORMAT: c_int = 4;
pub const BINARY_INFO_BLOCK_DEV_FLAG_PT_UNKNOWN: c_int = 0;
pub const BINARY_INFO_BLOCK_DEV_FLAG_PT_MBR: c_int = 16;
pub const BINARY_INFO_BLOCK_DEV_FLAG_PT_GPT: c_int = 32;
pub const BINARY_INFO_BLOCK_DEV_FLAG_PT_NONE: c_int = 48;
const enum_unnamed_5 = c_uint;
pub extern fn setupLed(sm: u8, pin: u8) void;
pub extern fn setRgbColorOn(red: u8, green: u8, blue: u8) void;
pub extern fn setRgbColor(red: u8, green: u8, blue: u8) void;
pub extern fn setRgbOn(...) void;
pub extern fn setRgbOff(...) void;
pub extern fn toggleRgb(...) void;
pub extern fn blinkRgb(red: u8, green: u8, blue: u8, period: u32, count: u32) void;
pub extern fn checkLedColors(...) void;
pub const struct_pio_sm_hw = extern struct {
    clkdiv: io_rw_32,
    execctrl: io_rw_32,
    shiftctrl: io_rw_32,
    addr: io_ro_32,
    instr: io_rw_32,
    pinctrl: io_rw_32,
};
pub const pio_sm_hw_t = struct_pio_sm_hw;
pub const pio_hw_t = extern struct {
    ctrl: io_rw_32,
    fstat: io_ro_32,
    fdebug: io_rw_32,
    flevel: io_ro_32,
    txf: [4]io_wo_32,
    rxf: [4]io_ro_32,
    irq: io_rw_32,
    irq_force: io_wo_32,
    input_sync_bypass: io_rw_32,
    dbg_padout: io_ro_32,
    dbg_padoe: io_ro_32,
    dbg_cfginfo: io_ro_32,
    instr_mem: [32]io_wo_32,
    sm: [4]pio_sm_hw_t,
    intr: io_ro_32,
    inte0: io_rw_32,
    intf0: io_rw_32,
    ints0: io_ro_32,
    inte1: io_rw_32,
    intf1: io_rw_32,
    ints1: io_ro_32,
}; // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:45:24: warning: ignoring StaticAssert declaration
// C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub const pio_instr_bits_jmp: c_int = 0;
pub const pio_instr_bits_wait: c_int = 8192;
pub const pio_instr_bits_in: c_int = 16384;
pub const pio_instr_bits_out: c_int = 24576;
pub const pio_instr_bits_push: c_int = 32768;
pub const pio_instr_bits_pull: c_int = 32896;
pub const pio_instr_bits_mov: c_int = 40960;
pub const pio_instr_bits_irq: c_int = 49152;
pub const pio_instr_bits_set: c_int = 57344;
pub const enum_pio_instr_bits = c_uint;
pub const pio_pins: c_int = 0;
pub const pio_x: c_int = 1;
pub const pio_y: c_int = 2;
pub const pio_null: c_int = 163;
pub const pio_pindirs: c_int = 204;
pub const pio_exec_mov: c_int = 124;
pub const pio_status: c_int = 189;
pub const pio_pc: c_int = 109;
pub const pio_isr: c_int = 38;
pub const pio_osr: c_int = 55;
pub const pio_exec_out: c_int = 239;
pub const enum_pio_src_dest = c_uint;
pub fn _pio_major_instr_bits(arg_instr: uint) callconv(.C) uint {
    var instr = arg_instr;
    return instr & @as(c_uint, 57344);
}
pub fn _pio_encode_instr_and_args(arg_instr_bits: enum_pio_instr_bits, arg_arg1: uint, arg_arg2: uint) callconv(.C) uint {
    var instr_bits = arg_instr_bits;
    var arg1 = arg_arg1;
    var arg2 = arg_arg2;
    {
        if ((false or false) and !false) {
            _ = if (arg1 <= @as(uint, @bitCast(@as(c_int, 7)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio_instructions.h", @as(c_int, 83), "_pio_encode_instr_and_args", "arg1 <= 0x7");
        }
    }
    return (instr_bits | (arg1 << @intCast(5))) | (arg2 & @as(c_uint, 31));
}
pub fn _pio_encode_instr_and_src_dest(arg_instr_bits: enum_pio_instr_bits, arg_dest: enum_pio_src_dest, arg_value: uint) callconv(.C) uint {
    var instr_bits = arg_instr_bits;
    var dest = arg_dest;
    var value = arg_value;
    return _pio_encode_instr_and_args(instr_bits, dest & @as(c_uint, 7), value);
}
pub fn pio_encode_delay(arg_cycles: uint) callconv(.C) uint {
    var cycles = arg_cycles;
    {
        if ((false or false) and !false) {
            _ = if (cycles <= @as(uint, @bitCast(@as(c_int, 31)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio_instructions.h", @as(c_int, 112), "pio_encode_delay", "cycles <= 0x1f");
        }
    }
    return cycles << @intCast(8);
}
pub fn pio_encode_sideset(arg_sideset_bit_count: uint, arg_value: uint) callconv(.C) uint {
    var sideset_bit_count = arg_sideset_bit_count;
    var value = arg_value;
    {
        if ((false or false) and !false) {
            _ = if ((sideset_bit_count >= @as(uint, @bitCast(@as(c_int, 1)))) and (sideset_bit_count <= @as(uint, @bitCast(@as(c_int, 5))))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio_instructions.h", @as(c_int, 129), "pio_encode_sideset", "sideset_bit_count >= 1 && sideset_bit_count <= 5");
        }
    }
    {
        if ((false or false) and !false) {
            _ = if (value <= ((@as(c_uint, 1) << @intCast(sideset_bit_count)) -% @as(c_uint, @bitCast(@as(c_int, 1))))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio_instructions.h", @as(c_int, 130), "pio_encode_sideset", "value <= ((1u << sideset_bit_count) - 1)");
        }
    }
    return value << @intCast(@as(c_uint, 13) -% sideset_bit_count);
}
pub fn pio_encode_sideset_opt(arg_sideset_bit_count: uint, arg_value: uint) callconv(.C) uint {
    var sideset_bit_count = arg_sideset_bit_count;
    var value = arg_value;
    {
        if ((false or false) and !false) {
            _ = if ((sideset_bit_count >= @as(uint, @bitCast(@as(c_int, 1)))) and (sideset_bit_count <= @as(uint, @bitCast(@as(c_int, 4))))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio_instructions.h", @as(c_int, 147), "pio_encode_sideset_opt", "sideset_bit_count >= 1 && sideset_bit_count <= 4");
        }
    }
    {
        if ((false or false) and !false) {
            _ = if (value <= ((@as(c_uint, 1) << @intCast(sideset_bit_count)) -% @as(c_uint, @bitCast(@as(c_int, 1))))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio_instructions.h", @as(c_int, 148), "pio_encode_sideset_opt", "value <= ((1u << sideset_bit_count) - 1)");
        }
    }
    return @as(c_uint, 4096) | (value << @intCast(@as(c_uint, 12) -% sideset_bit_count));
}
pub fn pio_encode_jmp(arg_addr: uint) callconv(.C) uint {
    var addr = arg_addr;
    return _pio_encode_instr_and_args(@as(c_uint, @bitCast(pio_instr_bits_jmp)), @as(uint, @bitCast(@as(c_int, 0))), addr);
}
pub fn pio_encode_jmp_not_x(arg_addr: uint) callconv(.C) uint {
    var addr = arg_addr;
    return _pio_encode_instr_and_args(@as(c_uint, @bitCast(pio_instr_bits_jmp)), @as(uint, @bitCast(@as(c_int, 1))), addr);
}
pub fn pio_encode_jmp_x_dec(arg_addr: uint) callconv(.C) uint {
    var addr = arg_addr;
    return _pio_encode_instr_and_args(@as(c_uint, @bitCast(pio_instr_bits_jmp)), @as(uint, @bitCast(@as(c_int, 2))), addr);
}
pub fn pio_encode_jmp_not_y(arg_addr: uint) callconv(.C) uint {
    var addr = arg_addr;
    return _pio_encode_instr_and_args(@as(c_uint, @bitCast(pio_instr_bits_jmp)), @as(uint, @bitCast(@as(c_int, 3))), addr);
}
pub fn pio_encode_jmp_y_dec(arg_addr: uint) callconv(.C) uint {
    var addr = arg_addr;
    return _pio_encode_instr_and_args(@as(c_uint, @bitCast(pio_instr_bits_jmp)), @as(uint, @bitCast(@as(c_int, 4))), addr);
}
pub fn pio_encode_jmp_x_ne_y(arg_addr: uint) callconv(.C) uint {
    var addr = arg_addr;
    return _pio_encode_instr_and_args(@as(c_uint, @bitCast(pio_instr_bits_jmp)), @as(uint, @bitCast(@as(c_int, 5))), addr);
}
pub fn pio_encode_jmp_pin(arg_addr: uint) callconv(.C) uint {
    var addr = arg_addr;
    return _pio_encode_instr_and_args(@as(c_uint, @bitCast(pio_instr_bits_jmp)), @as(uint, @bitCast(@as(c_int, 6))), addr);
}
pub fn pio_encode_jmp_not_osre(arg_addr: uint) callconv(.C) uint {
    var addr = arg_addr;
    return _pio_encode_instr_and_args(@as(c_uint, @bitCast(pio_instr_bits_jmp)), @as(uint, @bitCast(@as(c_int, 7))), addr);
}
pub fn _pio_encode_irq(arg_relative: bool, arg_irq: uint) callconv(.C) uint {
    var relative = arg_relative;
    var irq = arg_irq;
    {
        if ((false or false) and !false) {
            _ = if (irq <= @as(uint, @bitCast(@as(c_int, 7)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio_instructions.h", @as(c_int, 257), "_pio_encode_irq", "irq <= 7");
        }
    }
    return (if (@as(c_int, @intFromBool(relative)) != 0) @as(c_uint, 16) else @as(c_uint, 0)) | irq;
}
pub fn pio_encode_wait_gpio(arg_polarity: bool, arg_gpio: uint) callconv(.C) uint {
    var polarity = arg_polarity;
    var gpio = arg_gpio;
    return _pio_encode_instr_and_args(@as(c_uint, @bitCast(pio_instr_bits_wait)), @as(c_uint, 0) | (if (@as(c_int, @intFromBool(polarity)) != 0) @as(c_uint, 4) else @as(c_uint, 0)), gpio);
}
pub fn pio_encode_wait_pin(arg_polarity: bool, arg_pin: uint) callconv(.C) uint {
    var polarity = arg_polarity;
    var pin = arg_pin;
    return _pio_encode_instr_and_args(@as(c_uint, @bitCast(pio_instr_bits_wait)), @as(c_uint, 1) | (if (@as(c_int, @intFromBool(polarity)) != 0) @as(c_uint, 4) else @as(c_uint, 0)), pin);
}
pub fn pio_encode_wait_irq(arg_polarity: bool, arg_relative: bool, arg_irq: uint) callconv(.C) uint {
    var polarity = arg_polarity;
    var relative = arg_relative;
    var irq = arg_irq;
    {
        if ((false or false) and !false) {
            _ = if (irq <= @as(uint, @bitCast(@as(c_int, 7)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio_instructions.h", @as(c_int, 301), "pio_encode_wait_irq", "irq <= 7");
        }
    }
    return _pio_encode_instr_and_args(@as(c_uint, @bitCast(pio_instr_bits_wait)), @as(c_uint, 2) | (if (@as(c_int, @intFromBool(polarity)) != 0) @as(c_uint, 4) else @as(c_uint, 0)), _pio_encode_irq(relative, irq));
}
pub fn pio_encode_in(arg_src: enum_pio_src_dest, arg_count: uint) callconv(.C) uint {
    var src = arg_src;
    var count = arg_count;
    {
        if ((false or false) and !false) {
            _ = if (!((src & @as(c_uint, 8)) != 0)) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio_instructions.h", @as(c_int, 316), "pio_encode_in", "!(src & 0x08u)");
        }
    }
    return _pio_encode_instr_and_src_dest(@as(c_uint, @bitCast(pio_instr_bits_in)), src, count);
}
pub fn pio_encode_out(arg_dest: enum_pio_src_dest, arg_count: uint) callconv(.C) uint {
    var dest = arg_dest;
    var count = arg_count;
    {
        if ((false or false) and !false) {
            _ = if (!((dest & @as(c_uint, 16)) != 0)) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio_instructions.h", @as(c_int, 331), "pio_encode_out", "!(dest & 0x10u)");
        }
    }
    return _pio_encode_instr_and_src_dest(@as(c_uint, @bitCast(pio_instr_bits_out)), dest, count);
}
pub fn pio_encode_push(arg_if_full: bool, arg_block: bool) callconv(.C) uint {
    var if_full = arg_if_full;
    var block = arg_block;
    return _pio_encode_instr_and_args(@as(c_uint, @bitCast(pio_instr_bits_push)), (if (@as(c_int, @intFromBool(if_full)) != 0) @as(c_uint, 2) else @as(c_uint, 0)) | (if (@as(c_int, @intFromBool(block)) != 0) @as(c_uint, 1) else @as(c_uint, 0)), @as(uint, @bitCast(@as(c_int, 0))));
}
pub fn pio_encode_pull(arg_if_empty: bool, arg_block: bool) callconv(.C) uint {
    var if_empty = arg_if_empty;
    var block = arg_block;
    return _pio_encode_instr_and_args(@as(c_uint, @bitCast(pio_instr_bits_pull)), (if (@as(c_int, @intFromBool(if_empty)) != 0) @as(c_uint, 2) else @as(c_uint, 0)) | (if (@as(c_int, @intFromBool(block)) != 0) @as(c_uint, 1) else @as(c_uint, 0)), @as(uint, @bitCast(@as(c_int, 0))));
}
pub fn pio_encode_mov(arg_dest: enum_pio_src_dest, arg_src: enum_pio_src_dest) callconv(.C) uint {
    var dest = arg_dest;
    var src = arg_src;
    {
        if ((false or false) and !false) {
            _ = if (!((dest & @as(c_uint, 128)) != 0)) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio_instructions.h", @as(c_int, 374), "pio_encode_mov", "!(dest & 0x80u)");
        }
    }
    {
        if ((false or false) and !false) {
            _ = if (!((src & @as(c_uint, 64)) != 0)) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio_instructions.h", @as(c_int, 375), "pio_encode_mov", "!(src & 0x40u)");
        }
    }
    return _pio_encode_instr_and_src_dest(@as(c_uint, @bitCast(pio_instr_bits_mov)), dest, src & @as(c_uint, 7));
}
pub fn pio_encode_mov_not(arg_dest: enum_pio_src_dest, arg_src: enum_pio_src_dest) callconv(.C) uint {
    var dest = arg_dest;
    var src = arg_src;
    {
        if ((false or false) and !false) {
            _ = if (!((dest & @as(c_uint, 128)) != 0)) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio_instructions.h", @as(c_int, 390), "pio_encode_mov_not", "!(dest & 0x80u)");
        }
    }
    {
        if ((false or false) and !false) {
            _ = if (!((src & @as(c_uint, 64)) != 0)) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio_instructions.h", @as(c_int, 391), "pio_encode_mov_not", "!(src & 0x40u)");
        }
    }
    return _pio_encode_instr_and_src_dest(@as(c_uint, @bitCast(pio_instr_bits_mov)), dest, (@as(c_uint, 1) << @intCast(3)) | (src & @as(c_uint, 7)));
}
pub fn pio_encode_mov_reverse(arg_dest: enum_pio_src_dest, arg_src: enum_pio_src_dest) callconv(.C) uint {
    var dest = arg_dest;
    var src = arg_src;
    {
        if ((false or false) and !false) {
            _ = if (!((dest & @as(c_uint, 128)) != 0)) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio_instructions.h", @as(c_int, 406), "pio_encode_mov_reverse", "!(dest & 0x80u)");
        }
    }
    {
        if ((false or false) and !false) {
            _ = if (!((src & @as(c_uint, 64)) != 0)) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio_instructions.h", @as(c_int, 407), "pio_encode_mov_reverse", "!(src & 0x40u)");
        }
    }
    return _pio_encode_instr_and_src_dest(@as(c_uint, @bitCast(pio_instr_bits_mov)), dest, (@as(c_uint, 2) << @intCast(3)) | (src & @as(c_uint, 7)));
}
pub fn pio_encode_irq_set(arg_relative: bool, arg_irq: uint) callconv(.C) uint {
    var relative = arg_relative;
    var irq = arg_irq;
    return _pio_encode_instr_and_args(@as(c_uint, @bitCast(pio_instr_bits_irq)), @as(uint, @bitCast(@as(c_int, 0))), _pio_encode_irq(relative, irq));
}
pub fn pio_encode_irq_wait(arg_relative: bool, arg_irq: uint) callconv(.C) uint {
    var relative = arg_relative;
    var irq = arg_irq;
    return _pio_encode_instr_and_args(@as(c_uint, @bitCast(pio_instr_bits_irq)), @as(uint, @bitCast(@as(c_int, 1))), _pio_encode_irq(relative, irq));
}
pub fn pio_encode_irq_clear(arg_relative: bool, arg_irq: uint) callconv(.C) uint {
    var relative = arg_relative;
    var irq = arg_irq;
    return _pio_encode_instr_and_args(@as(c_uint, @bitCast(pio_instr_bits_irq)), @as(uint, @bitCast(@as(c_int, 2))), _pio_encode_irq(relative, irq));
}
pub fn pio_encode_set(arg_dest: enum_pio_src_dest, arg_value: uint) callconv(.C) uint {
    var dest = arg_dest;
    var value = arg_value;
    {
        if ((false or false) and !false) {
            _ = if (!((dest & @as(c_uint, 32)) != 0)) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio_instructions.h", @as(c_int, 464), "pio_encode_set", "!(dest & 0x20u)");
        }
    }
    return _pio_encode_instr_and_src_dest(@as(c_uint, @bitCast(pio_instr_bits_set)), dest, value);
}
pub fn pio_encode_nop() callconv(.C) uint {
    return pio_encode_mov(@as(c_uint, @bitCast(pio_y)), @as(c_uint, @bitCast(pio_y)));
} // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub const PIO_FIFO_JOIN_NONE: c_int = 0;
pub const PIO_FIFO_JOIN_TX: c_int = 1;
pub const PIO_FIFO_JOIN_RX: c_int = 2;
pub const enum_pio_fifo_join = c_uint;
pub const STATUS_TX_LESSTHAN: c_int = 0;
pub const STATUS_RX_LESSTHAN: c_int = 1;
pub const enum_pio_mov_status_type = c_uint;
pub const PIO = [*c]pio_hw_t;
pub const pio_sm_config = extern struct {
    clkdiv: u32,
    execctrl: u32,
    shiftctrl: u32,
    pinctrl: u32,
};
pub fn check_sm_param(arg_sm: uint) callconv(.C) void {
    var sm = arg_sm;
    {
        if ((false or false) and !false) {
            _ = if (sm < @as(c_uint, 4)) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 110), "check_sm_param", "sm < 4u");
        }
    }
}
pub fn check_sm_mask(arg_mask: uint) callconv(.C) void {
    var mask = arg_mask;
    {
        if ((false or false) and !false) {
            _ = if (mask < (@as(c_uint, 1) << @intCast(4))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 114), "check_sm_mask", "mask < (1u << 4u)");
        }
    }
}
pub fn check_pio_param(arg_pio: PIO) callconv(.C) void {
    var pio = arg_pio;
    {
        if ((false or false) and !false) {
            _ = if ((pio == @as([*c]pio_hw_t, @ptrFromInt(@as(c_uint, 1344274432)))) or (pio == @as([*c]pio_hw_t, @ptrFromInt(@as(c_uint, 1345323008))))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 119), "check_pio_param", "pio == ((pio_hw_t *)0x50200000u) || pio == ((pio_hw_t *)0x50300000u)");
        }
    }
}
pub fn sm_config_set_out_pins(arg_c: [*c]pio_sm_config, arg_out_base: uint, arg_out_count: uint) callconv(.C) void {
    var c = arg_c;
    var out_base = arg_out_base;
    var out_count = arg_out_count;
    {
        if ((false or false) and !false) {
            _ = if (out_base < @as(uint, @bitCast(@as(c_int, 32)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 132), "sm_config_set_out_pins", "out_base < 32");
        }
    }
    {
        if ((false or false) and !false) {
            _ = if (out_count <= @as(uint, @bitCast(@as(c_int, 32)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 133), "sm_config_set_out_pins", "out_count <= 32");
        }
    }
    c.*.pinctrl = ((c.*.pinctrl & ~(@as(c_uint, 31) | @as(c_uint, 66060288))) | (out_base << @intCast(0))) | (out_count << @intCast(20));
}
pub fn sm_config_set_set_pins(arg_c: [*c]pio_sm_config, arg_set_base: uint, arg_set_count: uint) callconv(.C) void {
    var c = arg_c;
    var set_base = arg_set_base;
    var set_count = arg_set_count;
    {
        if ((false or false) and !false) {
            _ = if (set_base < @as(uint, @bitCast(@as(c_int, 32)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 149), "sm_config_set_set_pins", "set_base < 32");
        }
    }
    {
        if ((false or false) and !false) {
            _ = if (set_count <= @as(uint, @bitCast(@as(c_int, 5)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 150), "sm_config_set_set_pins", "set_count <= 5");
        }
    }
    c.*.pinctrl = ((c.*.pinctrl & ~(@as(c_uint, 992) | @as(c_uint, 469762048))) | (set_base << @intCast(5))) | (set_count << @intCast(26));
}
pub fn sm_config_set_in_pins(arg_c: [*c]pio_sm_config, arg_in_base: uint) callconv(.C) void {
    var c = arg_c;
    var in_base = arg_in_base;
    {
        if ((false or false) and !false) {
            _ = if (in_base < @as(uint, @bitCast(@as(c_int, 32)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 165), "sm_config_set_in_pins", "in_base < 32");
        }
    }
    c.*.pinctrl = (c.*.pinctrl & ~@as(c_uint, 1015808)) | (in_base << @intCast(15));
}
pub fn sm_config_set_sideset_pins(arg_c: [*c]pio_sm_config, arg_sideset_base: uint) callconv(.C) void {
    var c = arg_c;
    var sideset_base = arg_sideset_base;
    {
        if ((false or false) and !false) {
            _ = if (sideset_base < @as(uint, @bitCast(@as(c_int, 32)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 179), "sm_config_set_sideset_pins", "sideset_base < 32");
        }
    }
    c.*.pinctrl = (c.*.pinctrl & ~@as(c_uint, 31744)) | (sideset_base << @intCast(10));
}
pub fn sm_config_set_sideset(arg_c: [*c]pio_sm_config, arg_bit_count: uint, arg_optional: bool, arg_pindirs: bool) callconv(.C) void {
    var c = arg_c;
    var bit_count = arg_bit_count;
    var optional = arg_optional;
    var pindirs = arg_pindirs;
    {
        if ((false or false) and !false) {
            _ = if (bit_count <= @as(uint, @bitCast(@as(c_int, 5)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 193), "sm_config_set_sideset", "bit_count <= 5");
        }
    }
    {
        if ((false or false) and !false) {
            _ = if (!optional or (bit_count >= @as(uint, @bitCast(@as(c_int, 1))))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 194), "sm_config_set_sideset", "!optional || bit_count >= 1");
        }
    }
    c.*.pinctrl = (c.*.pinctrl & ~@as(c_uint, 3758096384)) | (bit_count << @intCast(29));
    c.*.execctrl = ((c.*.execctrl & ~(@as(c_uint, 1073741824) | @as(c_uint, 536870912))) | (@as(uint, @intFromBool(!!optional)) << @intCast(30))) | (@as(uint, @intFromBool(!!pindirs)) << @intCast(29));
}
pub fn sm_config_set_clkdiv_int_frac(arg_c: [*c]pio_sm_config, arg_div_int: u16, arg_div_frac: u8) callconv(.C) void {
    var c = arg_c;
    var div_int = arg_div_int;
    var div_frac = arg_div_frac;
    {
        if ((false or false) and !false) {
            _ = if (!((@as(c_int, @bitCast(@as(c_uint, div_int))) == @as(c_int, 0)) and (@as(c_int, @bitCast(@as(c_uint, div_frac))) != @as(c_int, 0)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 217), "sm_config_set_clkdiv_int_frac", "!(div_int == 0 && div_frac != 0)");
        }
    }
    c.*.clkdiv = (@as(uint, @bitCast(@as(c_uint, div_frac))) << @intCast(8)) | (@as(uint, @bitCast(@as(c_uint, div_int))) << @intCast(16));
}
pub fn pio_calculate_clkdiv_from_float(arg_div: f32, arg_div_int: [*c]u16, arg_div_frac: [*c]u8) callconv(.C) void {
    var div = arg_div;
    var div_int = arg_div_int;
    var div_frac = arg_div_frac;
    {
        if ((false or false) and !false) {
            _ = if ((div >= @as(f32, @floatFromInt(@as(c_int, 1)))) and (div <= @as(f32, @floatFromInt(@as(c_int, 65536))))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 224), "pio_calculate_clkdiv_from_float", "div >= 1 && div <= 65536");
        }
    }
    div_int.* = @as(u16, @intFromFloat(div));
    if (@as(c_int, @bitCast(@as(c_uint, div_int.*))) == @as(c_int, 0)) {
        div_frac.* = 0;
    } else {
        div_frac.* = @as(u8, @intFromFloat((div - @as(f32, @floatFromInt(div_int.*))) * @as(f32, @floatFromInt(@as(c_uint, 1) << @intCast(8)))));
    }
}
pub fn sm_config_set_clkdiv(arg_c: [*c]pio_sm_config, arg_div: f32) callconv(.C) void {
    var c = arg_c;
    var div = arg_div;
    var div_int: u16 = undefined;
    var div_frac: u8 = undefined;
    pio_calculate_clkdiv_from_float(div, &div_int, &div_frac);
    sm_config_set_clkdiv_int_frac(c, div_int, div_frac);
}
pub fn sm_config_set_wrap(arg_c: [*c]pio_sm_config, arg_wrap_target: uint, arg_wrap: uint) callconv(.C) void {
    var c = arg_c;
    var wrap_target = arg_wrap_target;
    var wrap = arg_wrap;
    {
        if ((false or false) and !false) {
            _ = if (wrap < @as(c_uint, 32)) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 264), "sm_config_set_wrap", "wrap < 32u");
        }
    }
    {
        if ((false or false) and !false) {
            _ = if (wrap_target < @as(c_uint, 32)) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 265), "sm_config_set_wrap", "wrap_target < 32u");
        }
    }
    c.*.execctrl = ((c.*.execctrl & ~(@as(c_uint, 126976) | @as(c_uint, 3968))) | (wrap_target << @intCast(7))) | (wrap << @intCast(12));
}
pub fn sm_config_set_jmp_pin(arg_c: [*c]pio_sm_config, arg_pin: uint) callconv(.C) void {
    var c = arg_c;
    var pin = arg_pin;
    {
        if ((false or false) and !false) {
            _ = if (pin < @as(uint, @bitCast(@as(c_int, 32)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 278), "sm_config_set_jmp_pin", "pin < 32");
        }
    }
    c.*.execctrl = (c.*.execctrl & ~@as(c_uint, 520093696)) | (pin << @intCast(24));
}
pub fn sm_config_set_in_shift(arg_c: [*c]pio_sm_config, arg_shift_right: bool, arg_autopush: bool, arg_push_threshold: uint) callconv(.C) void {
    var c = arg_c;
    var shift_right = arg_shift_right;
    var autopush = arg_autopush;
    var push_threshold = arg_push_threshold;
    {
        if ((false or false) and !false) {
            _ = if (push_threshold <= @as(uint, @bitCast(@as(c_int, 32)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 292), "sm_config_set_in_shift", "push_threshold <= 32");
        }
    }
    c.*.shiftctrl = (((c.*.shiftctrl & ~((@as(c_uint, 262144) | @as(c_uint, 65536)) | @as(c_uint, 32505856))) | (@as(uint, @intFromBool(!!shift_right)) << @intCast(18))) | (@as(uint, @intFromBool(!!autopush)) << @intCast(16))) | ((push_threshold & @as(c_uint, 31)) << @intCast(20));
}
pub fn sm_config_set_out_shift(arg_c: [*c]pio_sm_config, arg_shift_right: bool, arg_autopull: bool, arg_pull_threshold: uint) callconv(.C) void {
    var c = arg_c;
    var shift_right = arg_shift_right;
    var autopull = arg_autopull;
    var pull_threshold = arg_pull_threshold;
    {
        if ((false or false) and !false) {
            _ = if (pull_threshold <= @as(uint, @bitCast(@as(c_int, 32)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 311), "sm_config_set_out_shift", "pull_threshold <= 32");
        }
    }
    c.*.shiftctrl = (((c.*.shiftctrl & ~((@as(c_uint, 524288) | @as(c_uint, 131072)) | @as(c_uint, 1040187392))) | (@as(uint, @intFromBool(!!shift_right)) << @intCast(19))) | (@as(uint, @intFromBool(!!autopull)) << @intCast(17))) | ((pull_threshold & @as(c_uint, 31)) << @intCast(25));
}
pub fn sm_config_set_fifo_join(arg_c: [*c]pio_sm_config, arg_join: enum_pio_fifo_join) callconv(.C) void {
    var c = arg_c;
    var join = arg_join;
    {
        if ((false or false) and !false) {
            _ = if (((join == @as(c_uint, @bitCast(PIO_FIFO_JOIN_NONE))) or (join == @as(c_uint, @bitCast(PIO_FIFO_JOIN_TX)))) or (join == @as(c_uint, @bitCast(PIO_FIFO_JOIN_RX)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 328), "sm_config_set_fifo_join", "join == PIO_FIFO_JOIN_NONE || join == PIO_FIFO_JOIN_TX || join == PIO_FIFO_JOIN_RX");
        }
    }
    c.*.shiftctrl = (c.*.shiftctrl & @as(uint, @bitCast(~(@as(c_uint, 1073741824) | @as(c_uint, 2147483648))))) | (@as(uint, @bitCast(join)) << @intCast(30));
}
pub fn sm_config_set_out_special(arg_c: [*c]pio_sm_config, arg_sticky: bool, arg_has_enable_pin: bool, arg_enable_pin_index: uint) callconv(.C) void {
    var c = arg_c;
    var sticky = arg_sticky;
    var has_enable_pin = arg_has_enable_pin;
    var enable_pin_index = arg_enable_pin_index;
    c.*.execctrl = (((c.*.execctrl & @as(uint, @bitCast(~((@as(c_uint, 131072) | @as(c_uint, 262144)) | @as(c_uint, 16252928))))) | (@as(uint, @intFromBool(!!sticky)) << @intCast(17))) | (@as(uint, @intFromBool(!!has_enable_pin)) << @intCast(18))) | ((enable_pin_index << @intCast(19)) & @as(c_uint, 16252928));
}
pub fn sm_config_set_mov_status(arg_c: [*c]pio_sm_config, arg_status_sel: enum_pio_mov_status_type, arg_status_n: uint) callconv(.C) void {
    var c = arg_c;
    var status_sel = arg_status_sel;
    var status_n = arg_status_n;
    {
        if ((false or false) and !false) {
            _ = if ((status_sel == @as(c_uint, @bitCast(STATUS_TX_LESSTHAN))) or (status_sel == @as(c_uint, @bitCast(STATUS_RX_LESSTHAN)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 358), "sm_config_set_mov_status", "status_sel == STATUS_TX_LESSTHAN || status_sel == STATUS_RX_LESSTHAN");
        }
    }
    c.*.execctrl = ((c.*.execctrl & ~(@as(c_uint, 16) | @as(c_uint, 15))) | ((@as(uint, @bitCast(status_sel)) << @intCast(4)) & @as(c_uint, 16))) | ((status_n << @intCast(0)) & @as(c_uint, 15));
}
pub fn pio_get_default_sm_config() callconv(.C) pio_sm_config {
    var c: pio_sm_config = pio_sm_config{
        .clkdiv = @as(u32, @bitCast(@as(c_int, 0))),
        .execctrl = @as(u32, @bitCast(@as(c_int, 0))),
        .shiftctrl = @as(u32, @bitCast(@as(c_int, 0))),
        .pinctrl = @as(u32, @bitCast(@as(c_int, 0))),
    };
    sm_config_set_clkdiv_int_frac(&c, @as(u16, @bitCast(@as(c_short, @truncate(@as(c_int, 1))))), @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 0))))));
    sm_config_set_wrap(&c, @as(uint, @bitCast(@as(c_int, 0))), @as(uint, @bitCast(@as(c_int, 31))));
    sm_config_set_in_shift(&c, @as(c_int, 1) != 0, @as(c_int, 0) != 0, @as(uint, @bitCast(@as(c_int, 32))));
    sm_config_set_out_shift(&c, @as(c_int, 1) != 0, @as(c_int, 0) != 0, @as(uint, @bitCast(@as(c_int, 32))));
    return c;
}
pub fn pio_sm_set_config(arg_pio: PIO, arg_sm: uint, arg_config: [*c]const pio_sm_config) callconv(.C) void {
    var pio = arg_pio;
    var sm = arg_sm;
    var config = arg_config;
    check_pio_param(pio);
    check_sm_param(sm);
    pio.*.sm[sm].clkdiv = config.*.clkdiv;
    pio.*.sm[sm].execctrl = config.*.execctrl;
    pio.*.sm[sm].shiftctrl = config.*.shiftctrl;
    pio.*.sm[sm].pinctrl = config.*.pinctrl;
}
pub fn pio_get_index(arg_pio: PIO) callconv(.C) uint {
    var pio = arg_pio;
    check_pio_param(pio);
    return @as(uint, @bitCast(if (pio == @as([*c]pio_hw_t, @ptrFromInt(@as(c_uint, 1345323008)))) @as(c_int, 1) else @as(c_int, 0)));
}
pub fn pio_gpio_init(arg_pio: PIO, arg_pin: uint) callconv(.C) void {
    var pio = arg_pio;
    var pin = arg_pin;
    check_pio_param(pio);
    {
        if ((false or false) and !false) {
            _ = if (pin < @as(uint, @bitCast(@as(c_int, 32)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 435), "pio_gpio_init", "pin < 32");
        }
    }
    gpio_set_function(pin, @as(c_uint, @bitCast(if (pio == @as([*c]pio_hw_t, @ptrFromInt(@as(c_uint, 1344274432)))) GPIO_FUNC_PIO0 else GPIO_FUNC_PIO1)));
} // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:45:24: warning: ignoring StaticAssert declaration
// C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:45:24: warning: ignoring StaticAssert declaration
// C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:45:24: warning: ignoring StaticAssert declaration
// C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:45:24: warning: ignoring StaticAssert declaration
// C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub fn pio_get_dreq(arg_pio: PIO, arg_sm: uint, arg_is_tx: bool) callconv(.C) uint {
    var pio = arg_pio;
    var sm = arg_sm;
    var is_tx = arg_is_tx;
    check_pio_param(pio);
    check_sm_param(sm);
    return (sm +% (if (@as(c_int, @intFromBool(is_tx)) != 0) @as(c_uint, @bitCast(@as(c_int, 0))) else @as(c_uint, 4))) +% @as(c_uint, @bitCast(if (pio == @as([*c]pio_hw_t, @ptrFromInt(@as(c_uint, 1344274432)))) @as(c_int, 0) else @as(c_int, 8)));
}
pub const struct_pio_program = extern struct {
    instructions: [*c]const u16 align(1),
    length: u8 align(1),
    origin: i8 align(1),
};
pub const pio_program_t = struct_pio_program;
pub extern fn pio_can_add_program(pio: PIO, program: [*c]const pio_program_t) bool;
pub extern fn pio_can_add_program_at_offset(pio: PIO, program: [*c]const pio_program_t, offset: uint) bool;
pub extern fn pio_add_program(pio: PIO, program: [*c]const pio_program_t) uint;
pub extern fn pio_add_program_at_offset(pio: PIO, program: [*c]const pio_program_t, offset: uint) void;
pub extern fn pio_remove_program(pio: PIO, program: [*c]const pio_program_t, loaded_offset: uint) void;
pub extern fn pio_clear_instruction_memory(pio: PIO) void;
pub extern fn pio_sm_init(pio: PIO, sm: uint, initial_pc: uint, config: [*c]const pio_sm_config) void;
pub fn pio_sm_set_enabled(arg_pio: PIO, arg_sm: uint, arg_enabled: bool) callconv(.C) void {
    var pio = arg_pio;
    var sm = arg_sm;
    var enabled = arg_enabled;
    check_pio_param(pio);
    check_sm_param(sm);
    pio.*.ctrl = (pio.*.ctrl & ~(@as(c_uint, 1) << @intCast(sm))) | (@as(uint, @intFromBool(!!enabled)) << @intCast(sm));
}
pub fn pio_set_sm_mask_enabled(arg_pio: PIO, arg_mask: u32, arg_enabled: bool) callconv(.C) void {
    var pio = arg_pio;
    var mask = arg_mask;
    var enabled = arg_enabled;
    check_pio_param(pio);
    check_sm_mask(mask);
    pio.*.ctrl = (pio.*.ctrl & ~mask) | (if (@as(c_int, @intFromBool(enabled)) != 0) mask else @as(c_uint, 0));
}
pub fn pio_sm_restart(arg_pio: PIO, arg_sm: uint) callconv(.C) void {
    var pio = arg_pio;
    var sm = arg_sm;
    check_pio_param(pio);
    check_sm_param(sm);
    hw_set_bits(&pio.*.ctrl, @as(c_uint, 1) << @intCast(@as(c_uint, 4) +% sm));
}
pub fn pio_restart_sm_mask(arg_pio: PIO, arg_mask: u32) callconv(.C) void {
    var pio = arg_pio;
    var mask = arg_mask;
    check_pio_param(pio);
    check_sm_mask(mask);
    hw_set_bits(&pio.*.ctrl, (mask << @intCast(4)) & @as(c_uint, 240));
}
pub fn pio_sm_clkdiv_restart(arg_pio: PIO, arg_sm: uint) callconv(.C) void {
    var pio = arg_pio;
    var sm = arg_sm;
    check_pio_param(pio);
    check_sm_param(sm);
    hw_set_bits(&pio.*.ctrl, @as(c_uint, 1) << @intCast(@as(c_uint, 8) +% sm));
}
pub fn pio_clkdiv_restart_sm_mask(arg_pio: PIO, arg_mask: u32) callconv(.C) void {
    var pio = arg_pio;
    var mask = arg_mask;
    check_pio_param(pio);
    check_sm_mask(mask);
    hw_set_bits(&pio.*.ctrl, (mask << @intCast(8)) & @as(c_uint, 3840));
}
pub fn pio_enable_sm_mask_in_sync(arg_pio: PIO, arg_mask: u32) callconv(.C) void {
    var pio = arg_pio;
    var mask = arg_mask;
    check_pio_param(pio);
    check_sm_mask(mask);
    hw_set_bits(&pio.*.ctrl, ((mask << @intCast(8)) & @as(c_uint, 3840)) | ((mask << @intCast(0)) & @as(c_uint, 15)));
}
pub const pis_interrupt0: c_int = 8;
pub const pis_interrupt1: c_int = 9;
pub const pis_interrupt2: c_int = 10;
pub const pis_interrupt3: c_int = 11;
pub const pis_sm0_tx_fifo_not_full: c_int = 4;
pub const pis_sm1_tx_fifo_not_full: c_int = 5;
pub const pis_sm2_tx_fifo_not_full: c_int = 6;
pub const pis_sm3_tx_fifo_not_full: c_int = 7;
pub const pis_sm0_rx_fifo_not_empty: c_int = 0;
pub const pis_sm1_rx_fifo_not_empty: c_int = 1;
pub const pis_sm2_rx_fifo_not_empty: c_int = 2;
pub const pis_sm3_rx_fifo_not_empty: c_int = 3;
pub const enum_pio_interrupt_source = c_uint;
pub fn pio_set_irq0_source_enabled(arg_pio: PIO, arg_source: enum_pio_interrupt_source, arg_enabled: bool) callconv(.C) void {
    var pio = arg_pio;
    var source = arg_source;
    var enabled = arg_enabled;
    check_pio_param(pio);
    {
        if ((false or false) and !false) {
            _ = if (!(source >= @as(c_uint, @bitCast(@as(c_int, 12))))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 709), "pio_set_irq0_source_enabled", "!(source >= 12)");
        }
    }
    if (enabled) {
        hw_set_bits(&pio.*.inte0, @as(c_uint, 1) << @intCast(source));
    } else {
        hw_clear_bits(&pio.*.inte0, @as(c_uint, 1) << @intCast(source));
    }
}
pub fn pio_set_irq1_source_enabled(arg_pio: PIO, arg_source: enum_pio_interrupt_source, arg_enabled: bool) callconv(.C) void {
    var pio = arg_pio;
    var source = arg_source;
    var enabled = arg_enabled;
    check_pio_param(pio);
    {
        if ((false or false) and !false) {
            _ = if (!(source >= @as(c_uint, @bitCast(@as(c_int, 12))))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 725), "pio_set_irq1_source_enabled", "!(source >= 12)");
        }
    }
    if (enabled) {
        hw_set_bits(&pio.*.inte1, @as(c_uint, 1) << @intCast(source));
    } else {
        hw_clear_bits(&pio.*.inte1, @as(c_uint, 1) << @intCast(source));
    }
}
pub fn pio_set_irq0_source_mask_enabled(arg_pio: PIO, arg_source_mask: u32, arg_enabled: bool) callconv(.C) void {
    var pio = arg_pio;
    var source_mask = arg_source_mask;
    var enabled = arg_enabled;
    check_pio_param(pio);
    {
        if ((false or false) and !false) {
            _ = if (!(source_mask > @as(c_uint, 4095))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 741), "pio_set_irq0_source_mask_enabled", "!(source_mask > 0x00000fffu)");
        }
    }
    if (enabled) {
        hw_set_bits(&pio.*.inte0, source_mask);
    } else {
        hw_clear_bits(&pio.*.inte0, source_mask);
    }
}
pub fn pio_set_irq1_source_mask_enabled(arg_pio: PIO, arg_source_mask: u32, arg_enabled: bool) callconv(.C) void {
    var pio = arg_pio;
    var source_mask = arg_source_mask;
    var enabled = arg_enabled;
    check_pio_param(pio);
    {
        if ((false or false) and !false) {
            _ = if (!(source_mask > @as(c_uint, 4095))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 758), "pio_set_irq1_source_mask_enabled", "!(source_mask > 0x00000fffu)");
        }
    }
    if (enabled) {
        hw_set_bits(&pio.*.inte1, source_mask);
    } else {
        hw_clear_bits(&pio.*.inte1, source_mask);
    }
}
pub fn pio_set_irqn_source_enabled(arg_pio: PIO, arg_irq_index: uint, arg_source: enum_pio_interrupt_source, arg_enabled: bool) callconv(.C) void {
    var pio = arg_pio;
    var irq_index = arg_irq_index;
    var source = arg_source;
    var enabled = arg_enabled;
    {
        if ((false or false) and !false) {
            _ = if (!(irq_index > @as(uint, @bitCast(@as(c_int, 1))))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 775), "pio_set_irqn_source_enabled", "!(irq_index > 1)");
        }
    }
    if (irq_index != 0) {
        pio_set_irq1_source_enabled(pio, source, enabled);
    } else {
        pio_set_irq0_source_enabled(pio, source, enabled);
    }
}
pub fn pio_set_irqn_source_mask_enabled(arg_pio: PIO, arg_irq_index: uint, arg_source_mask: u32, arg_enabled: bool) callconv(.C) void {
    var pio = arg_pio;
    var irq_index = arg_irq_index;
    var source_mask = arg_source_mask;
    var enabled = arg_enabled;
    {
        if ((false or false) and !false) {
            _ = if (!(irq_index > @as(uint, @bitCast(@as(c_int, 1))))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 792), "pio_set_irqn_source_mask_enabled", "!(irq_index > 1)");
        }
    }
    if (irq_index != 0) {
        pio_set_irq1_source_mask_enabled(pio, source_mask, enabled);
    } else {
        pio_set_irq0_source_mask_enabled(pio, source_mask, enabled);
    }
}
pub fn pio_interrupt_get(arg_pio: PIO, arg_pio_interrupt_num: uint) callconv(.C) bool {
    var pio = arg_pio;
    var pio_interrupt_num = arg_pio_interrupt_num;
    check_pio_param(pio);
    {
        if ((false or false) and !false) {
            _ = if (!(pio_interrupt_num >= @as(uint, @bitCast(@as(c_int, 8))))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 809), "pio_interrupt_get", "!(pio_interrupt_num >= 8)");
        }
    }
    return (pio.*.irq & (@as(c_uint, 1) << @intCast(pio_interrupt_num))) != 0;
}
pub fn pio_interrupt_clear(arg_pio: PIO, arg_pio_interrupt_num: uint) callconv(.C) void {
    var pio = arg_pio;
    var pio_interrupt_num = arg_pio_interrupt_num;
    check_pio_param(pio);
    {
        if ((false or false) and !false) {
            _ = if (!(pio_interrupt_num >= @as(uint, @bitCast(@as(c_int, 8))))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 821), "pio_interrupt_clear", "!(pio_interrupt_num >= 8)");
        }
    }
    pio.*.irq = @as(c_uint, 1) << @intCast(pio_interrupt_num);
}
pub fn pio_sm_get_pc(arg_pio: PIO, arg_sm: uint) callconv(.C) u8 {
    var pio = arg_pio;
    var sm = arg_sm;
    check_pio_param(pio);
    check_sm_param(sm);
    return @as(u8, @bitCast(@as(u8, @truncate(pio.*.sm[sm].addr))));
}
pub fn pio_sm_exec(arg_pio: PIO, arg_sm: uint, arg_instr: uint) callconv(.C) void {
    var pio = arg_pio;
    var sm = arg_sm;
    var instr = arg_instr;
    check_pio_param(pio);
    check_sm_param(sm);
    pio.*.sm[sm].instr = instr;
}
pub fn pio_sm_is_exec_stalled(arg_pio: PIO, arg_sm: uint) callconv(.C) bool {
    var pio = arg_pio;
    var sm = arg_sm;
    check_pio_param(pio);
    check_sm_param(sm);
    return !!((pio.*.sm[sm].execctrl & @as(c_uint, 2147483648)) != 0);
}
pub fn pio_sm_exec_wait_blocking(arg_pio: PIO, arg_sm: uint, arg_instr: uint) callconv(.C) void {
    var pio = arg_pio;
    var sm = arg_sm;
    var instr = arg_instr;
    check_pio_param(pio);
    check_sm_param(sm);
    pio_sm_exec(pio, sm, instr);
    while (pio_sm_is_exec_stalled(pio, sm)) {
        tight_loop_contents();
    }
}
pub fn pio_sm_set_wrap(arg_pio: PIO, arg_sm: uint, arg_wrap_target: uint, arg_wrap: uint) callconv(.C) void {
    var pio = arg_pio;
    var sm = arg_sm;
    var wrap_target = arg_wrap_target;
    var wrap = arg_wrap;
    check_pio_param(pio);
    check_sm_param(sm);
    {
        if ((false or false) and !false) {
            _ = if (wrap < @as(c_uint, 32)) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 900), "pio_sm_set_wrap", "wrap < 32u");
        }
    }
    {
        if ((false or false) and !false) {
            _ = if (wrap_target < @as(c_uint, 32)) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 901), "pio_sm_set_wrap", "wrap_target < 32u");
        }
    }
    pio.*.sm[sm].execctrl = ((pio.*.sm[sm].execctrl & ~(@as(c_uint, 126976) | @as(c_uint, 3968))) | (wrap_target << @intCast(7))) | (wrap << @intCast(12));
}
pub fn pio_sm_set_out_pins(arg_pio: PIO, arg_sm: uint, arg_out_base: uint, arg_out_count: uint) callconv(.C) void {
    var pio = arg_pio;
    var sm = arg_sm;
    var out_base = arg_out_base;
    var out_count = arg_out_count;
    check_pio_param(pio);
    check_sm_param(sm);
    {
        if ((false or false) and !false) {
            _ = if (out_base < @as(uint, @bitCast(@as(c_int, 32)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 921), "pio_sm_set_out_pins", "out_base < 32");
        }
    }
    {
        if ((false or false) and !false) {
            _ = if (out_count <= @as(uint, @bitCast(@as(c_int, 32)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 922), "pio_sm_set_out_pins", "out_count <= 32");
        }
    }
    pio.*.sm[sm].pinctrl = ((pio.*.sm[sm].pinctrl & ~(@as(c_uint, 31) | @as(c_uint, 66060288))) | (out_base << @intCast(0))) | (out_count << @intCast(20));
}
pub fn pio_sm_set_set_pins(arg_pio: PIO, arg_sm: uint, arg_set_base: uint, arg_set_count: uint) callconv(.C) void {
    var pio = arg_pio;
    var sm = arg_sm;
    var set_base = arg_set_base;
    var set_count = arg_set_count;
    check_pio_param(pio);
    check_sm_param(sm);
    {
        if ((false or false) and !false) {
            _ = if (set_base < @as(uint, @bitCast(@as(c_int, 32)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 942), "pio_sm_set_set_pins", "set_base < 32");
        }
    }
    {
        if ((false or false) and !false) {
            _ = if (set_count <= @as(uint, @bitCast(@as(c_int, 5)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 943), "pio_sm_set_set_pins", "set_count <= 5");
        }
    }
    pio.*.sm[sm].pinctrl = ((pio.*.sm[sm].pinctrl & ~(@as(c_uint, 992) | @as(c_uint, 469762048))) | (set_base << @intCast(5))) | (set_count << @intCast(26));
}
pub fn pio_sm_set_in_pins(arg_pio: PIO, arg_sm: uint, arg_in_base: uint) callconv(.C) void {
    var pio = arg_pio;
    var sm = arg_sm;
    var in_base = arg_in_base;
    check_pio_param(pio);
    check_sm_param(sm);
    {
        if ((false or false) and !false) {
            _ = if (in_base < @as(uint, @bitCast(@as(c_int, 32)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 961), "pio_sm_set_in_pins", "in_base < 32");
        }
    }
    pio.*.sm[sm].pinctrl = (pio.*.sm[sm].pinctrl & ~@as(c_uint, 1015808)) | (in_base << @intCast(15));
}
pub fn pio_sm_set_sideset_pins(arg_pio: PIO, arg_sm: uint, arg_sideset_base: uint) callconv(.C) void {
    var pio = arg_pio;
    var sm = arg_sm;
    var sideset_base = arg_sideset_base;
    check_pio_param(pio);
    check_sm_param(sm);
    {
        if ((false or false) and !false) {
            _ = if (sideset_base < @as(uint, @bitCast(@as(c_int, 32)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 978), "pio_sm_set_sideset_pins", "sideset_base < 32");
        }
    }
    pio.*.sm[sm].pinctrl = (pio.*.sm[sm].pinctrl & ~@as(c_uint, 31744)) | (sideset_base << @intCast(10));
}
pub fn pio_sm_put(arg_pio: PIO, arg_sm: uint, arg_data: u32) callconv(.C) void {
    var pio = arg_pio;
    var sm = arg_sm;
    var data = arg_data;
    check_pio_param(pio);
    check_sm_param(sm);
    pio.*.txf[sm] = data;
}
pub fn pio_sm_get(arg_pio: PIO, arg_sm: uint) callconv(.C) u32 {
    var pio = arg_pio;
    var sm = arg_sm;
    check_pio_param(pio);
    check_sm_param(sm);
    return pio.*.rxf[sm];
}
pub fn pio_sm_is_rx_fifo_full(arg_pio: PIO, arg_sm: uint) callconv(.C) bool {
    var pio = arg_pio;
    var sm = arg_sm;
    check_pio_param(pio);
    check_sm_param(sm);
    return (pio.*.fstat & (@as(c_uint, 1) << @intCast(@as(c_uint, 0) +% sm))) != @as(c_uint, @bitCast(@as(c_int, 0)));
}
pub fn pio_sm_is_rx_fifo_empty(arg_pio: PIO, arg_sm: uint) callconv(.C) bool {
    var pio = arg_pio;
    var sm = arg_sm;
    check_pio_param(pio);
    check_sm_param(sm);
    return (pio.*.fstat & (@as(c_uint, 1) << @intCast(@as(c_uint, 8) +% sm))) != @as(c_uint, @bitCast(@as(c_int, 0)));
}
pub fn pio_sm_get_rx_fifo_level(arg_pio: PIO, arg_sm: uint) callconv(.C) uint {
    var pio = arg_pio;
    var sm = arg_sm;
    check_pio_param(pio);
    check_sm_param(sm);
    var bitoffs: uint = @as(c_uint, 4) +% (sm *% (@as(c_uint, 12) -% @as(c_uint, 4)));
    const mask: u32 = @as(c_uint, 240) >> @intCast(4);
    return (pio.*.flevel >> @intCast(bitoffs)) & mask;
}
pub fn pio_sm_is_tx_fifo_full(arg_pio: PIO, arg_sm: uint) callconv(.C) bool {
    var pio = arg_pio;
    var sm = arg_sm;
    check_pio_param(pio);
    check_sm_param(sm);
    return (pio.*.fstat & (@as(c_uint, 1) << @intCast(@as(c_uint, 16) +% sm))) != @as(c_uint, @bitCast(@as(c_int, 0)));
}
pub fn pio_sm_is_tx_fifo_empty(arg_pio: PIO, arg_sm: uint) callconv(.C) bool {
    var pio = arg_pio;
    var sm = arg_sm;
    check_pio_param(pio);
    check_sm_param(sm);
    return (pio.*.fstat & (@as(c_uint, 1) << @intCast(@as(c_uint, 24) +% sm))) != @as(c_uint, @bitCast(@as(c_int, 0)));
}
pub fn pio_sm_get_tx_fifo_level(arg_pio: PIO, arg_sm: uint) callconv(.C) uint {
    var pio = arg_pio;
    var sm = arg_sm;
    check_pio_param(pio);
    check_sm_param(sm);
    var bitoffs: c_uint = @as(c_uint, 0) +% (sm *% (@as(c_uint, 8) -% @as(c_uint, 0)));
    const mask: u32 = @as(c_uint, 15) >> @intCast(0);
    return (pio.*.flevel >> @intCast(bitoffs)) & mask;
}
pub fn pio_sm_put_blocking(arg_pio: PIO, arg_sm: uint, arg_data: u32) callconv(.C) void {
    var pio = arg_pio;
    var sm = arg_sm;
    var data = arg_data;
    check_pio_param(pio);
    check_sm_param(sm);
    while (pio_sm_is_tx_fifo_full(pio, sm)) {
        tight_loop_contents();
    }
    pio_sm_put(pio, sm, data);
}
pub fn pio_sm_get_blocking(arg_pio: PIO, arg_sm: uint) callconv(.C) u32 {
    var pio = arg_pio;
    var sm = arg_sm;
    check_pio_param(pio);
    check_sm_param(sm);
    while (pio_sm_is_rx_fifo_empty(pio, sm)) {
        tight_loop_contents();
    }
    return pio_sm_get(pio, sm);
}
pub extern fn pio_sm_drain_tx_fifo(pio: PIO, sm: uint) void;
pub fn pio_sm_set_clkdiv_int_frac(arg_pio: PIO, arg_sm: uint, arg_div_int: u16, arg_div_frac: u8) callconv(.C) void {
    var pio = arg_pio;
    var sm = arg_sm;
    var div_int = arg_div_int;
    var div_frac = arg_div_frac;
    check_pio_param(pio);
    check_sm_param(sm);
    {
        if ((false or false) and !false) {
            _ = if (!((@as(c_int, @bitCast(@as(c_uint, div_int))) == @as(c_int, 0)) and (@as(c_int, @bitCast(@as(c_uint, div_frac))) != @as(c_int, 0)))) @as(c_int, 0) else __assert_func("C:\\Program Files\\Raspberry Pi\\Pico SDK v1.5.1\\pico-sdk\\src\\rp2_common\\hardware_pio\\include/hardware/pio.h", @as(c_int, 1159), "pio_sm_set_clkdiv_int_frac", "!(div_int == 0 && div_frac != 0)");
        }
    }
    pio.*.sm[sm].clkdiv = (@as(uint, @bitCast(@as(c_uint, div_frac))) << @intCast(8)) | (@as(uint, @bitCast(@as(c_uint, div_int))) << @intCast(16));
}
pub fn pio_sm_set_clkdiv(arg_pio: PIO, arg_sm: uint, arg_div: f32) callconv(.C) void {
    var pio = arg_pio;
    var sm = arg_sm;
    var div = arg_div;
    check_pio_param(pio);
    check_sm_param(sm);
    var div_int: u16 = undefined;
    var div_frac: u8 = undefined;
    pio_calculate_clkdiv_from_float(div, &div_int, &div_frac);
    pio_sm_set_clkdiv_int_frac(pio, sm, div_int, div_frac);
}
pub fn pio_sm_clear_fifos(arg_pio: PIO, arg_sm: uint) callconv(.C) void {
    var pio = arg_pio;
    var sm = arg_sm;
    check_pio_param(pio);
    check_sm_param(sm);
    hw_xor_bits(&pio.*.sm[sm].shiftctrl, @as(c_uint, 2147483648));
    hw_xor_bits(&pio.*.sm[sm].shiftctrl, @as(c_uint, 2147483648));
}
pub extern fn pio_sm_set_pins(pio: PIO, sm: uint, pin_values: u32) void;
pub extern fn pio_sm_set_pins_with_mask(pio: PIO, sm: uint, pin_values: u32, pin_mask: u32) void;
pub extern fn pio_sm_set_pindirs_with_mask(pio: PIO, sm: uint, pin_dirs: u32, pin_mask: u32) void;
pub extern fn pio_sm_set_consecutive_pindirs(pio: PIO, sm: uint, pin_base: uint, pin_count: uint, is_out: bool) void;
pub extern fn pio_sm_claim(pio: PIO, sm: uint) void;
pub extern fn pio_claim_sm_mask(pio: PIO, sm_mask: uint) void;
pub extern fn pio_sm_unclaim(pio: PIO, sm: uint) void;
pub extern fn pio_claim_unused_sm(pio: PIO, required: bool) c_int;
pub extern fn pio_sm_is_claimed(pio: PIO, sm: uint) bool;
pub const ws2812_program_instructions: [4]u16 = [4]u16{
    @as(u16, @bitCast(@as(c_short, @truncate(@as(c_int, 25121))))),
    @as(u16, @bitCast(@as(c_short, @truncate(@as(c_int, 4387))))),
    @as(u16, @bitCast(@as(c_short, @truncate(@as(c_int, 5120))))),
    @as(u16, @bitCast(@as(c_short, @truncate(@as(c_int, 42050))))),
};
pub const ws2812_program: struct_pio_program = struct_pio_program{
    .instructions = @as([*c]const u16, @ptrCast(@alignCast(&ws2812_program_instructions))),
    .length = @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, 4))))),
    .origin = @as(i8, @bitCast(@as(i8, @truncate(-@as(c_int, 1))))),
};
pub fn ws2812_program_get_default_config(arg_offset: uint) callconv(.C) pio_sm_config {
    var offset = arg_offset;
    var c: pio_sm_config = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset +% @as(uint, @bitCast(@as(c_int, 0))), offset +% @as(uint, @bitCast(@as(c_int, 3))));
    sm_config_set_sideset(&c, @as(uint, @bitCast(@as(c_int, 1))), @as(c_int, 0) != 0, @as(c_int, 0) != 0);
    return c;
}
pub const clk_gpout0: c_int = 0;
pub const clk_gpout1: c_int = 1;
pub const clk_gpout2: c_int = 2;
pub const clk_gpout3: c_int = 3;
pub const clk_ref: c_int = 4;
pub const clk_sys: c_int = 5;
pub const clk_peri: c_int = 6;
pub const clk_usb: c_int = 7;
pub const clk_adc: c_int = 8;
pub const clk_rtc: c_int = 9;
pub const CLK_COUNT: c_int = 10;
pub const enum_clock_index = c_uint;
pub const clock_hw_t = extern struct {
    ctrl: io_rw_32,
    div: io_rw_32,
    selected: io_ro_32,
};
pub const clock_resus_hw_t = extern struct {
    ctrl: io_rw_32,
    status: io_ro_32,
};
pub const fc_hw_t = extern struct {
    ref_khz: io_rw_32,
    min_khz: io_rw_32,
    max_khz: io_rw_32,
    delay: io_rw_32,
    interval: io_rw_32,
    src: io_rw_32,
    status: io_ro_32,
    result: io_ro_32,
};
pub const clocks_hw_t = extern struct {
    clk: [10]clock_hw_t,
    resus: clock_resus_hw_t,
    fc0: fc_hw_t,
    wake_en0: io_rw_32,
    wake_en1: io_rw_32,
    sleep_en0: io_rw_32,
    sleep_en1: io_rw_32,
    enabled0: io_ro_32,
    enabled1: io_ro_32,
    intr: io_ro_32,
    inte: io_rw_32,
    intf: io_rw_32,
    ints: io_ro_32,
}; // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub extern fn clocks_init() void;
pub extern fn clock_configure(clk_index: enum_clock_index, src: u32, auxsrc: u32, src_freq: u32, freq: u32) bool;
pub extern fn clock_stop(clk_index: enum_clock_index) void;
pub extern fn clock_get_hz(clk_index: enum_clock_index) u32;
pub extern fn frequency_count_khz(src: uint) u32;
pub extern fn clock_set_reported_hz(clk_index: enum_clock_index, hz: uint) void;
pub fn frequency_count_mhz(arg_src: uint) callconv(.C) f32 {
    var src = arg_src;
    return @as(f32, @floatFromInt(frequency_count_khz(src))) / @as(f32, @floatFromInt(@as(c_int, 1000)));
}
pub const resus_callback_t = ?*const fn () callconv(.C) void;
pub extern fn clocks_enable_resus(resus_callback: resus_callback_t) void;
pub extern fn clock_gpio_init_int_frac(gpio: uint, src: uint, div_int: u32, div_frac: u8) void;
pub fn clock_gpio_init(arg_gpio: uint, arg_src: uint, arg_div: f32) callconv(.C) void {
    var gpio = arg_gpio;
    var src = arg_src;
    var div = arg_div;
    var div_int: uint = @as(uint, @intFromFloat(div));
    var frac: u8 = @as(u8, @intFromFloat((div - @as(f32, @floatFromInt(div_int))) * @as(f32, @floatFromInt(@as(c_uint, 1) << @intCast(8)))));
    clock_gpio_init_int_frac(gpio, src, div_int, frac);
}
pub extern fn clock_configure_gpin(clk_index: enum_clock_index, gpio: uint, src_freq: u32, freq: u32) bool;
pub fn ws2812_program_init(arg_pio: PIO, arg_sm: uint, arg_offset: uint, arg_pin: uint, arg_freq: f32, arg_rgbw: bool) callconv(.C) void {
    var pio = arg_pio;
    var sm = arg_sm;
    var offset = arg_offset;
    var pin = arg_pin;
    var freq = arg_freq;
    var rgbw = arg_rgbw;
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, @as(uint, @bitCast(@as(c_int, 1))), @as(c_int, 1) != 0);
    var c: pio_sm_config = ws2812_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, @as(c_int, 0) != 0, @as(c_int, 1) != 0, @as(uint, @bitCast(if (@as(c_int, @intFromBool(rgbw)) != 0) @as(c_int, 32) else @as(c_int, 24))));
    sm_config_set_fifo_join(&c, @as(c_uint, @bitCast(PIO_FIFO_JOIN_TX)));
    var cycles_per_bit: c_int = (@as(c_int, 2) + @as(c_int, 5)) + @as(c_int, 3);
    var div: f32 = @as(f32, @floatFromInt(clock_get_hz(@as(c_uint, @bitCast(clk_sys))))) / (freq * @as(f32, @floatFromInt(cycles_per_bit)));
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, @as(c_int, 1) != 0);
}
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):79:9
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):85:9
pub const __FLT16_DENORM_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):108:9
pub const __FLT16_EPSILON__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):112:9
pub const __FLT16_MAX__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):118:9
pub const __FLT16_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):121:9
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):183:9
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`"); // (no file):205:9
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):213:9
pub const __PICO_STRING = @compileError("unable to translate C expr: unexpected token '#'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\common\pico_base\include/pico.h:20:9
pub const __PICO_CONCAT1 = @compileError("unable to translate C expr: unexpected token '##'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\common\pico_base\include/pico.h:22:9
pub const _LONG_DOUBLE = @compileError("unable to translate: TODO long double"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/_ansi.h:37:9
pub const _ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/_ansi.h:43:9
pub const _ELIDABLE_INLINE = @compileError("unable to translate macro: undefined identifier `__inline__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/_ansi.h:69:9
pub const _NOINLINE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/_ansi.h:73:9
pub const _NOINLINE_STATIC = @compileError("unable to translate C expr: unexpected token 'static'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/_ansi.h:74:9
pub const assert = @compileError("unable to translate macro: undefined identifier `__FILE__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:16:10
pub const __ASSERT_FUNC = @compileError("unable to translate macro: undefined identifier `__func__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:26:12
pub const static_assert = @compileError("unable to translate C expr: unexpected token '_Static_assert'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/assert.h:45:10
pub const PARAM_ASSERTIONS_ENABLED = @compileError("unable to translate macro: undefined identifier `PARAM_ASSERTIONS_ENABLED_`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\common\pico_base\include/pico/assert.h:32:9
pub const invalid_params_if = @compileError("unable to translate C expr: unexpected token '{'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\common\pico_base\include/pico/assert.h:34:9
pub const valid_params_if = @compileError("unable to translate C expr: unexpected token '{'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\common\pico_base\include/pico/assert.h:35:9
pub const hard_assert_if = @compileError("unable to translate C expr: unexpected token '{'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\common\pico_base\include/pico/assert.h:36:9
pub const __stdint_join3 = @compileError("unable to translate C expr: unexpected token '##'"); // C:\Users\Acer\zig\lib\include/stdint.h:287:9
pub const __int_c_join = @compileError("unable to translate C expr: unexpected token '##'"); // C:\Users\Acer\zig\lib\include/stdint.h:324:9
pub const __uint_c = @compileError("unable to translate macro: undefined identifier `U`"); // C:\Users\Acer\zig\lib\include/stdint.h:326:9
pub const __INTN_MIN = @compileError("unable to translate macro: undefined identifier `INT`"); // C:\Users\Acer\zig\lib\include/stdint.h:894:10
pub const __INTN_MAX = @compileError("unable to translate macro: undefined identifier `INT`"); // C:\Users\Acer\zig\lib\include/stdint.h:895:10
pub const __UINTN_MAX = @compileError("unable to translate macro: undefined identifier `UINT`"); // C:\Users\Acer\zig\lib\include/stdint.h:896:9
pub const __INTN_C = @compileError("unable to translate macro: undefined identifier `INT`"); // C:\Users\Acer\zig\lib\include/stdint.h:897:10
pub const __UINTN_C = @compileError("unable to translate macro: undefined identifier `UINT`"); // C:\Users\Acer\zig\lib\include/stdint.h:898:9
pub const offsetof = @compileError("unable to translate macro: undefined identifier `__builtin_offsetof`"); // C:\Users\Acer\zig\lib\include/stddef.h:111:9
pub const ABSOLUTE_TIME_INITIALIZED_VAR = @compileError("unable to translate C expr: unexpected token '='"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\common\pico_base\include/pico/types.h:83:9
pub const __EXP = @compileError("unable to translate macro: undefined identifier `__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/machine/_default_types.h:15:9
pub const __DOTS = @compileError("unable to translate C expr: unexpected token ','"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:50:9
pub const __ASMNAME = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:54:10
pub const __long_double_t = @compileError("unable to translate: TODO long double"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:58:9
pub const __attribute_format_strfmon__ = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:62:9
pub const __flexarr = @compileError("unable to translate C expr: unexpected token '['"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:63:9
pub const __compiler_membar = @compileError("unable to translate macro: undefined identifier `__asm`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:140:9
pub const __CONCAT1 = @compileError("unable to translate C expr: unexpected token '##'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:178:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token '#'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:180:9
pub const __const = @compileError("unable to translate C expr: unexpected token 'const'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:183:9
pub const __volatile = @compileError("unable to translate C expr: unexpected token 'volatile'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:185:9
pub const __weak_symbol = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:230:9
pub const __dead2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:243:9
pub const __pure2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:244:9
pub const __unused = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:245:9
pub const __used = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:246:9
pub const __packed = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:247:9
pub const __aligned = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:248:9
pub const __section = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:249:9
pub const __alloc_size = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:252:9
pub const __alloc_size2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:253:9
pub const __alloc_align = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:259:9
pub const __generic = @compileError("unable to translate C expr: unexpected token '_Generic'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:348:9
pub const __min_size = @compileError("unable to translate C expr: unexpected token 'static'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:366:9
pub const __malloc_like = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:372:9
pub const __pure = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:373:9
pub const __always_inline = @compileError("unable to translate macro: undefined identifier `__inline__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:380:9
pub const __noinline = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:386:9
pub const __nonnull = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:392:9
pub const __nonnull_all = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:393:9
pub const __fastcall = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:400:9
pub const __result_use_check = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:401:9
pub const __returns_twice = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:408:9
pub const __restrict = @compileError("unable to translate C expr: unexpected token 'restrict'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:434:9
pub const __null_sentinel = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:475:9
pub const __exported = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:476:9
pub const __hidden = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:479:9
pub const __containerof = @compileError("unable to translate macro: undefined identifier `__typeof`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:500:9
pub const __printflike = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:522:9
pub const __scanflike = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:524:9
pub const __format_arg = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:526:9
pub const __strfmonlike = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:527:9
pub const __strftimelike = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:529:9
pub const __printf0like = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:539:9
pub const __strong_reference = @compileError("unable to translate macro: undefined identifier `__typeof`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:544:9
pub const __weak_reference = @compileError("unable to translate macro: undefined identifier `__asm__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:549:9
pub const __warn_references = @compileError("unable to translate macro: undefined identifier `__asm__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:552:9
pub const __sym_compat = @compileError("unable to translate macro: undefined identifier `__asm__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:556:9
pub const __sym_default = @compileError("unable to translate macro: undefined identifier `__asm__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:558:9
pub const __FBSDID = @compileError("unable to translate macro: undefined identifier `__hack`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:593:9
pub const __RCSID = @compileError("unable to translate macro: undefined identifier `__hack`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:597:9
pub const __RCSID_SOURCE = @compileError("unable to translate macro: undefined identifier `__hack`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:601:9
pub const __SCCSID = @compileError("unable to translate macro: undefined identifier `__hack`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:605:9
pub const __COPYRIGHT = @compileError("unable to translate macro: undefined identifier `__hack`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:609:9
pub const __DECONST = @compileError("unable to translate C expr: unexpected token 'const'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:613:9
pub const __DEVOLATILE = @compileError("unable to translate C expr: unexpected token 'volatile'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:617:9
pub const __DEQUALIFY = @compileError("unable to translate C expr: unexpected token 'const'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:621:9
pub const __NULLABILITY_PRAGMA_PUSH = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:634:9
pub const __NULLABILITY_PRAGMA_POP = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:636:9
pub const __arg_type_tag = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:648:9
pub const __datatype_type_tag = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:650:9
pub const __lock_annotate = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:670:9
pub const __lockable = @compileError("unable to translate macro: undefined identifier `lockable`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:678:9
pub const __locks_exclusive = @compileError("unable to translate C expr: expected ')' instead got '...'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:681:9
pub const __locks_shared = @compileError("unable to translate C expr: expected ')' instead got '...'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:683:9
pub const __trylocks_exclusive = @compileError("unable to translate C expr: expected ')' instead got '...'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:687:9
pub const __trylocks_shared = @compileError("unable to translate C expr: expected ')' instead got '...'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:689:9
pub const __unlocks = @compileError("unable to translate C expr: expected ')' instead got '...'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:693:9
pub const __asserts_exclusive = @compileError("unable to translate C expr: expected ')' instead got '...'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:696:9
pub const __asserts_shared = @compileError("unable to translate C expr: expected ')' instead got '...'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:698:9
pub const __requires_exclusive = @compileError("unable to translate C expr: expected ')' instead got '...'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:702:9
pub const __requires_shared = @compileError("unable to translate C expr: expected ')' instead got '...'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:704:9
pub const __requires_unlocked = @compileError("unable to translate C expr: expected ')' instead got '...'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:706:9
pub const __no_lock_analysis = @compileError("unable to translate macro: undefined identifier `no_thread_safety_analysis`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:710:9
pub const __nosanitizeaddress = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:718:9
pub const __nosanitizethread = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:719:9
pub const __guarded_by = @compileError("unable to translate macro: undefined identifier `guarded_by`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:726:9
pub const __pt_guarded_by = @compileError("unable to translate macro: undefined identifier `pt_guarded_by`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/cdefs.h:727:9
pub const GCC_Like_Pragma = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:126:9
pub const Clang_Pragma = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:133:9
pub const GCC_Pragma = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:142:9
pub const __after_data = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:170:9
pub const __not_in_flash = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:184:9
pub const __scratch_x = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:201:9
pub const __scratch_y = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:218:9
pub const __uninitialized_ram = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:235:9
pub const __in_flash = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:249:9
pub const __not_in_flash_func = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:265:9
pub const count_of = @compileError("unable to translate C expr: unexpected token '('"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:321:9
pub const pico_default_asm = @compileError("unable to translate C expr: expected ')' instead got '...'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:338:9
pub const pico_default_asm_volatile = @compileError("unable to translate C expr: expected ')' instead got '...'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:339:9
pub const panic_compact = @compileError("unable to translate C expr: expected ')' instead got '...'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:396:9
pub const __fast_mul = @compileError("unable to translate macro: undefined identifier `__builtin_choose_expr`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:464:9
pub const __check_type_compatible = @compileError("unable to translate macro: undefined identifier `__builtin_types_compatible_p`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:474:9
pub const WRAPPER_FUNC = @compileError("unable to translate macro: undefined identifier `__wrap_`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:487:9
pub const REAL_FUNC = @compileError("unable to translate macro: undefined identifier `__real_`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\pico_platform\include/pico/platform.h:488:9
pub const _REG_ = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\hardware_base\include/hardware/address_mapped.h:81:9
pub const hw_set_alias = @compileError("unable to translate macro: undefined identifier `typeof`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\hardware_base\include/hardware/address_mapped.h:108:9
pub const hw_clear_alias = @compileError("unable to translate macro: undefined identifier `typeof`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\hardware_base\include/hardware/address_mapped.h:109:9
pub const hw_xor_alias = @compileError("unable to translate macro: undefined identifier `typeof`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\hardware_base\include/hardware/address_mapped.h:110:9
pub const xip_noalloc_alias = @compileError("unable to translate macro: undefined identifier `typeof`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\hardware_base\include/hardware/address_mapped.h:111:9
pub const xip_nocache_alias = @compileError("unable to translate macro: undefined identifier `typeof`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\hardware_base\include/hardware/address_mapped.h:112:9
pub const xip_nocache_noalloc_alias = @compileError("unable to translate macro: undefined identifier `typeof`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\hardware_base\include/hardware/address_mapped.h:113:9
pub const isr_timer_0 = @compileError("unable to translate macro: undefined identifier `isr_irq0`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:36:9
pub const isr_timer_1 = @compileError("unable to translate macro: undefined identifier `isr_irq1`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:37:9
pub const isr_timer_2 = @compileError("unable to translate macro: undefined identifier `isr_irq2`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:38:9
pub const isr_timer_3 = @compileError("unable to translate macro: undefined identifier `isr_irq3`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:39:9
pub const isr_pwm_wrap = @compileError("unable to translate macro: undefined identifier `isr_irq4`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:40:9
pub const isr_usbctrl = @compileError("unable to translate macro: undefined identifier `isr_irq5`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:41:9
pub const isr_xip = @compileError("unable to translate macro: undefined identifier `isr_irq6`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:42:9
pub const isr_pio0_0 = @compileError("unable to translate macro: undefined identifier `isr_irq7`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:43:9
pub const isr_pio0_1 = @compileError("unable to translate macro: undefined identifier `isr_irq8`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:44:9
pub const isr_pio1_0 = @compileError("unable to translate macro: undefined identifier `isr_irq9`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:45:9
pub const isr_pio1_1 = @compileError("unable to translate macro: undefined identifier `isr_irq10`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:46:9
pub const isr_dma_0 = @compileError("unable to translate macro: undefined identifier `isr_irq11`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:47:9
pub const isr_dma_1 = @compileError("unable to translate macro: undefined identifier `isr_irq12`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:48:9
pub const isr_io_bank0 = @compileError("unable to translate macro: undefined identifier `isr_irq13`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:49:9
pub const isr_io_qspi = @compileError("unable to translate macro: undefined identifier `isr_irq14`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:50:9
pub const isr_sio_proc0 = @compileError("unable to translate macro: undefined identifier `isr_irq15`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:51:9
pub const isr_sio_proc1 = @compileError("unable to translate macro: undefined identifier `isr_irq16`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:52:9
pub const isr_clocks = @compileError("unable to translate macro: undefined identifier `isr_irq17`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:53:9
pub const isr_spi0 = @compileError("unable to translate macro: undefined identifier `isr_irq18`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:54:9
pub const isr_spi1 = @compileError("unable to translate macro: undefined identifier `isr_irq19`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:55:9
pub const isr_uart0 = @compileError("unable to translate macro: undefined identifier `isr_irq20`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:56:9
pub const isr_uart1 = @compileError("unable to translate macro: undefined identifier `isr_irq21`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:57:9
pub const isr_adc_fifo = @compileError("unable to translate macro: undefined identifier `isr_irq22`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:58:9
pub const isr_i2c0 = @compileError("unable to translate macro: undefined identifier `isr_irq23`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:59:9
pub const isr_i2c1 = @compileError("unable to translate macro: undefined identifier `isr_irq24`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:60:9
pub const isr_rtc = @compileError("unable to translate macro: undefined identifier `isr_irq25`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2040\hardware_regs\include/hardware/regs/intctrl.h:61:9
pub const CU_REGISTER_DEBUG_PINS = @compileError("unable to translate C expr: expected ')' instead got '...'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\hardware_gpio\include/hardware/gpio.h:877:9
pub const CU_SELECT_DEBUG_PINS = @compileError("unable to translate macro: undefined identifier `DEBUG_PIN_TYPE`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\hardware_gpio\include/hardware/gpio.h:878:9
pub const DEBUG_PINS_ENABLED = @compileError("unable to translate macro: undefined identifier `__selected_debug_pins`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\hardware_gpio\include/hardware/gpio.h:879:9
pub const DEBUG_PINS_SET = @compileError("unable to translate C expr: unexpected token 'if'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\hardware_gpio\include/hardware/gpio.h:890:9
pub const DEBUG_PINS_CLR = @compileError("unable to translate C expr: unexpected token 'if'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\hardware_gpio\include/hardware/gpio.h:891:9
pub const DEBUG_PINS_XOR = @compileError("unable to translate C expr: unexpected token 'if'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\hardware_gpio\include/hardware/gpio.h:892:9
pub const PICO_DEFAULT_UART_INSTANCE = @compileError("unable to translate macro: undefined identifier `uart`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\rp2_common\hardware_uart\include/hardware/uart.h:87:9
pub const __LOCK_INIT = @compileError("unable to translate macro: undefined identifier `__lock_`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/lock.h:37:9
pub const _ATEXIT_INIT = @compileError("unable to translate C expr: unexpected token '{'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/reent.h:105:10
pub const _REENT_INIT_ATEXIT = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/reent.h:111:10
pub const _REENT_SMALL_CHECK_INIT = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/reent.h:183:10
pub const _REENT_INIT = @compileError("unable to translate C expr: unexpected token '{'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/reent.h:703:9
pub const _REENT_INIT_PTR_ZEROED = @compileError("unable to translate C expr: unexpected token '{'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/reent.h:751:9
pub const _REENT_CHECK_RAND48 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/reent.h:765:9
pub const _REENT_CHECK_MP = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/reent.h:766:9
pub const _REENT_CHECK_TM = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/reent.h:767:9
pub const _REENT_CHECK_ASCTIME_BUF = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/reent.h:768:9
pub const _REENT_CHECK_EMERGENCY = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/reent.h:769:9
pub const _REENT_CHECK_MISC = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/reent.h:770:9
pub const _REENT_CHECK_SIGNAL_BUF = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/reent.h:771:9
pub const _REENT_INIT_PTR = @compileError("unable to translate macro: undefined identifier `memset`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/reent.h:800:9
pub const TIMEVAL_TO_TIMESPEC = @compileError("unable to translate C expr: unexpected token 'do'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/timespec.h:41:9
pub const TIMESPEC_TO_TIMEVAL = @compileError("unable to translate C expr: unexpected token 'do'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/timespec.h:46:9
pub const fds_bits = @compileError("unable to translate macro: undefined identifier `__fds_bits`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/select.h:52:9
pub const FD_CLR = @compileError("unable to translate C expr: expected ')' instead got '&='"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/select.h:56:9
pub const FD_COPY = @compileError("unable to translate C expr: expected ')' instead got '='"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/select.h:58:9
pub const FD_SET = @compileError("unable to translate C expr: expected ')' instead got '|='"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/select.h:61:9
pub const FD_ZERO = @compileError("unable to translate macro: undefined identifier `_p`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/select.h:62:9
pub const physadr = @compileError("unable to translate macro: undefined identifier `physadr_t`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/types.h:51:11
pub const quad = @compileError("unable to translate macro: undefined identifier `quad_t`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/types.h:52:11
pub const _PTHREAD_ONCE_INIT = @compileError("unable to translate C expr: unexpected token '{'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/sys/_pthreadtypes.h:197:9
pub const fropen = @compileError("unable to translate C expr: expected ')' instead got '('"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/stdio.h:617:10
pub const fwopen = @compileError("unable to translate C expr: expected ')' instead got '('"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/stdio.h:619:10
pub const __sgetc_raw_r = @compileError("TODO unary inc/dec expr"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/stdio.h:654:15
pub const __sclearerr = @compileError("unable to translate C expr: expected ')' instead got '&='"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/stdio.h:721:9
pub const fast_putc = @compileError("TODO unary inc/dec expr"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\gcc-arm-none-eabi\arm-none-eabi\include/stdio.h:774:9
pub const __bi_decl = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\common\pico_binary_info\include/pico/binary_info/code.h:47:9
pub const bi_decl_with_attr = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\common\pico_binary_info\include/pico/binary_info/code.h:48:9
pub const bi_decl = @compileError("unable to translate C expr: unexpected token 'Eof'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\common\pico_binary_info\include/pico/binary_info/code.h:49:9
pub const bi_decl_if_func_used_with_attr = @compileError("unable to translate C expr: unexpected token ';'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\common\pico_binary_info\include/pico/binary_info/code.h:50:9
pub const bi_decl_if_func_used = @compileError("unable to translate C expr: unexpected token ';'"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\common\pico_binary_info\include/pico/binary_info/code.h:51:9
pub const bi_int = @compileError("unable to translate macro: undefined identifier `__bi_lineno_var_name`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\common\pico_binary_info\include/pico/binary_info/code.h:54:9
pub const bi_string = @compileError("unable to translate macro: undefined identifier `__bi_lineno_var_name`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\common\pico_binary_info\include/pico/binary_info/code.h:64:9
pub const bi_block_device = @compileError("unable to translate macro: undefined identifier `__bi_lineno_var_name`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\common\pico_binary_info\include/pico/binary_info/code.h:74:9
pub const __bi_encoded_pins_with_func = @compileError("unable to translate macro: undefined identifier `__bi_lineno_var_name`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\common\pico_binary_info\include/pico/binary_info/code.h:87:9
pub const __bi_pins_with_name = @compileError("unable to translate macro: undefined identifier `__bi_lineno_var_name`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\common\pico_binary_info\include/pico/binary_info/code.h:96:9
pub const __bi_named_group = @compileError("unable to translate macro: undefined identifier `__bi_lineno_var_name`"); // C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk\src\common\pico_binary_info\include/pico/binary_info/code.h:106:9
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 16);
pub const __clang_minor__ = @as(c_int, 0);
pub const __clang_patchlevel__ = @as(c_int, 6);
pub const __clang_version__ = "16.0.6 (https://github.com/ziglang/zig-bootstrap 1dda86241204c4649f668d46b6a37feed707c7b4)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 16.0.6 (https://github.com/ziglang/zig-bootstrap 1dda86241204c4649f668d46b6a37feed707c7b4)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _ILP32 = @as(c_int, 1);
pub const __ILP32__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 32);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @as(c_int, 128);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @as(c_long, 2147483647);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 32);
pub const __UINTMAX_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 32);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 32);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 32);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 4);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 4);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 4);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 4);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __INTMAX_TYPE__ = c_longlong;
pub const __INTMAX_FMTd__ = "lld";
pub const __INTMAX_FMTi__ = "lli";
pub const __UINTMAX_TYPE__ = c_ulonglong;
pub const __UINTMAX_FMTo__ = "llo";
pub const __UINTMAX_FMTu__ = "llu";
pub const __UINTMAX_FMTx__ = "llx";
pub const __UINTMAX_FMTX__ = "llX";
pub const __PTRDIFF_TYPE__ = c_int;
pub const __PTRDIFF_FMTd__ = "d";
pub const __PTRDIFF_FMTi__ = "i";
pub const __INTPTR_TYPE__ = c_int;
pub const __INTPTR_FMTd__ = "d";
pub const __INTPTR_FMTi__ = "i";
pub const __SIZE_TYPE__ = c_uint;
pub const __SIZE_FMTo__ = "o";
pub const __SIZE_FMTu__ = "u";
pub const __SIZE_FMTx__ = "x";
pub const __SIZE_FMTX__ = "X";
pub const __WCHAR_TYPE__ = c_uint;
pub const __WINT_TYPE__ = c_int;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_uint;
pub const __UINTPTR_FMTo__ = "o";
pub const __UINTPTR_FMTu__ = "u";
pub const __UINTPTR_FMTx__ = "x";
pub const __UINTPTR_FMTX__ = "X";
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 4.9406564584124654e-324);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 15);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 2.2204460492503131e-16);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 53);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __LDBL_MAX_EXP__ = @as(c_int, 1024);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.7976931348623157e+308);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __LDBL_MIN__ = @as(c_longdouble, 2.2250738585072014e-308);
pub const __POINTER_WIDTH__ = @as(c_int, 32);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 8);
pub const __CHAR_UNSIGNED__ = @as(c_int, 1);
pub const __WCHAR_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 1);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = @as(c_int, 2);
pub const __ARMEL__ = @as(c_int, 1);
pub const __arm = @as(c_int, 1);
pub const __arm__ = @as(c_int, 1);
pub const __ELF__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __ARM_ARCH_6M__ = @as(c_int, 1);
pub const __ARM_ARCH = @as(c_int, 6);
pub const __ARM_ARCH_ISA_THUMB = @as(c_int, 1);
pub const __ARM_32BIT_STATE = @as(c_int, 1);
pub const __ARM_ARCH_PROFILE = 'M';
pub const __ARM_ACLE = @as(c_int, 200);
pub const __ARM_FP16_FORMAT_IEEE = @as(c_int, 1);
pub const __ARM_FP16_ARGS = @as(c_int, 1);
pub const __THUMB_INTERWORK__ = @as(c_int, 1);
pub const __ARM_EABI__ = @as(c_int, 1);
pub const __ARM_PCS = @as(c_int, 1);
pub const __SOFTFP__ = @as(c_int, 1);
pub const __THUMBEL__ = @as(c_int, 1);
pub const __thumb__ = @as(c_int, 1);
pub const __APCS_32__ = @as(c_int, 1);
pub const __VFP_FP__ = @as(c_int, 1);
pub const __ARM_SIZEOF_WCHAR_T = @as(c_int, 4);
pub const __ARM_SIZEOF_MINIMAL_ENUM = @as(c_int, 4);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 0);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const _DEBUG = @as(c_int, 1);
pub const LIB_PICO_STDIO_USB = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const _PICO_STDLIB_H = "";
pub const _PICO_H = "";
pub inline fn __PICO_XSTRING(x: anytype) @TypeOf(__PICO_STRING(x)) {
    return __PICO_STRING(x);
}
pub const _PICO_TYPES_H = "";
pub const _PICO_ASSERT_H = "";
pub const __STDBOOL_H = "";
pub const __bool_true_false_are_defined = @as(c_int, 1);
pub const @"bool" = bool;
pub const @"true" = @as(c_int, 1);
pub const @"false" = @as(c_int, 0);
pub const _ANSIDECL_H_ = "";
pub const __NEWLIB_H__ = @as(c_int, 1);
pub const _NEWLIB_VERSION_H__ = @as(c_int, 1);
pub const _NEWLIB_VERSION = "4.1.0";
pub const __NEWLIB__ = @as(c_int, 4);
pub const __NEWLIB_MINOR__ = @as(c_int, 1);
pub const __NEWLIB_PATCHLEVEL__ = @as(c_int, 0);
pub const _WANT_IO_C99_FORMATS = @as(c_int, 1);
pub const _WANT_IO_LONG_LONG = @as(c_int, 1);
pub const _WANT_REGISTER_FINI = @as(c_int, 1);
pub const _REENT_CHECK_VERIFY = @as(c_int, 1);
pub const _MB_LEN_MAX = @as(c_int, 1);
pub const HAVE_INITFINI_ARRAY = @as(c_int, 1);
pub const _ATEXIT_DYNAMIC_ALLOC = @as(c_int, 1);
pub const _HAVE_LONG_DOUBLE = @as(c_int, 1);
pub const _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL = @as(c_int, 1);
pub const _LDBL_EQ_DBL = @as(c_int, 1);
pub const _FVWRITE_IN_STREAMIO = @as(c_int, 1);
pub const _FSEEK_OPTIMIZATION = @as(c_int, 1);
pub const _WIDE_ORIENT = @as(c_int, 1);
pub const _UNBUF_STREAM_OPT = @as(c_int, 1);
pub const _RETARGETABLE_LOCKING = @as(c_int, 1);
pub const __SYS_CONFIG_H__ = "";
pub const __IEEE_LITTLE_ENDIAN = "";
pub const __OBSOLETE_MATH_DEFAULT = @as(c_int, 1);
pub const __OBSOLETE_MATH = __OBSOLETE_MATH_DEFAULT;
pub const _SYS_FEATURES_H = "";
pub inline fn __GNUC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    return ((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub inline fn __GNUC_PREREQ__(ma: anytype, mi: anytype) @TypeOf(__GNUC_PREREQ(ma, mi)) {
    return __GNUC_PREREQ(ma, mi);
}
pub const _DEFAULT_SOURCE = @as(c_int, 1);
pub const _POSIX_SOURCE = @as(c_int, 1);
pub const _POSIX_C_SOURCE = @as(c_long, 200809);
pub const _ATFILE_SOURCE = @as(c_int, 1);
pub const __ATFILE_VISIBLE = @as(c_int, 1);
pub const __BSD_VISIBLE = @as(c_int, 1);
pub const __GNU_VISIBLE = @as(c_int, 0);
pub const __ISO_C_VISIBLE = @as(c_int, 2011);
pub const __LARGEFILE_VISIBLE = @as(c_int, 0);
pub const __MISC_VISIBLE = @as(c_int, 1);
pub const __POSIX_VISIBLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 200809, .decimal);
pub const __SVID_VISIBLE = @as(c_int, 1);
pub const __XSI_VISIBLE = @as(c_int, 0);
pub const __SSP_FORTIFY_LEVEL = @as(c_int, 0);
pub const _POINTER_INT = c_long;
pub const __RAND_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hexadecimal);
pub const __EXPORT = "";
pub const __IMPORT = "";
pub const _READ_WRITE_RETURN_TYPE = c_int;
pub const _READ_WRITE_BUFSIZE_TYPE = c_int;
pub const _BEGIN_STD_C = "";
pub const _END_STD_C = "";
pub const _NOTHROW = "";
pub const PARAM_ASSERTIONS_ENABLE_ALL = @as(c_int, 0);
pub const PARAM_ASSERTIONS_DISABLE_ALL = @as(c_int, 0);
pub const hard_assert = assert;
pub const __CLANG_STDINT_H = "";
pub const __int_least64_t = i64;
pub const __uint_least64_t = u64;
pub const __int_least32_t = i64;
pub const __uint_least32_t = u64;
pub const __int_least16_t = i64;
pub const __uint_least16_t = u64;
pub const __int_least8_t = i64;
pub const __uint_least8_t = u64;
pub const __uint32_t_defined = "";
pub const __int8_t_defined = "";
pub const __intptr_t_defined = "";
pub const _INTPTR_T = "";
pub const _UINTPTR_T = "";
pub inline fn __int_c(v: anytype, suffix: anytype) @TypeOf(__int_c_join(v, suffix)) {
    return __int_c_join(v, suffix);
}
pub const __int64_c_suffix = __INT64_C_SUFFIX__;
pub const __int32_c_suffix = __INT64_C_SUFFIX__;
pub const __int16_c_suffix = __INT64_C_SUFFIX__;
pub const __int8_c_suffix = __INT64_C_SUFFIX__;
pub inline fn INT64_C(v: anytype) @TypeOf(__int_c(v, __int64_c_suffix)) {
    return __int_c(v, __int64_c_suffix);
}
pub inline fn UINT64_C(v: anytype) @TypeOf(__uint_c(v, __int64_c_suffix)) {
    return __uint_c(v, __int64_c_suffix);
}
pub inline fn INT32_C(v: anytype) @TypeOf(__int_c(v, __int32_c_suffix)) {
    return __int_c(v, __int32_c_suffix);
}
pub inline fn UINT32_C(v: anytype) @TypeOf(__uint_c(v, __int32_c_suffix)) {
    return __uint_c(v, __int32_c_suffix);
}
pub inline fn INT16_C(v: anytype) @TypeOf(__int_c(v, __int16_c_suffix)) {
    return __int_c(v, __int16_c_suffix);
}
pub inline fn UINT16_C(v: anytype) @TypeOf(__uint_c(v, __int16_c_suffix)) {
    return __uint_c(v, __int16_c_suffix);
}
pub inline fn INT8_C(v: anytype) @TypeOf(__int_c(v, __int8_c_suffix)) {
    return __int_c(v, __int8_c_suffix);
}
pub inline fn UINT8_C(v: anytype) @TypeOf(__uint_c(v, __int8_c_suffix)) {
    return __uint_c(v, __int8_c_suffix);
}
pub const INT64_MAX = INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const INT64_MIN = -INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const UINT64_MAX = UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const __INT_LEAST64_MIN = INT64_MIN;
pub const __INT_LEAST64_MAX = INT64_MAX;
pub const __UINT_LEAST64_MAX = UINT64_MAX;
pub const __INT_LEAST32_MIN = INT64_MIN;
pub const __INT_LEAST32_MAX = INT64_MAX;
pub const __UINT_LEAST32_MAX = UINT64_MAX;
pub const __INT_LEAST16_MIN = INT64_MIN;
pub const __INT_LEAST16_MAX = INT64_MAX;
pub const __UINT_LEAST16_MAX = UINT64_MAX;
pub const __INT_LEAST8_MIN = INT64_MIN;
pub const __INT_LEAST8_MAX = INT64_MAX;
pub const __UINT_LEAST8_MAX = UINT64_MAX;
pub const INT_LEAST64_MIN = __INT_LEAST64_MIN;
pub const INT_LEAST64_MAX = __INT_LEAST64_MAX;
pub const UINT_LEAST64_MAX = __UINT_LEAST64_MAX;
pub const INT_FAST64_MIN = __INT_LEAST64_MIN;
pub const INT_FAST64_MAX = __INT_LEAST64_MAX;
pub const UINT_FAST64_MAX = __UINT_LEAST64_MAX;
pub const INT32_MAX = INT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal));
pub const INT32_MIN = -INT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal)) - @as(c_int, 1);
pub const UINT32_MAX = UINT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 4294967295, .decimal));
pub const INT_LEAST32_MIN = __INT_LEAST32_MIN;
pub const INT_LEAST32_MAX = __INT_LEAST32_MAX;
pub const UINT_LEAST32_MAX = __UINT_LEAST32_MAX;
pub const INT_FAST32_MIN = __INT_LEAST32_MIN;
pub const INT_FAST32_MAX = __INT_LEAST32_MAX;
pub const UINT_FAST32_MAX = __UINT_LEAST32_MAX;
pub const INT16_MAX = INT16_C(@as(c_int, 32767));
pub const INT16_MIN = -INT16_C(@as(c_int, 32767)) - @as(c_int, 1);
pub const UINT16_MAX = UINT16_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal));
pub const INT_LEAST16_MIN = __INT_LEAST16_MIN;
pub const INT_LEAST16_MAX = __INT_LEAST16_MAX;
pub const UINT_LEAST16_MAX = __UINT_LEAST16_MAX;
pub const INT_FAST16_MIN = __INT_LEAST16_MIN;
pub const INT_FAST16_MAX = __INT_LEAST16_MAX;
pub const UINT_FAST16_MAX = __UINT_LEAST16_MAX;
pub const INT8_MAX = INT8_C(@as(c_int, 127));
pub const INT8_MIN = -INT8_C(@as(c_int, 127)) - @as(c_int, 1);
pub const UINT8_MAX = UINT8_C(@as(c_int, 255));
pub const INT_LEAST8_MIN = __INT_LEAST8_MIN;
pub const INT_LEAST8_MAX = __INT_LEAST8_MAX;
pub const UINT_LEAST8_MAX = __UINT_LEAST8_MAX;
pub const INT_FAST8_MIN = __INT_LEAST8_MIN;
pub const INT_FAST8_MAX = __INT_LEAST8_MAX;
pub const UINT_FAST8_MAX = __UINT_LEAST8_MAX;
pub const INTPTR_MIN = -__INTPTR_MAX__ - @as(c_int, 1);
pub const INTPTR_MAX = __INTPTR_MAX__;
pub const UINTPTR_MAX = __UINTPTR_MAX__;
pub const PTRDIFF_MIN = -__PTRDIFF_MAX__ - @as(c_int, 1);
pub const PTRDIFF_MAX = __PTRDIFF_MAX__;
pub const SIZE_MAX = __SIZE_MAX__;
pub const INTMAX_MIN = -__INTMAX_MAX__ - @as(c_int, 1);
pub const INTMAX_MAX = __INTMAX_MAX__;
pub const UINTMAX_MAX = __UINTMAX_MAX__;
pub const SIG_ATOMIC_MIN = __INTN_MIN(__SIG_ATOMIC_WIDTH__);
pub const SIG_ATOMIC_MAX = __INTN_MAX(__SIG_ATOMIC_WIDTH__);
pub const WINT_MIN = __INTN_MIN(__WINT_WIDTH__);
pub const WINT_MAX = __INTN_MAX(__WINT_WIDTH__);
pub const WCHAR_MAX = __WCHAR_MAX__;
pub const WCHAR_MIN = __UINTN_C(__WCHAR_WIDTH__, @as(c_int, 0));
pub inline fn INTMAX_C(v: anytype) @TypeOf(__int_c(v, __INTMAX_C_SUFFIX__)) {
    return __int_c(v, __INTMAX_C_SUFFIX__);
}
pub inline fn UINTMAX_C(v: anytype) @TypeOf(__int_c(v, __UINTMAX_C_SUFFIX__)) {
    return __int_c(v, __UINTMAX_C_SUFFIX__);
}
pub const __STDDEF_H = "";
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_wchar_t = "";
pub const __need_NULL = "";
pub const __need_STDDEF_H_misc = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const _WCHAR_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub inline fn bool_to_bit(x: anytype) uint {
    return @import("std").zig.c_translation.cast(uint, !!(x != 0));
}
pub const _PICO_CONFIG_H = "";
pub const _BOARDS_PICO_H = "";
pub const RASPBERRYPI_PICO = "";
pub const PICO_DEFAULT_UART = @as(c_int, 0);
pub const PICO_DEFAULT_UART_TX_PIN = @as(c_int, 0);
pub const PICO_DEFAULT_UART_RX_PIN = @as(c_int, 1);
pub const PICO_DEFAULT_LED_PIN = @as(c_int, 25);
pub const PICO_DEFAULT_I2C = @as(c_int, 0);
pub const PICO_DEFAULT_I2C_SDA_PIN = @as(c_int, 4);
pub const PICO_DEFAULT_I2C_SCL_PIN = @as(c_int, 5);
pub const PICO_DEFAULT_SPI = @as(c_int, 0);
pub const PICO_DEFAULT_SPI_SCK_PIN = @as(c_int, 18);
pub const PICO_DEFAULT_SPI_TX_PIN = @as(c_int, 19);
pub const PICO_DEFAULT_SPI_RX_PIN = @as(c_int, 16);
pub const PICO_DEFAULT_SPI_CSN_PIN = @as(c_int, 17);
pub const PICO_BOOT_STAGE2_CHOOSE_W25Q080 = @as(c_int, 1);
pub const PICO_FLASH_SPI_CLKDIV = @as(c_int, 2);
pub const PICO_FLASH_SIZE_BYTES = (@as(c_int, 2) * @as(c_int, 1024)) * @as(c_int, 1024);
pub const PICO_SMPS_MODE_PIN = @as(c_int, 23);
pub const PICO_RP2040_B0_SUPPORTED = @as(c_int, 1);
pub const PICO_VBUS_PIN = @as(c_int, 24);
pub const PICO_VSYS_PIN = @as(c_int, 29);
pub const _CMSIS_RENAME_EXCEPTIONS_H = "";
pub const _PICO_PLATFORM_H = "";
pub const _HARDWARE_PLATFORM_DEFS_H = "";
pub const _u = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const NUM_CORES = _u(@as(c_int, 2));
pub const NUM_DMA_CHANNELS = _u(@as(c_int, 12));
pub const NUM_DMA_TIMERS = _u(@as(c_int, 4));
pub const NUM_IRQS = _u(@as(c_int, 32));
pub const NUM_USER_IRQS = _u(@as(c_int, 6));
pub const NUM_PIOS = _u(@as(c_int, 2));
pub const NUM_PIO_STATE_MACHINES = _u(@as(c_int, 4));
pub const NUM_PWM_SLICES = _u(@as(c_int, 8));
pub const NUM_SPIN_LOCKS = _u(@as(c_int, 32));
pub const NUM_UARTS = _u(@as(c_int, 2));
pub const NUM_I2CS = _u(@as(c_int, 2));
pub const NUM_SPIS = _u(@as(c_int, 2));
pub const NUM_TIMERS = _u(@as(c_int, 4));
pub const NUM_ADC_CHANNELS = _u(@as(c_int, 5));
pub const NUM_BANK0_GPIOS = _u(@as(c_int, 30));
pub const NUM_QSPI_GPIOS = _u(@as(c_int, 6));
pub const PIO_INSTRUCTION_COUNT = _u(@as(c_int, 32));
pub const XOSC_KHZ = _u(@as(c_int, 12000));
pub const SYS_CLK_KHZ = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 125000, .decimal));
pub const USB_CLK_KHZ = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 48000, .decimal));
pub const XOSC_MHZ = @import("std").zig.c_translation.MacroArithmetic.div(XOSC_KHZ, @as(c_int, 1000));
pub const SYS_CLK_MHZ = @import("std").zig.c_translation.MacroArithmetic.div(SYS_CLK_KHZ, @as(c_int, 1000));
pub const USB_CLK_MHZ = @import("std").zig.c_translation.MacroArithmetic.div(USB_CLK_KHZ, @as(c_int, 1000));
pub const FIRST_USER_IRQ = NUM_IRQS - NUM_USER_IRQS;
pub const VTABLE_FIRST_IRQ = @as(c_int, 16);
pub const _ADDRESSMAP_H_ = "";
pub const REG_ALIAS_RW_BITS = @as(c_uint, 0x0) << @as(c_uint, 12);
pub const REG_ALIAS_XOR_BITS = @as(c_uint, 0x1) << @as(c_uint, 12);
pub const REG_ALIAS_SET_BITS = @as(c_uint, 0x2) << @as(c_uint, 12);
pub const REG_ALIAS_CLR_BITS = @as(c_uint, 0x3) << @as(c_uint, 12);
pub const ROM_BASE = _u(@as(c_int, 0x00000000));
pub const XIP_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const XIP_MAIN_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const XIP_NOALLOC_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x11000000, .hexadecimal));
pub const XIP_NOCACHE_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x12000000, .hexadecimal));
pub const XIP_NOCACHE_NOALLOC_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x13000000, .hexadecimal));
pub const XIP_CTRL_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x14000000, .hexadecimal));
pub const XIP_SRAM_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x15000000, .hexadecimal));
pub const XIP_SRAM_END = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x15004000, .hexadecimal));
pub const XIP_SSI_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x18000000, .hexadecimal));
pub const SRAM_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const SRAM_STRIPED_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const SRAM_STRIPED_END = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20040000, .hexadecimal));
pub const SRAM4_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20040000, .hexadecimal));
pub const SRAM5_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20041000, .hexadecimal));
pub const SRAM_END = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20042000, .hexadecimal));
pub const SRAM0_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x21000000, .hexadecimal));
pub const SRAM1_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x21010000, .hexadecimal));
pub const SRAM2_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x21020000, .hexadecimal));
pub const SRAM3_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x21030000, .hexadecimal));
pub const SYSINFO_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const SYSCFG_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40004000, .hexadecimal));
pub const CLOCKS_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40008000, .hexadecimal));
pub const RESETS_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x4000c000, .hexadecimal));
pub const PSM_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40010000, .hexadecimal));
pub const IO_BANK0_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40014000, .hexadecimal));
pub const IO_QSPI_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40018000, .hexadecimal));
pub const PADS_BANK0_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x4001c000, .hexadecimal));
pub const PADS_QSPI_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40020000, .hexadecimal));
pub const XOSC_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40024000, .hexadecimal));
pub const PLL_SYS_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40028000, .hexadecimal));
pub const PLL_USB_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x4002c000, .hexadecimal));
pub const BUSCTRL_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40030000, .hexadecimal));
pub const UART0_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40034000, .hexadecimal));
pub const UART1_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40038000, .hexadecimal));
pub const SPI0_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x4003c000, .hexadecimal));
pub const SPI1_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40040000, .hexadecimal));
pub const I2C0_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40044000, .hexadecimal));
pub const I2C1_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40048000, .hexadecimal));
pub const ADC_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x4004c000, .hexadecimal));
pub const PWM_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40050000, .hexadecimal));
pub const TIMER_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40054000, .hexadecimal));
pub const WATCHDOG_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40058000, .hexadecimal));
pub const RTC_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x4005c000, .hexadecimal));
pub const ROSC_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40060000, .hexadecimal));
pub const VREG_AND_CHIP_RESET_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40064000, .hexadecimal));
pub const TBMAN_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x4006c000, .hexadecimal));
pub const DMA_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50000000, .hexadecimal));
pub const USBCTRL_DPRAM_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50100000, .hexadecimal));
pub const USBCTRL_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50100000, .hexadecimal));
pub const USBCTRL_REGS_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50110000, .hexadecimal));
pub const PIO0_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50200000, .hexadecimal));
pub const PIO1_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50300000, .hexadecimal));
pub const XIP_AUX_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50400000, .hexadecimal));
pub const SIO_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xd0000000, .hexadecimal));
pub const PPB_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe0000000, .hexadecimal));
pub const HARDWARE_REGS_SIO_DEFINED = "";
pub const SIO_CPUID_OFFSET = _u(@as(c_int, 0x00000000));
pub const SIO_CPUID_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_CPUID_RESET = "-";
pub const SIO_CPUID_MSB = _u(@as(c_int, 31));
pub const SIO_CPUID_LSB = _u(@as(c_int, 0));
pub const SIO_CPUID_ACCESS = "RO";
pub const SIO_GPIO_IN_OFFSET = _u(@as(c_int, 0x00000004));
pub const SIO_GPIO_IN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3fffffff, .hexadecimal));
pub const SIO_GPIO_IN_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_IN_MSB = _u(@as(c_int, 29));
pub const SIO_GPIO_IN_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_IN_ACCESS = "RO";
pub const SIO_GPIO_HI_IN_OFFSET = _u(@as(c_int, 0x00000008));
pub const SIO_GPIO_HI_IN_BITS = _u(@as(c_int, 0x0000003f));
pub const SIO_GPIO_HI_IN_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_HI_IN_MSB = _u(@as(c_int, 5));
pub const SIO_GPIO_HI_IN_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_HI_IN_ACCESS = "RO";
pub const SIO_GPIO_OUT_OFFSET = _u(@as(c_int, 0x00000010));
pub const SIO_GPIO_OUT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3fffffff, .hexadecimal));
pub const SIO_GPIO_OUT_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_OUT_MSB = _u(@as(c_int, 29));
pub const SIO_GPIO_OUT_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_OUT_ACCESS = "RW";
pub const SIO_GPIO_OUT_SET_OFFSET = _u(@as(c_int, 0x00000014));
pub const SIO_GPIO_OUT_SET_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3fffffff, .hexadecimal));
pub const SIO_GPIO_OUT_SET_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_OUT_SET_MSB = _u(@as(c_int, 29));
pub const SIO_GPIO_OUT_SET_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_OUT_SET_ACCESS = "WO";
pub const SIO_GPIO_OUT_CLR_OFFSET = _u(@as(c_int, 0x00000018));
pub const SIO_GPIO_OUT_CLR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3fffffff, .hexadecimal));
pub const SIO_GPIO_OUT_CLR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_OUT_CLR_MSB = _u(@as(c_int, 29));
pub const SIO_GPIO_OUT_CLR_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_OUT_CLR_ACCESS = "WO";
pub const SIO_GPIO_OUT_XOR_OFFSET = _u(@as(c_int, 0x0000001c));
pub const SIO_GPIO_OUT_XOR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3fffffff, .hexadecimal));
pub const SIO_GPIO_OUT_XOR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_OUT_XOR_MSB = _u(@as(c_int, 29));
pub const SIO_GPIO_OUT_XOR_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_OUT_XOR_ACCESS = "WO";
pub const SIO_GPIO_OE_OFFSET = _u(@as(c_int, 0x00000020));
pub const SIO_GPIO_OE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3fffffff, .hexadecimal));
pub const SIO_GPIO_OE_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_OE_MSB = _u(@as(c_int, 29));
pub const SIO_GPIO_OE_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_OE_ACCESS = "RW";
pub const SIO_GPIO_OE_SET_OFFSET = _u(@as(c_int, 0x00000024));
pub const SIO_GPIO_OE_SET_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3fffffff, .hexadecimal));
pub const SIO_GPIO_OE_SET_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_OE_SET_MSB = _u(@as(c_int, 29));
pub const SIO_GPIO_OE_SET_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_OE_SET_ACCESS = "WO";
pub const SIO_GPIO_OE_CLR_OFFSET = _u(@as(c_int, 0x00000028));
pub const SIO_GPIO_OE_CLR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3fffffff, .hexadecimal));
pub const SIO_GPIO_OE_CLR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_OE_CLR_MSB = _u(@as(c_int, 29));
pub const SIO_GPIO_OE_CLR_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_OE_CLR_ACCESS = "WO";
pub const SIO_GPIO_OE_XOR_OFFSET = _u(@as(c_int, 0x0000002c));
pub const SIO_GPIO_OE_XOR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3fffffff, .hexadecimal));
pub const SIO_GPIO_OE_XOR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_OE_XOR_MSB = _u(@as(c_int, 29));
pub const SIO_GPIO_OE_XOR_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_OE_XOR_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_OFFSET = _u(@as(c_int, 0x00000030));
pub const SIO_GPIO_HI_OUT_BITS = _u(@as(c_int, 0x0000003f));
pub const SIO_GPIO_HI_OUT_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_HI_OUT_MSB = _u(@as(c_int, 5));
pub const SIO_GPIO_HI_OUT_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_HI_OUT_ACCESS = "RW";
pub const SIO_GPIO_HI_OUT_SET_OFFSET = _u(@as(c_int, 0x00000034));
pub const SIO_GPIO_HI_OUT_SET_BITS = _u(@as(c_int, 0x0000003f));
pub const SIO_GPIO_HI_OUT_SET_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_HI_OUT_SET_MSB = _u(@as(c_int, 5));
pub const SIO_GPIO_HI_OUT_SET_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_HI_OUT_SET_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_CLR_OFFSET = _u(@as(c_int, 0x00000038));
pub const SIO_GPIO_HI_OUT_CLR_BITS = _u(@as(c_int, 0x0000003f));
pub const SIO_GPIO_HI_OUT_CLR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_HI_OUT_CLR_MSB = _u(@as(c_int, 5));
pub const SIO_GPIO_HI_OUT_CLR_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_HI_OUT_CLR_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_XOR_OFFSET = _u(@as(c_int, 0x0000003c));
pub const SIO_GPIO_HI_OUT_XOR_BITS = _u(@as(c_int, 0x0000003f));
pub const SIO_GPIO_HI_OUT_XOR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_HI_OUT_XOR_MSB = _u(@as(c_int, 5));
pub const SIO_GPIO_HI_OUT_XOR_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_HI_OUT_XOR_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_OFFSET = _u(@as(c_int, 0x00000040));
pub const SIO_GPIO_HI_OE_BITS = _u(@as(c_int, 0x0000003f));
pub const SIO_GPIO_HI_OE_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_HI_OE_MSB = _u(@as(c_int, 5));
pub const SIO_GPIO_HI_OE_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_HI_OE_ACCESS = "RW";
pub const SIO_GPIO_HI_OE_SET_OFFSET = _u(@as(c_int, 0x00000044));
pub const SIO_GPIO_HI_OE_SET_BITS = _u(@as(c_int, 0x0000003f));
pub const SIO_GPIO_HI_OE_SET_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_HI_OE_SET_MSB = _u(@as(c_int, 5));
pub const SIO_GPIO_HI_OE_SET_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_HI_OE_SET_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_CLR_OFFSET = _u(@as(c_int, 0x00000048));
pub const SIO_GPIO_HI_OE_CLR_BITS = _u(@as(c_int, 0x0000003f));
pub const SIO_GPIO_HI_OE_CLR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_HI_OE_CLR_MSB = _u(@as(c_int, 5));
pub const SIO_GPIO_HI_OE_CLR_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_HI_OE_CLR_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_XOR_OFFSET = _u(@as(c_int, 0x0000004c));
pub const SIO_GPIO_HI_OE_XOR_BITS = _u(@as(c_int, 0x0000003f));
pub const SIO_GPIO_HI_OE_XOR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_HI_OE_XOR_MSB = _u(@as(c_int, 5));
pub const SIO_GPIO_HI_OE_XOR_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_HI_OE_XOR_ACCESS = "WO";
pub const SIO_FIFO_ST_OFFSET = _u(@as(c_int, 0x00000050));
pub const SIO_FIFO_ST_BITS = _u(@as(c_int, 0x0000000f));
pub const SIO_FIFO_ST_RESET = _u(@as(c_int, 0x00000002));
pub const SIO_FIFO_ST_ROE_RESET = _u(@as(c_int, 0x0));
pub const SIO_FIFO_ST_ROE_BITS = _u(@as(c_int, 0x00000008));
pub const SIO_FIFO_ST_ROE_MSB = _u(@as(c_int, 3));
pub const SIO_FIFO_ST_ROE_LSB = _u(@as(c_int, 3));
pub const SIO_FIFO_ST_ROE_ACCESS = "WC";
pub const SIO_FIFO_ST_WOF_RESET = _u(@as(c_int, 0x0));
pub const SIO_FIFO_ST_WOF_BITS = _u(@as(c_int, 0x00000004));
pub const SIO_FIFO_ST_WOF_MSB = _u(@as(c_int, 2));
pub const SIO_FIFO_ST_WOF_LSB = _u(@as(c_int, 2));
pub const SIO_FIFO_ST_WOF_ACCESS = "WC";
pub const SIO_FIFO_ST_RDY_RESET = _u(@as(c_int, 0x1));
pub const SIO_FIFO_ST_RDY_BITS = _u(@as(c_int, 0x00000002));
pub const SIO_FIFO_ST_RDY_MSB = _u(@as(c_int, 1));
pub const SIO_FIFO_ST_RDY_LSB = _u(@as(c_int, 1));
pub const SIO_FIFO_ST_RDY_ACCESS = "RO";
pub const SIO_FIFO_ST_VLD_RESET = _u(@as(c_int, 0x0));
pub const SIO_FIFO_ST_VLD_BITS = _u(@as(c_int, 0x00000001));
pub const SIO_FIFO_ST_VLD_MSB = _u(@as(c_int, 0));
pub const SIO_FIFO_ST_VLD_LSB = _u(@as(c_int, 0));
pub const SIO_FIFO_ST_VLD_ACCESS = "RO";
pub const SIO_FIFO_WR_OFFSET = _u(@as(c_int, 0x00000054));
pub const SIO_FIFO_WR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_FIFO_WR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_FIFO_WR_MSB = _u(@as(c_int, 31));
pub const SIO_FIFO_WR_LSB = _u(@as(c_int, 0));
pub const SIO_FIFO_WR_ACCESS = "WF";
pub const SIO_FIFO_RD_OFFSET = _u(@as(c_int, 0x00000058));
pub const SIO_FIFO_RD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_FIFO_RD_RESET = "-";
pub const SIO_FIFO_RD_MSB = _u(@as(c_int, 31));
pub const SIO_FIFO_RD_LSB = _u(@as(c_int, 0));
pub const SIO_FIFO_RD_ACCESS = "RF";
pub const SIO_SPINLOCK_ST_OFFSET = _u(@as(c_int, 0x0000005c));
pub const SIO_SPINLOCK_ST_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK_ST_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK_ST_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK_ST_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK_ST_ACCESS = "RO";
pub const SIO_DIV_UDIVIDEND_OFFSET = _u(@as(c_int, 0x00000060));
pub const SIO_DIV_UDIVIDEND_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_DIV_UDIVIDEND_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_DIV_UDIVIDEND_MSB = _u(@as(c_int, 31));
pub const SIO_DIV_UDIVIDEND_LSB = _u(@as(c_int, 0));
pub const SIO_DIV_UDIVIDEND_ACCESS = "RW";
pub const SIO_DIV_UDIVISOR_OFFSET = _u(@as(c_int, 0x00000064));
pub const SIO_DIV_UDIVISOR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_DIV_UDIVISOR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_DIV_UDIVISOR_MSB = _u(@as(c_int, 31));
pub const SIO_DIV_UDIVISOR_LSB = _u(@as(c_int, 0));
pub const SIO_DIV_UDIVISOR_ACCESS = "RW";
pub const SIO_DIV_SDIVIDEND_OFFSET = _u(@as(c_int, 0x00000068));
pub const SIO_DIV_SDIVIDEND_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_DIV_SDIVIDEND_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_DIV_SDIVIDEND_MSB = _u(@as(c_int, 31));
pub const SIO_DIV_SDIVIDEND_LSB = _u(@as(c_int, 0));
pub const SIO_DIV_SDIVIDEND_ACCESS = "RW";
pub const SIO_DIV_SDIVISOR_OFFSET = _u(@as(c_int, 0x0000006c));
pub const SIO_DIV_SDIVISOR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_DIV_SDIVISOR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_DIV_SDIVISOR_MSB = _u(@as(c_int, 31));
pub const SIO_DIV_SDIVISOR_LSB = _u(@as(c_int, 0));
pub const SIO_DIV_SDIVISOR_ACCESS = "RW";
pub const SIO_DIV_QUOTIENT_OFFSET = _u(@as(c_int, 0x00000070));
pub const SIO_DIV_QUOTIENT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_DIV_QUOTIENT_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_DIV_QUOTIENT_MSB = _u(@as(c_int, 31));
pub const SIO_DIV_QUOTIENT_LSB = _u(@as(c_int, 0));
pub const SIO_DIV_QUOTIENT_ACCESS = "RW";
pub const SIO_DIV_REMAINDER_OFFSET = _u(@as(c_int, 0x00000074));
pub const SIO_DIV_REMAINDER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_DIV_REMAINDER_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_DIV_REMAINDER_MSB = _u(@as(c_int, 31));
pub const SIO_DIV_REMAINDER_LSB = _u(@as(c_int, 0));
pub const SIO_DIV_REMAINDER_ACCESS = "RW";
pub const SIO_DIV_CSR_OFFSET = _u(@as(c_int, 0x00000078));
pub const SIO_DIV_CSR_BITS = _u(@as(c_int, 0x00000003));
pub const SIO_DIV_CSR_RESET = _u(@as(c_int, 0x00000001));
pub const SIO_DIV_CSR_DIRTY_RESET = _u(@as(c_int, 0x0));
pub const SIO_DIV_CSR_DIRTY_BITS = _u(@as(c_int, 0x00000002));
pub const SIO_DIV_CSR_DIRTY_MSB = _u(@as(c_int, 1));
pub const SIO_DIV_CSR_DIRTY_LSB = _u(@as(c_int, 1));
pub const SIO_DIV_CSR_DIRTY_ACCESS = "RO";
pub const SIO_DIV_CSR_READY_RESET = _u(@as(c_int, 0x1));
pub const SIO_DIV_CSR_READY_BITS = _u(@as(c_int, 0x00000001));
pub const SIO_DIV_CSR_READY_MSB = _u(@as(c_int, 0));
pub const SIO_DIV_CSR_READY_LSB = _u(@as(c_int, 0));
pub const SIO_DIV_CSR_READY_ACCESS = "RO";
pub const SIO_INTERP0_ACCUM0_OFFSET = _u(@as(c_int, 0x00000080));
pub const SIO_INTERP0_ACCUM0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP0_ACCUM0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_ACCUM0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_ACCUM0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_ACCUM0_ACCESS = "RW";
pub const SIO_INTERP0_ACCUM1_OFFSET = _u(@as(c_int, 0x00000084));
pub const SIO_INTERP0_ACCUM1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP0_ACCUM1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_ACCUM1_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_ACCUM1_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_ACCUM1_ACCESS = "RW";
pub const SIO_INTERP0_BASE0_OFFSET = _u(@as(c_int, 0x00000088));
pub const SIO_INTERP0_BASE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP0_BASE0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_BASE0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_BASE0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_BASE0_ACCESS = "RW";
pub const SIO_INTERP0_BASE1_OFFSET = _u(@as(c_int, 0x0000008c));
pub const SIO_INTERP0_BASE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP0_BASE1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_BASE1_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_BASE1_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_BASE1_ACCESS = "RW";
pub const SIO_INTERP0_BASE2_OFFSET = _u(@as(c_int, 0x00000090));
pub const SIO_INTERP0_BASE2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP0_BASE2_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_BASE2_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_BASE2_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_BASE2_ACCESS = "RW";
pub const SIO_INTERP0_POP_LANE0_OFFSET = _u(@as(c_int, 0x00000094));
pub const SIO_INTERP0_POP_LANE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP0_POP_LANE0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_POP_LANE0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_POP_LANE0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_POP_LANE0_ACCESS = "RO";
pub const SIO_INTERP0_POP_LANE1_OFFSET = _u(@as(c_int, 0x00000098));
pub const SIO_INTERP0_POP_LANE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP0_POP_LANE1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_POP_LANE1_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_POP_LANE1_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_POP_LANE1_ACCESS = "RO";
pub const SIO_INTERP0_POP_FULL_OFFSET = _u(@as(c_int, 0x0000009c));
pub const SIO_INTERP0_POP_FULL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP0_POP_FULL_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_POP_FULL_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_POP_FULL_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_POP_FULL_ACCESS = "RO";
pub const SIO_INTERP0_PEEK_LANE0_OFFSET = _u(@as(c_int, 0x000000a0));
pub const SIO_INTERP0_PEEK_LANE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP0_PEEK_LANE0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_PEEK_LANE0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_PEEK_LANE0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_PEEK_LANE0_ACCESS = "RO";
pub const SIO_INTERP0_PEEK_LANE1_OFFSET = _u(@as(c_int, 0x000000a4));
pub const SIO_INTERP0_PEEK_LANE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP0_PEEK_LANE1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_PEEK_LANE1_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_PEEK_LANE1_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_PEEK_LANE1_ACCESS = "RO";
pub const SIO_INTERP0_PEEK_FULL_OFFSET = _u(@as(c_int, 0x000000a8));
pub const SIO_INTERP0_PEEK_FULL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP0_PEEK_FULL_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_PEEK_FULL_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_PEEK_FULL_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_PEEK_FULL_ACCESS = "RO";
pub const SIO_INTERP0_CTRL_LANE0_OFFSET = _u(@as(c_int, 0x000000ac));
pub const SIO_INTERP0_CTRL_LANE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x03bfffff, .hexadecimal));
pub const SIO_INTERP0_CTRL_LANE0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_CTRL_LANE0_OVERF_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE0_OVERF_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const SIO_INTERP0_CTRL_LANE0_OVERF_MSB = _u(@as(c_int, 25));
pub const SIO_INTERP0_CTRL_LANE0_OVERF_LSB = _u(@as(c_int, 25));
pub const SIO_INTERP0_CTRL_LANE0_OVERF_ACCESS = "RO";
pub const SIO_INTERP0_CTRL_LANE0_OVERF1_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE0_OVERF1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const SIO_INTERP0_CTRL_LANE0_OVERF1_MSB = _u(@as(c_int, 24));
pub const SIO_INTERP0_CTRL_LANE0_OVERF1_LSB = _u(@as(c_int, 24));
pub const SIO_INTERP0_CTRL_LANE0_OVERF1_ACCESS = "RO";
pub const SIO_INTERP0_CTRL_LANE0_OVERF0_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE0_OVERF0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const SIO_INTERP0_CTRL_LANE0_OVERF0_MSB = _u(@as(c_int, 23));
pub const SIO_INTERP0_CTRL_LANE0_OVERF0_LSB = _u(@as(c_int, 23));
pub const SIO_INTERP0_CTRL_LANE0_OVERF0_ACCESS = "RO";
pub const SIO_INTERP0_CTRL_LANE0_BLEND_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE0_BLEND_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const SIO_INTERP0_CTRL_LANE0_BLEND_MSB = _u(@as(c_int, 21));
pub const SIO_INTERP0_CTRL_LANE0_BLEND_LSB = _u(@as(c_int, 21));
pub const SIO_INTERP0_CTRL_LANE0_BLEND_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE0_FORCE_MSB_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE0_FORCE_MSB_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00180000, .hexadecimal));
pub const SIO_INTERP0_CTRL_LANE0_FORCE_MSB_MSB = _u(@as(c_int, 20));
pub const SIO_INTERP0_CTRL_LANE0_FORCE_MSB_LSB = _u(@as(c_int, 19));
pub const SIO_INTERP0_CTRL_LANE0_FORCE_MSB_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE0_ADD_RAW_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE0_ADD_RAW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const SIO_INTERP0_CTRL_LANE0_ADD_RAW_MSB = _u(@as(c_int, 18));
pub const SIO_INTERP0_CTRL_LANE0_ADD_RAW_LSB = _u(@as(c_int, 18));
pub const SIO_INTERP0_CTRL_LANE0_ADD_RAW_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE0_CROSS_RESULT_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE0_CROSS_RESULT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const SIO_INTERP0_CTRL_LANE0_CROSS_RESULT_MSB = _u(@as(c_int, 17));
pub const SIO_INTERP0_CTRL_LANE0_CROSS_RESULT_LSB = _u(@as(c_int, 17));
pub const SIO_INTERP0_CTRL_LANE0_CROSS_RESULT_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE0_CROSS_INPUT_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE0_CROSS_INPUT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const SIO_INTERP0_CTRL_LANE0_CROSS_INPUT_MSB = _u(@as(c_int, 16));
pub const SIO_INTERP0_CTRL_LANE0_CROSS_INPUT_LSB = _u(@as(c_int, 16));
pub const SIO_INTERP0_CTRL_LANE0_CROSS_INPUT_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE0_SIGNED_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE0_SIGNED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const SIO_INTERP0_CTRL_LANE0_SIGNED_MSB = _u(@as(c_int, 15));
pub const SIO_INTERP0_CTRL_LANE0_SIGNED_LSB = _u(@as(c_int, 15));
pub const SIO_INTERP0_CTRL_LANE0_SIGNED_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE0_MASK_MSB_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP0_CTRL_LANE0_MASK_MSB_BITS = _u(@as(c_int, 0x00007c00));
pub const SIO_INTERP0_CTRL_LANE0_MASK_MSB_MSB = _u(@as(c_int, 14));
pub const SIO_INTERP0_CTRL_LANE0_MASK_MSB_LSB = _u(@as(c_int, 10));
pub const SIO_INTERP0_CTRL_LANE0_MASK_MSB_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE0_MASK_LSB_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP0_CTRL_LANE0_MASK_LSB_BITS = _u(@as(c_int, 0x000003e0));
pub const SIO_INTERP0_CTRL_LANE0_MASK_LSB_MSB = _u(@as(c_int, 9));
pub const SIO_INTERP0_CTRL_LANE0_MASK_LSB_LSB = _u(@as(c_int, 5));
pub const SIO_INTERP0_CTRL_LANE0_MASK_LSB_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE0_SHIFT_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP0_CTRL_LANE0_SHIFT_BITS = _u(@as(c_int, 0x0000001f));
pub const SIO_INTERP0_CTRL_LANE0_SHIFT_MSB = _u(@as(c_int, 4));
pub const SIO_INTERP0_CTRL_LANE0_SHIFT_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_CTRL_LANE0_SHIFT_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE1_OFFSET = _u(@as(c_int, 0x000000b0));
pub const SIO_INTERP0_CTRL_LANE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x001fffff, .hexadecimal));
pub const SIO_INTERP0_CTRL_LANE1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_CTRL_LANE1_FORCE_MSB_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE1_FORCE_MSB_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00180000, .hexadecimal));
pub const SIO_INTERP0_CTRL_LANE1_FORCE_MSB_MSB = _u(@as(c_int, 20));
pub const SIO_INTERP0_CTRL_LANE1_FORCE_MSB_LSB = _u(@as(c_int, 19));
pub const SIO_INTERP0_CTRL_LANE1_FORCE_MSB_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE1_ADD_RAW_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE1_ADD_RAW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const SIO_INTERP0_CTRL_LANE1_ADD_RAW_MSB = _u(@as(c_int, 18));
pub const SIO_INTERP0_CTRL_LANE1_ADD_RAW_LSB = _u(@as(c_int, 18));
pub const SIO_INTERP0_CTRL_LANE1_ADD_RAW_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE1_CROSS_RESULT_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE1_CROSS_RESULT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const SIO_INTERP0_CTRL_LANE1_CROSS_RESULT_MSB = _u(@as(c_int, 17));
pub const SIO_INTERP0_CTRL_LANE1_CROSS_RESULT_LSB = _u(@as(c_int, 17));
pub const SIO_INTERP0_CTRL_LANE1_CROSS_RESULT_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE1_CROSS_INPUT_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE1_CROSS_INPUT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const SIO_INTERP0_CTRL_LANE1_CROSS_INPUT_MSB = _u(@as(c_int, 16));
pub const SIO_INTERP0_CTRL_LANE1_CROSS_INPUT_LSB = _u(@as(c_int, 16));
pub const SIO_INTERP0_CTRL_LANE1_CROSS_INPUT_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE1_SIGNED_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE1_SIGNED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const SIO_INTERP0_CTRL_LANE1_SIGNED_MSB = _u(@as(c_int, 15));
pub const SIO_INTERP0_CTRL_LANE1_SIGNED_LSB = _u(@as(c_int, 15));
pub const SIO_INTERP0_CTRL_LANE1_SIGNED_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE1_MASK_MSB_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP0_CTRL_LANE1_MASK_MSB_BITS = _u(@as(c_int, 0x00007c00));
pub const SIO_INTERP0_CTRL_LANE1_MASK_MSB_MSB = _u(@as(c_int, 14));
pub const SIO_INTERP0_CTRL_LANE1_MASK_MSB_LSB = _u(@as(c_int, 10));
pub const SIO_INTERP0_CTRL_LANE1_MASK_MSB_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE1_MASK_LSB_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP0_CTRL_LANE1_MASK_LSB_BITS = _u(@as(c_int, 0x000003e0));
pub const SIO_INTERP0_CTRL_LANE1_MASK_LSB_MSB = _u(@as(c_int, 9));
pub const SIO_INTERP0_CTRL_LANE1_MASK_LSB_LSB = _u(@as(c_int, 5));
pub const SIO_INTERP0_CTRL_LANE1_MASK_LSB_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE1_SHIFT_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP0_CTRL_LANE1_SHIFT_BITS = _u(@as(c_int, 0x0000001f));
pub const SIO_INTERP0_CTRL_LANE1_SHIFT_MSB = _u(@as(c_int, 4));
pub const SIO_INTERP0_CTRL_LANE1_SHIFT_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_CTRL_LANE1_SHIFT_ACCESS = "RW";
pub const SIO_INTERP0_ACCUM0_ADD_OFFSET = _u(@as(c_int, 0x000000b4));
pub const SIO_INTERP0_ACCUM0_ADD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const SIO_INTERP0_ACCUM0_ADD_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_ACCUM0_ADD_MSB = _u(@as(c_int, 23));
pub const SIO_INTERP0_ACCUM0_ADD_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_ACCUM0_ADD_ACCESS = "RW";
pub const SIO_INTERP0_ACCUM1_ADD_OFFSET = _u(@as(c_int, 0x000000b8));
pub const SIO_INTERP0_ACCUM1_ADD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const SIO_INTERP0_ACCUM1_ADD_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_ACCUM1_ADD_MSB = _u(@as(c_int, 23));
pub const SIO_INTERP0_ACCUM1_ADD_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_ACCUM1_ADD_ACCESS = "RW";
pub const SIO_INTERP0_BASE_1AND0_OFFSET = _u(@as(c_int, 0x000000bc));
pub const SIO_INTERP0_BASE_1AND0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP0_BASE_1AND0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_BASE_1AND0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_BASE_1AND0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_BASE_1AND0_ACCESS = "WO";
pub const SIO_INTERP1_ACCUM0_OFFSET = _u(@as(c_int, 0x000000c0));
pub const SIO_INTERP1_ACCUM0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP1_ACCUM0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_ACCUM0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_ACCUM0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_ACCUM0_ACCESS = "RW";
pub const SIO_INTERP1_ACCUM1_OFFSET = _u(@as(c_int, 0x000000c4));
pub const SIO_INTERP1_ACCUM1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP1_ACCUM1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_ACCUM1_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_ACCUM1_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_ACCUM1_ACCESS = "RW";
pub const SIO_INTERP1_BASE0_OFFSET = _u(@as(c_int, 0x000000c8));
pub const SIO_INTERP1_BASE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP1_BASE0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_BASE0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_BASE0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_BASE0_ACCESS = "RW";
pub const SIO_INTERP1_BASE1_OFFSET = _u(@as(c_int, 0x000000cc));
pub const SIO_INTERP1_BASE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP1_BASE1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_BASE1_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_BASE1_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_BASE1_ACCESS = "RW";
pub const SIO_INTERP1_BASE2_OFFSET = _u(@as(c_int, 0x000000d0));
pub const SIO_INTERP1_BASE2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP1_BASE2_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_BASE2_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_BASE2_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_BASE2_ACCESS = "RW";
pub const SIO_INTERP1_POP_LANE0_OFFSET = _u(@as(c_int, 0x000000d4));
pub const SIO_INTERP1_POP_LANE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP1_POP_LANE0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_POP_LANE0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_POP_LANE0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_POP_LANE0_ACCESS = "RO";
pub const SIO_INTERP1_POP_LANE1_OFFSET = _u(@as(c_int, 0x000000d8));
pub const SIO_INTERP1_POP_LANE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP1_POP_LANE1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_POP_LANE1_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_POP_LANE1_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_POP_LANE1_ACCESS = "RO";
pub const SIO_INTERP1_POP_FULL_OFFSET = _u(@as(c_int, 0x000000dc));
pub const SIO_INTERP1_POP_FULL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP1_POP_FULL_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_POP_FULL_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_POP_FULL_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_POP_FULL_ACCESS = "RO";
pub const SIO_INTERP1_PEEK_LANE0_OFFSET = _u(@as(c_int, 0x000000e0));
pub const SIO_INTERP1_PEEK_LANE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP1_PEEK_LANE0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_PEEK_LANE0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_PEEK_LANE0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_PEEK_LANE0_ACCESS = "RO";
pub const SIO_INTERP1_PEEK_LANE1_OFFSET = _u(@as(c_int, 0x000000e4));
pub const SIO_INTERP1_PEEK_LANE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP1_PEEK_LANE1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_PEEK_LANE1_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_PEEK_LANE1_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_PEEK_LANE1_ACCESS = "RO";
pub const SIO_INTERP1_PEEK_FULL_OFFSET = _u(@as(c_int, 0x000000e8));
pub const SIO_INTERP1_PEEK_FULL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP1_PEEK_FULL_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_PEEK_FULL_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_PEEK_FULL_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_PEEK_FULL_ACCESS = "RO";
pub const SIO_INTERP1_CTRL_LANE0_OFFSET = _u(@as(c_int, 0x000000ec));
pub const SIO_INTERP1_CTRL_LANE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x03dfffff, .hexadecimal));
pub const SIO_INTERP1_CTRL_LANE0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_CTRL_LANE0_OVERF_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE0_OVERF_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const SIO_INTERP1_CTRL_LANE0_OVERF_MSB = _u(@as(c_int, 25));
pub const SIO_INTERP1_CTRL_LANE0_OVERF_LSB = _u(@as(c_int, 25));
pub const SIO_INTERP1_CTRL_LANE0_OVERF_ACCESS = "RO";
pub const SIO_INTERP1_CTRL_LANE0_OVERF1_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE0_OVERF1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const SIO_INTERP1_CTRL_LANE0_OVERF1_MSB = _u(@as(c_int, 24));
pub const SIO_INTERP1_CTRL_LANE0_OVERF1_LSB = _u(@as(c_int, 24));
pub const SIO_INTERP1_CTRL_LANE0_OVERF1_ACCESS = "RO";
pub const SIO_INTERP1_CTRL_LANE0_OVERF0_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE0_OVERF0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const SIO_INTERP1_CTRL_LANE0_OVERF0_MSB = _u(@as(c_int, 23));
pub const SIO_INTERP1_CTRL_LANE0_OVERF0_LSB = _u(@as(c_int, 23));
pub const SIO_INTERP1_CTRL_LANE0_OVERF0_ACCESS = "RO";
pub const SIO_INTERP1_CTRL_LANE0_CLAMP_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE0_CLAMP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const SIO_INTERP1_CTRL_LANE0_CLAMP_MSB = _u(@as(c_int, 22));
pub const SIO_INTERP1_CTRL_LANE0_CLAMP_LSB = _u(@as(c_int, 22));
pub const SIO_INTERP1_CTRL_LANE0_CLAMP_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE0_FORCE_MSB_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE0_FORCE_MSB_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00180000, .hexadecimal));
pub const SIO_INTERP1_CTRL_LANE0_FORCE_MSB_MSB = _u(@as(c_int, 20));
pub const SIO_INTERP1_CTRL_LANE0_FORCE_MSB_LSB = _u(@as(c_int, 19));
pub const SIO_INTERP1_CTRL_LANE0_FORCE_MSB_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE0_ADD_RAW_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE0_ADD_RAW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const SIO_INTERP1_CTRL_LANE0_ADD_RAW_MSB = _u(@as(c_int, 18));
pub const SIO_INTERP1_CTRL_LANE0_ADD_RAW_LSB = _u(@as(c_int, 18));
pub const SIO_INTERP1_CTRL_LANE0_ADD_RAW_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE0_CROSS_RESULT_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE0_CROSS_RESULT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const SIO_INTERP1_CTRL_LANE0_CROSS_RESULT_MSB = _u(@as(c_int, 17));
pub const SIO_INTERP1_CTRL_LANE0_CROSS_RESULT_LSB = _u(@as(c_int, 17));
pub const SIO_INTERP1_CTRL_LANE0_CROSS_RESULT_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE0_CROSS_INPUT_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE0_CROSS_INPUT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const SIO_INTERP1_CTRL_LANE0_CROSS_INPUT_MSB = _u(@as(c_int, 16));
pub const SIO_INTERP1_CTRL_LANE0_CROSS_INPUT_LSB = _u(@as(c_int, 16));
pub const SIO_INTERP1_CTRL_LANE0_CROSS_INPUT_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE0_SIGNED_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE0_SIGNED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const SIO_INTERP1_CTRL_LANE0_SIGNED_MSB = _u(@as(c_int, 15));
pub const SIO_INTERP1_CTRL_LANE0_SIGNED_LSB = _u(@as(c_int, 15));
pub const SIO_INTERP1_CTRL_LANE0_SIGNED_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE0_MASK_MSB_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP1_CTRL_LANE0_MASK_MSB_BITS = _u(@as(c_int, 0x00007c00));
pub const SIO_INTERP1_CTRL_LANE0_MASK_MSB_MSB = _u(@as(c_int, 14));
pub const SIO_INTERP1_CTRL_LANE0_MASK_MSB_LSB = _u(@as(c_int, 10));
pub const SIO_INTERP1_CTRL_LANE0_MASK_MSB_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE0_MASK_LSB_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP1_CTRL_LANE0_MASK_LSB_BITS = _u(@as(c_int, 0x000003e0));
pub const SIO_INTERP1_CTRL_LANE0_MASK_LSB_MSB = _u(@as(c_int, 9));
pub const SIO_INTERP1_CTRL_LANE0_MASK_LSB_LSB = _u(@as(c_int, 5));
pub const SIO_INTERP1_CTRL_LANE0_MASK_LSB_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE0_SHIFT_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP1_CTRL_LANE0_SHIFT_BITS = _u(@as(c_int, 0x0000001f));
pub const SIO_INTERP1_CTRL_LANE0_SHIFT_MSB = _u(@as(c_int, 4));
pub const SIO_INTERP1_CTRL_LANE0_SHIFT_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_CTRL_LANE0_SHIFT_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE1_OFFSET = _u(@as(c_int, 0x000000f0));
pub const SIO_INTERP1_CTRL_LANE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x001fffff, .hexadecimal));
pub const SIO_INTERP1_CTRL_LANE1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_CTRL_LANE1_FORCE_MSB_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE1_FORCE_MSB_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00180000, .hexadecimal));
pub const SIO_INTERP1_CTRL_LANE1_FORCE_MSB_MSB = _u(@as(c_int, 20));
pub const SIO_INTERP1_CTRL_LANE1_FORCE_MSB_LSB = _u(@as(c_int, 19));
pub const SIO_INTERP1_CTRL_LANE1_FORCE_MSB_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE1_ADD_RAW_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE1_ADD_RAW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const SIO_INTERP1_CTRL_LANE1_ADD_RAW_MSB = _u(@as(c_int, 18));
pub const SIO_INTERP1_CTRL_LANE1_ADD_RAW_LSB = _u(@as(c_int, 18));
pub const SIO_INTERP1_CTRL_LANE1_ADD_RAW_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE1_CROSS_RESULT_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE1_CROSS_RESULT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const SIO_INTERP1_CTRL_LANE1_CROSS_RESULT_MSB = _u(@as(c_int, 17));
pub const SIO_INTERP1_CTRL_LANE1_CROSS_RESULT_LSB = _u(@as(c_int, 17));
pub const SIO_INTERP1_CTRL_LANE1_CROSS_RESULT_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE1_CROSS_INPUT_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE1_CROSS_INPUT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const SIO_INTERP1_CTRL_LANE1_CROSS_INPUT_MSB = _u(@as(c_int, 16));
pub const SIO_INTERP1_CTRL_LANE1_CROSS_INPUT_LSB = _u(@as(c_int, 16));
pub const SIO_INTERP1_CTRL_LANE1_CROSS_INPUT_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE1_SIGNED_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE1_SIGNED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const SIO_INTERP1_CTRL_LANE1_SIGNED_MSB = _u(@as(c_int, 15));
pub const SIO_INTERP1_CTRL_LANE1_SIGNED_LSB = _u(@as(c_int, 15));
pub const SIO_INTERP1_CTRL_LANE1_SIGNED_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE1_MASK_MSB_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP1_CTRL_LANE1_MASK_MSB_BITS = _u(@as(c_int, 0x00007c00));
pub const SIO_INTERP1_CTRL_LANE1_MASK_MSB_MSB = _u(@as(c_int, 14));
pub const SIO_INTERP1_CTRL_LANE1_MASK_MSB_LSB = _u(@as(c_int, 10));
pub const SIO_INTERP1_CTRL_LANE1_MASK_MSB_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE1_MASK_LSB_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP1_CTRL_LANE1_MASK_LSB_BITS = _u(@as(c_int, 0x000003e0));
pub const SIO_INTERP1_CTRL_LANE1_MASK_LSB_MSB = _u(@as(c_int, 9));
pub const SIO_INTERP1_CTRL_LANE1_MASK_LSB_LSB = _u(@as(c_int, 5));
pub const SIO_INTERP1_CTRL_LANE1_MASK_LSB_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE1_SHIFT_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP1_CTRL_LANE1_SHIFT_BITS = _u(@as(c_int, 0x0000001f));
pub const SIO_INTERP1_CTRL_LANE1_SHIFT_MSB = _u(@as(c_int, 4));
pub const SIO_INTERP1_CTRL_LANE1_SHIFT_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_CTRL_LANE1_SHIFT_ACCESS = "RW";
pub const SIO_INTERP1_ACCUM0_ADD_OFFSET = _u(@as(c_int, 0x000000f4));
pub const SIO_INTERP1_ACCUM0_ADD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const SIO_INTERP1_ACCUM0_ADD_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_ACCUM0_ADD_MSB = _u(@as(c_int, 23));
pub const SIO_INTERP1_ACCUM0_ADD_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_ACCUM0_ADD_ACCESS = "RW";
pub const SIO_INTERP1_ACCUM1_ADD_OFFSET = _u(@as(c_int, 0x000000f8));
pub const SIO_INTERP1_ACCUM1_ADD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const SIO_INTERP1_ACCUM1_ADD_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_ACCUM1_ADD_MSB = _u(@as(c_int, 23));
pub const SIO_INTERP1_ACCUM1_ADD_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_ACCUM1_ADD_ACCESS = "RW";
pub const SIO_INTERP1_BASE_1AND0_OFFSET = _u(@as(c_int, 0x000000fc));
pub const SIO_INTERP1_BASE_1AND0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_INTERP1_BASE_1AND0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_BASE_1AND0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_BASE_1AND0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_BASE_1AND0_ACCESS = "WO";
pub const SIO_SPINLOCK0_OFFSET = _u(@as(c_int, 0x00000100));
pub const SIO_SPINLOCK0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK0_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK0_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK0_ACCESS = "RW";
pub const SIO_SPINLOCK1_OFFSET = _u(@as(c_int, 0x00000104));
pub const SIO_SPINLOCK1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK1_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK1_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK1_ACCESS = "RW";
pub const SIO_SPINLOCK2_OFFSET = _u(@as(c_int, 0x00000108));
pub const SIO_SPINLOCK2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK2_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK2_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK2_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK2_ACCESS = "RW";
pub const SIO_SPINLOCK3_OFFSET = _u(@as(c_int, 0x0000010c));
pub const SIO_SPINLOCK3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK3_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK3_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK3_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK3_ACCESS = "RW";
pub const SIO_SPINLOCK4_OFFSET = _u(@as(c_int, 0x00000110));
pub const SIO_SPINLOCK4_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK4_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK4_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK4_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK4_ACCESS = "RW";
pub const SIO_SPINLOCK5_OFFSET = _u(@as(c_int, 0x00000114));
pub const SIO_SPINLOCK5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK5_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK5_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK5_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK5_ACCESS = "RW";
pub const SIO_SPINLOCK6_OFFSET = _u(@as(c_int, 0x00000118));
pub const SIO_SPINLOCK6_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK6_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK6_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK6_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK6_ACCESS = "RW";
pub const SIO_SPINLOCK7_OFFSET = _u(@as(c_int, 0x0000011c));
pub const SIO_SPINLOCK7_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK7_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK7_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK7_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK7_ACCESS = "RW";
pub const SIO_SPINLOCK8_OFFSET = _u(@as(c_int, 0x00000120));
pub const SIO_SPINLOCK8_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK8_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK8_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK8_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK8_ACCESS = "RW";
pub const SIO_SPINLOCK9_OFFSET = _u(@as(c_int, 0x00000124));
pub const SIO_SPINLOCK9_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK9_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK9_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK9_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK9_ACCESS = "RW";
pub const SIO_SPINLOCK10_OFFSET = _u(@as(c_int, 0x00000128));
pub const SIO_SPINLOCK10_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK10_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK10_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK10_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK10_ACCESS = "RW";
pub const SIO_SPINLOCK11_OFFSET = _u(@as(c_int, 0x0000012c));
pub const SIO_SPINLOCK11_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK11_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK11_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK11_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK11_ACCESS = "RW";
pub const SIO_SPINLOCK12_OFFSET = _u(@as(c_int, 0x00000130));
pub const SIO_SPINLOCK12_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK12_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK12_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK12_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK12_ACCESS = "RW";
pub const SIO_SPINLOCK13_OFFSET = _u(@as(c_int, 0x00000134));
pub const SIO_SPINLOCK13_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK13_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK13_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK13_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK13_ACCESS = "RW";
pub const SIO_SPINLOCK14_OFFSET = _u(@as(c_int, 0x00000138));
pub const SIO_SPINLOCK14_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK14_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK14_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK14_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK14_ACCESS = "RW";
pub const SIO_SPINLOCK15_OFFSET = _u(@as(c_int, 0x0000013c));
pub const SIO_SPINLOCK15_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK15_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK15_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK15_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK15_ACCESS = "RW";
pub const SIO_SPINLOCK16_OFFSET = _u(@as(c_int, 0x00000140));
pub const SIO_SPINLOCK16_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK16_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK16_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK16_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK16_ACCESS = "RW";
pub const SIO_SPINLOCK17_OFFSET = _u(@as(c_int, 0x00000144));
pub const SIO_SPINLOCK17_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK17_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK17_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK17_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK17_ACCESS = "RW";
pub const SIO_SPINLOCK18_OFFSET = _u(@as(c_int, 0x00000148));
pub const SIO_SPINLOCK18_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK18_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK18_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK18_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK18_ACCESS = "RW";
pub const SIO_SPINLOCK19_OFFSET = _u(@as(c_int, 0x0000014c));
pub const SIO_SPINLOCK19_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK19_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK19_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK19_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK19_ACCESS = "RW";
pub const SIO_SPINLOCK20_OFFSET = _u(@as(c_int, 0x00000150));
pub const SIO_SPINLOCK20_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK20_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK20_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK20_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK20_ACCESS = "RW";
pub const SIO_SPINLOCK21_OFFSET = _u(@as(c_int, 0x00000154));
pub const SIO_SPINLOCK21_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK21_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK21_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK21_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK21_ACCESS = "RW";
pub const SIO_SPINLOCK22_OFFSET = _u(@as(c_int, 0x00000158));
pub const SIO_SPINLOCK22_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK22_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK22_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK22_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK22_ACCESS = "RW";
pub const SIO_SPINLOCK23_OFFSET = _u(@as(c_int, 0x0000015c));
pub const SIO_SPINLOCK23_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK23_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK23_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK23_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK23_ACCESS = "RW";
pub const SIO_SPINLOCK24_OFFSET = _u(@as(c_int, 0x00000160));
pub const SIO_SPINLOCK24_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK24_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK24_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK24_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK24_ACCESS = "RW";
pub const SIO_SPINLOCK25_OFFSET = _u(@as(c_int, 0x00000164));
pub const SIO_SPINLOCK25_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK25_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK25_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK25_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK25_ACCESS = "RW";
pub const SIO_SPINLOCK26_OFFSET = _u(@as(c_int, 0x00000168));
pub const SIO_SPINLOCK26_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK26_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK26_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK26_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK26_ACCESS = "RW";
pub const SIO_SPINLOCK27_OFFSET = _u(@as(c_int, 0x0000016c));
pub const SIO_SPINLOCK27_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK27_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK27_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK27_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK27_ACCESS = "RW";
pub const SIO_SPINLOCK28_OFFSET = _u(@as(c_int, 0x00000170));
pub const SIO_SPINLOCK28_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK28_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK28_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK28_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK28_ACCESS = "RW";
pub const SIO_SPINLOCK29_OFFSET = _u(@as(c_int, 0x00000174));
pub const SIO_SPINLOCK29_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK29_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK29_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK29_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK29_ACCESS = "RW";
pub const SIO_SPINLOCK30_OFFSET = _u(@as(c_int, 0x00000178));
pub const SIO_SPINLOCK30_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK30_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK30_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK30_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK30_ACCESS = "RW";
pub const SIO_SPINLOCK31_OFFSET = _u(@as(c_int, 0x0000017c));
pub const SIO_SPINLOCK31_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const SIO_SPINLOCK31_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK31_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK31_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK31_ACCESS = "RW";
pub const PICO_RP2040 = @as(c_int, 1);
pub const PICO_STACK_SIZE = _u(@as(c_int, 0x800));
pub const PICO_HEAP_SIZE = _u(@as(c_int, 0x800));
pub const PICO_NO_RAM_VECTOR_TABLE = @as(c_int, 0);
pub const PICO_FLOAT_SUPPORT_ROM_V1 = @as(c_int, 1);
pub const PICO_DOUBLE_SUPPORT_ROM_V1 = @as(c_int, 1);
pub const PICO_RP2040_B1_SUPPORTED = @as(c_int, 1);
pub const PICO_RP2040_B2_SUPPORTED = @as(c_int, 1);
pub const _SYS_CDEFS_H_ = "";
pub const _MACHINE__DEFAULT_TYPES_H = "";
pub const __have_longlong64 = @as(c_int, 1);
pub const __have_long32 = @as(c_int, 1);
pub const ___int8_t_defined = @as(c_int, 1);
pub const ___int16_t_defined = @as(c_int, 1);
pub const ___int32_t_defined = @as(c_int, 1);
pub const ___int64_t_defined = @as(c_int, 1);
pub const ___int_least8_t_defined = @as(c_int, 1);
pub const ___int_least16_t_defined = @as(c_int, 1);
pub const ___int_least32_t_defined = @as(c_int, 1);
pub const ___int_least64_t_defined = @as(c_int, 1);
pub inline fn __PMT(args: anytype) @TypeOf(args) {
    return args;
}
pub const __THROW = "";
pub const __ptr_t = ?*anyopaque;
pub const __attribute_malloc__ = "";
pub const __attribute_pure__ = "";
pub const __bounded = "";
pub const __unbounded = "";
pub const __ptrvalue = "";
pub const __BEGIN_DECLS = "";
pub const __END_DECLS = "";
pub const __GNUCLIKE_ASM = @as(c_int, 3);
pub const __GNUCLIKE_MATH_BUILTIN_CONSTANTS = "";
pub const __GNUCLIKE___TYPEOF = @as(c_int, 1);
pub const __GNUCLIKE___OFFSETOF = @as(c_int, 1);
pub const __GNUCLIKE___SECTION = @as(c_int, 1);
pub const __GNUCLIKE_CTOR_SECTION_HANDLING = @as(c_int, 1);
pub const __GNUCLIKE_BUILTIN_CONSTANT_P = @as(c_int, 1);
pub const __GNUCLIKE_BUILTIN_VARARGS = @as(c_int, 1);
pub const __GNUCLIKE_BUILTIN_STDARG = @as(c_int, 1);
pub const __GNUCLIKE_BUILTIN_VAALIST = @as(c_int, 1);
pub const __GNUC_VA_LIST_COMPATIBILITY = @as(c_int, 1);
pub const __GNUCLIKE_BUILTIN_NEXT_ARG = @as(c_int, 1);
pub const __GNUCLIKE_MATH_BUILTIN_RELOPS = "";
pub const __GNUCLIKE_BUILTIN_MEMCPY = @as(c_int, 1);
pub const __CC_SUPPORTS_INLINE = @as(c_int, 1);
pub const __CC_SUPPORTS___INLINE = @as(c_int, 1);
pub const __CC_SUPPORTS___INLINE__ = @as(c_int, 1);
pub const __CC_SUPPORTS___FUNC__ = @as(c_int, 1);
pub const __CC_SUPPORTS_WARNING = @as(c_int, 1);
pub const __CC_SUPPORTS_VARADIC_XXX = @as(c_int, 1);
pub const __CC_SUPPORTS_DYNAMIC_ARRAY_INIT = @as(c_int, 1);
pub inline fn __P(protos: anytype) @TypeOf(protos) {
    return protos;
}
pub inline fn __CONCAT(x: anytype, y: anytype) @TypeOf(__CONCAT1(x, y)) {
    return __CONCAT1(x, y);
}
pub inline fn __XSTRING(x: anytype) @TypeOf(__STRING(x)) {
    return __STRING(x);
}
pub const __signed = c_int;
pub inline fn __unreachable() @TypeOf(__builtin_unreachable()) {
    return __builtin_unreachable();
}
pub inline fn __predict_true(exp: anytype) @TypeOf(__builtin_expect(exp, @as(c_int, 1))) {
    return __builtin_expect(exp, @as(c_int, 1));
}
pub inline fn __predict_false(exp: anytype) @TypeOf(__builtin_expect(exp, @as(c_int, 0))) {
    return __builtin_expect(exp, @as(c_int, 0));
}
pub inline fn __offsetof(@"type": anytype, field: anytype) @TypeOf(offsetof(@"type", field)) {
    return offsetof(@"type", field);
}
pub inline fn __rangeof(@"type": anytype, start: anytype, end: anytype) @TypeOf(__offsetof(@"type", end) - __offsetof(@"type", start)) {
    return __offsetof(@"type", end) - __offsetof(@"type", start);
}
pub const PICO_C_COMPILER_IS_CLANG = @as(c_int, 1);
pub const __isr = "";
pub inline fn __time_critical_func(func_name: anytype) @TypeOf(__not_in_flash_func(func_name)) {
    return __not_in_flash_func(func_name);
}
pub inline fn __no_inline_not_in_flash_func(func_name: anytype) @TypeOf((__noinline ++ __not_in_flash_func)(func_name)) {
    return (__noinline ++ __not_in_flash_func)(func_name);
}
pub const __packed_aligned = (__packed ++ __aligned)(@as(c_int, 4));
pub const __force_inline = __always_inline;
pub inline fn MAX(a: anytype, b: anytype) @TypeOf(if (a > b) a else b) {
    return if (a > b) a else b;
}
pub inline fn MIN(a: anytype, b: anytype) @TypeOf(if (b > a) a else b) {
    return if (b > a) a else b;
}
pub inline fn host_safe_hw_ptr(x: anytype) usize {
    return @import("std").zig.c_translation.cast(usize, x);
}
pub inline fn native_safe_hw_ptr(x: anytype) @TypeOf(host_safe_hw_ptr(x)) {
    return host_safe_hw_ptr(x);
}
pub const PICO_NO_FPGA_CHECK = @as(c_int, 0);
pub const _PICO_ERROR_H = "";
pub const _PICO_STDIO_H = "";
pub const PICO_STDOUT_MUTEX = @as(c_int, 1);
pub const PICO_STDIO_ENABLE_CRLF_SUPPORT = @as(c_int, 1);
pub const PICO_STDIO_DEFAULT_CRLF = @as(c_int, 1);
pub const PICO_STDIO_STACK_BUFFER_SIZE = @as(c_int, 128);
pub const PICO_STDIO_DEADLOCK_TIMEOUT_MS = @as(c_int, 1000);
pub const _PICO_TIME_H = "";
pub const _HARDWARE_TIMER_H = "";
pub const _HARDWARE_STRUCTS_TIMER_H = "";
pub const _HARDWARE_ADDRESS_MAPPED_H = "";
pub inline fn check_hw_layout(@"type": anytype, member: anytype, offset: anytype) @TypeOf(static_assert(offsetof(@"type", member) == offset, "hw offset mismatch")) {
    return static_assert(offsetof(@"type", member) == offset, "hw offset mismatch");
}
pub inline fn check_hw_size(@"type": anytype, size: anytype) @TypeOf(static_assert(@import("std").zig.c_translation.sizeof(@"type") == size, "hw size mismatch")) {
    _ = @TypeOf(@"type");
    return static_assert(@import("std").zig.c_translation.sizeof(@"type") == size, "hw size mismatch");
}
pub const PARAM_ASSERTIONS_ENABLED_ADDRESS_ALIAS = @as(c_int, 0);
pub inline fn hw_alias_check_addr(addr: anytype) usize {
    return @import("std").zig.c_translation.cast(usize, addr);
}
pub inline fn hw_set_alias_untyped(addr: anytype) ?*anyopaque {
    return @import("std").zig.c_translation.cast(?*anyopaque, REG_ALIAS_SET_BITS | hw_alias_check_addr(addr));
}
pub inline fn hw_clear_alias_untyped(addr: anytype) ?*anyopaque {
    return @import("std").zig.c_translation.cast(?*anyopaque, REG_ALIAS_CLR_BITS | hw_alias_check_addr(addr));
}
pub inline fn hw_xor_alias_untyped(addr: anytype) ?*anyopaque {
    return @import("std").zig.c_translation.cast(?*anyopaque, REG_ALIAS_XOR_BITS | hw_alias_check_addr(addr));
}
pub inline fn xip_noalloc_alias_untyped(addr: anytype) ?*anyopaque {
    return @import("std").zig.c_translation.cast(?*anyopaque, XIP_NOALLOC_BASE | xip_alias_check_addr(addr));
}
pub inline fn xip_nocache_alias_untyped(addr: anytype) ?*anyopaque {
    return @import("std").zig.c_translation.cast(?*anyopaque, XIP_NOCACHE_BASE | xip_alias_check_addr(addr));
}
pub inline fn xip_nocache_noalloc_alias_untyped(addr: anytype) ?*anyopaque {
    return @import("std").zig.c_translation.cast(?*anyopaque, XIP_NOCACHE_NOALLOC_BASE | xip_alias_check_addr(addr));
}
pub const HARDWARE_REGS_TIMER_DEFINED = "";
pub const TIMER_TIMEHW_OFFSET = _u(@as(c_int, 0x00000000));
pub const TIMER_TIMEHW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const TIMER_TIMEHW_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_TIMEHW_MSB = _u(@as(c_int, 31));
pub const TIMER_TIMEHW_LSB = _u(@as(c_int, 0));
pub const TIMER_TIMEHW_ACCESS = "WF";
pub const TIMER_TIMELW_OFFSET = _u(@as(c_int, 0x00000004));
pub const TIMER_TIMELW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const TIMER_TIMELW_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_TIMELW_MSB = _u(@as(c_int, 31));
pub const TIMER_TIMELW_LSB = _u(@as(c_int, 0));
pub const TIMER_TIMELW_ACCESS = "WF";
pub const TIMER_TIMEHR_OFFSET = _u(@as(c_int, 0x00000008));
pub const TIMER_TIMEHR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const TIMER_TIMEHR_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_TIMEHR_MSB = _u(@as(c_int, 31));
pub const TIMER_TIMEHR_LSB = _u(@as(c_int, 0));
pub const TIMER_TIMEHR_ACCESS = "RO";
pub const TIMER_TIMELR_OFFSET = _u(@as(c_int, 0x0000000c));
pub const TIMER_TIMELR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const TIMER_TIMELR_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_TIMELR_MSB = _u(@as(c_int, 31));
pub const TIMER_TIMELR_LSB = _u(@as(c_int, 0));
pub const TIMER_TIMELR_ACCESS = "RO";
pub const TIMER_ALARM0_OFFSET = _u(@as(c_int, 0x00000010));
pub const TIMER_ALARM0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const TIMER_ALARM0_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_ALARM0_MSB = _u(@as(c_int, 31));
pub const TIMER_ALARM0_LSB = _u(@as(c_int, 0));
pub const TIMER_ALARM0_ACCESS = "RW";
pub const TIMER_ALARM1_OFFSET = _u(@as(c_int, 0x00000014));
pub const TIMER_ALARM1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const TIMER_ALARM1_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_ALARM1_MSB = _u(@as(c_int, 31));
pub const TIMER_ALARM1_LSB = _u(@as(c_int, 0));
pub const TIMER_ALARM1_ACCESS = "RW";
pub const TIMER_ALARM2_OFFSET = _u(@as(c_int, 0x00000018));
pub const TIMER_ALARM2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const TIMER_ALARM2_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_ALARM2_MSB = _u(@as(c_int, 31));
pub const TIMER_ALARM2_LSB = _u(@as(c_int, 0));
pub const TIMER_ALARM2_ACCESS = "RW";
pub const TIMER_ALARM3_OFFSET = _u(@as(c_int, 0x0000001c));
pub const TIMER_ALARM3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const TIMER_ALARM3_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_ALARM3_MSB = _u(@as(c_int, 31));
pub const TIMER_ALARM3_LSB = _u(@as(c_int, 0));
pub const TIMER_ALARM3_ACCESS = "RW";
pub const TIMER_ARMED_OFFSET = _u(@as(c_int, 0x00000020));
pub const TIMER_ARMED_BITS = _u(@as(c_int, 0x0000000f));
pub const TIMER_ARMED_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_ARMED_MSB = _u(@as(c_int, 3));
pub const TIMER_ARMED_LSB = _u(@as(c_int, 0));
pub const TIMER_ARMED_ACCESS = "WC";
pub const TIMER_TIMERAWH_OFFSET = _u(@as(c_int, 0x00000024));
pub const TIMER_TIMERAWH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const TIMER_TIMERAWH_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_TIMERAWH_MSB = _u(@as(c_int, 31));
pub const TIMER_TIMERAWH_LSB = _u(@as(c_int, 0));
pub const TIMER_TIMERAWH_ACCESS = "RO";
pub const TIMER_TIMERAWL_OFFSET = _u(@as(c_int, 0x00000028));
pub const TIMER_TIMERAWL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const TIMER_TIMERAWL_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_TIMERAWL_MSB = _u(@as(c_int, 31));
pub const TIMER_TIMERAWL_LSB = _u(@as(c_int, 0));
pub const TIMER_TIMERAWL_ACCESS = "RO";
pub const TIMER_DBGPAUSE_OFFSET = _u(@as(c_int, 0x0000002c));
pub const TIMER_DBGPAUSE_BITS = _u(@as(c_int, 0x00000006));
pub const TIMER_DBGPAUSE_RESET = _u(@as(c_int, 0x00000007));
pub const TIMER_DBGPAUSE_DBG1_RESET = _u(@as(c_int, 0x1));
pub const TIMER_DBGPAUSE_DBG1_BITS = _u(@as(c_int, 0x00000004));
pub const TIMER_DBGPAUSE_DBG1_MSB = _u(@as(c_int, 2));
pub const TIMER_DBGPAUSE_DBG1_LSB = _u(@as(c_int, 2));
pub const TIMER_DBGPAUSE_DBG1_ACCESS = "RW";
pub const TIMER_DBGPAUSE_DBG0_RESET = _u(@as(c_int, 0x1));
pub const TIMER_DBGPAUSE_DBG0_BITS = _u(@as(c_int, 0x00000002));
pub const TIMER_DBGPAUSE_DBG0_MSB = _u(@as(c_int, 1));
pub const TIMER_DBGPAUSE_DBG0_LSB = _u(@as(c_int, 1));
pub const TIMER_DBGPAUSE_DBG0_ACCESS = "RW";
pub const TIMER_PAUSE_OFFSET = _u(@as(c_int, 0x00000030));
pub const TIMER_PAUSE_BITS = _u(@as(c_int, 0x00000001));
pub const TIMER_PAUSE_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_PAUSE_MSB = _u(@as(c_int, 0));
pub const TIMER_PAUSE_LSB = _u(@as(c_int, 0));
pub const TIMER_PAUSE_ACCESS = "RW";
pub const TIMER_INTR_OFFSET = _u(@as(c_int, 0x00000034));
pub const TIMER_INTR_BITS = _u(@as(c_int, 0x0000000f));
pub const TIMER_INTR_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_INTR_ALARM_3_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTR_ALARM_3_BITS = _u(@as(c_int, 0x00000008));
pub const TIMER_INTR_ALARM_3_MSB = _u(@as(c_int, 3));
pub const TIMER_INTR_ALARM_3_LSB = _u(@as(c_int, 3));
pub const TIMER_INTR_ALARM_3_ACCESS = "WC";
pub const TIMER_INTR_ALARM_2_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTR_ALARM_2_BITS = _u(@as(c_int, 0x00000004));
pub const TIMER_INTR_ALARM_2_MSB = _u(@as(c_int, 2));
pub const TIMER_INTR_ALARM_2_LSB = _u(@as(c_int, 2));
pub const TIMER_INTR_ALARM_2_ACCESS = "WC";
pub const TIMER_INTR_ALARM_1_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTR_ALARM_1_BITS = _u(@as(c_int, 0x00000002));
pub const TIMER_INTR_ALARM_1_MSB = _u(@as(c_int, 1));
pub const TIMER_INTR_ALARM_1_LSB = _u(@as(c_int, 1));
pub const TIMER_INTR_ALARM_1_ACCESS = "WC";
pub const TIMER_INTR_ALARM_0_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTR_ALARM_0_BITS = _u(@as(c_int, 0x00000001));
pub const TIMER_INTR_ALARM_0_MSB = _u(@as(c_int, 0));
pub const TIMER_INTR_ALARM_0_LSB = _u(@as(c_int, 0));
pub const TIMER_INTR_ALARM_0_ACCESS = "WC";
pub const TIMER_INTE_OFFSET = _u(@as(c_int, 0x00000038));
pub const TIMER_INTE_BITS = _u(@as(c_int, 0x0000000f));
pub const TIMER_INTE_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_INTE_ALARM_3_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTE_ALARM_3_BITS = _u(@as(c_int, 0x00000008));
pub const TIMER_INTE_ALARM_3_MSB = _u(@as(c_int, 3));
pub const TIMER_INTE_ALARM_3_LSB = _u(@as(c_int, 3));
pub const TIMER_INTE_ALARM_3_ACCESS = "RW";
pub const TIMER_INTE_ALARM_2_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTE_ALARM_2_BITS = _u(@as(c_int, 0x00000004));
pub const TIMER_INTE_ALARM_2_MSB = _u(@as(c_int, 2));
pub const TIMER_INTE_ALARM_2_LSB = _u(@as(c_int, 2));
pub const TIMER_INTE_ALARM_2_ACCESS = "RW";
pub const TIMER_INTE_ALARM_1_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTE_ALARM_1_BITS = _u(@as(c_int, 0x00000002));
pub const TIMER_INTE_ALARM_1_MSB = _u(@as(c_int, 1));
pub const TIMER_INTE_ALARM_1_LSB = _u(@as(c_int, 1));
pub const TIMER_INTE_ALARM_1_ACCESS = "RW";
pub const TIMER_INTE_ALARM_0_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTE_ALARM_0_BITS = _u(@as(c_int, 0x00000001));
pub const TIMER_INTE_ALARM_0_MSB = _u(@as(c_int, 0));
pub const TIMER_INTE_ALARM_0_LSB = _u(@as(c_int, 0));
pub const TIMER_INTE_ALARM_0_ACCESS = "RW";
pub const TIMER_INTF_OFFSET = _u(@as(c_int, 0x0000003c));
pub const TIMER_INTF_BITS = _u(@as(c_int, 0x0000000f));
pub const TIMER_INTF_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_INTF_ALARM_3_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTF_ALARM_3_BITS = _u(@as(c_int, 0x00000008));
pub const TIMER_INTF_ALARM_3_MSB = _u(@as(c_int, 3));
pub const TIMER_INTF_ALARM_3_LSB = _u(@as(c_int, 3));
pub const TIMER_INTF_ALARM_3_ACCESS = "RW";
pub const TIMER_INTF_ALARM_2_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTF_ALARM_2_BITS = _u(@as(c_int, 0x00000004));
pub const TIMER_INTF_ALARM_2_MSB = _u(@as(c_int, 2));
pub const TIMER_INTF_ALARM_2_LSB = _u(@as(c_int, 2));
pub const TIMER_INTF_ALARM_2_ACCESS = "RW";
pub const TIMER_INTF_ALARM_1_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTF_ALARM_1_BITS = _u(@as(c_int, 0x00000002));
pub const TIMER_INTF_ALARM_1_MSB = _u(@as(c_int, 1));
pub const TIMER_INTF_ALARM_1_LSB = _u(@as(c_int, 1));
pub const TIMER_INTF_ALARM_1_ACCESS = "RW";
pub const TIMER_INTF_ALARM_0_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTF_ALARM_0_BITS = _u(@as(c_int, 0x00000001));
pub const TIMER_INTF_ALARM_0_MSB = _u(@as(c_int, 0));
pub const TIMER_INTF_ALARM_0_LSB = _u(@as(c_int, 0));
pub const TIMER_INTF_ALARM_0_ACCESS = "RW";
pub const TIMER_INTS_OFFSET = _u(@as(c_int, 0x00000040));
pub const TIMER_INTS_BITS = _u(@as(c_int, 0x0000000f));
pub const TIMER_INTS_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_INTS_ALARM_3_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTS_ALARM_3_BITS = _u(@as(c_int, 0x00000008));
pub const TIMER_INTS_ALARM_3_MSB = _u(@as(c_int, 3));
pub const TIMER_INTS_ALARM_3_LSB = _u(@as(c_int, 3));
pub const TIMER_INTS_ALARM_3_ACCESS = "RO";
pub const TIMER_INTS_ALARM_2_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTS_ALARM_2_BITS = _u(@as(c_int, 0x00000004));
pub const TIMER_INTS_ALARM_2_MSB = _u(@as(c_int, 2));
pub const TIMER_INTS_ALARM_2_LSB = _u(@as(c_int, 2));
pub const TIMER_INTS_ALARM_2_ACCESS = "RO";
pub const TIMER_INTS_ALARM_1_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTS_ALARM_1_BITS = _u(@as(c_int, 0x00000002));
pub const TIMER_INTS_ALARM_1_MSB = _u(@as(c_int, 1));
pub const TIMER_INTS_ALARM_1_LSB = _u(@as(c_int, 1));
pub const TIMER_INTS_ALARM_1_ACCESS = "RO";
pub const TIMER_INTS_ALARM_0_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTS_ALARM_0_BITS = _u(@as(c_int, 0x00000001));
pub const TIMER_INTS_ALARM_0_MSB = _u(@as(c_int, 0));
pub const TIMER_INTS_ALARM_0_LSB = _u(@as(c_int, 0));
pub const TIMER_INTS_ALARM_0_ACCESS = "RO";
pub const timer_hw = @import("std").zig.c_translation.cast([*c]timer_hw_t, TIMER_BASE);
pub const PARAM_ASSERTIONS_ENABLED_TIMER = @as(c_int, 0);
pub const PARAM_ASSERTIONS_ENABLED_TIME = @as(c_int, 0);
pub const PICO_TIME_SLEEP_OVERHEAD_ADJUST_US = @as(c_int, 6);
pub const PICO_TIME_DEFAULT_ALARM_POOL_DISABLED = @as(c_int, 0);
pub const PICO_TIME_DEFAULT_ALARM_POOL_HARDWARE_ALARM_NUM = @as(c_int, 3);
pub const PICO_TIME_DEFAULT_ALARM_POOL_MAX_TIMERS = @as(c_int, 16);
pub const _HARDWARE_GPIO_H = "";
pub const _HARDWARE_STRUCTS_SIO_H = "";
pub const _HARDWARE_STRUCTS_INTERP_H = "";
pub const interp_hw_array = @import("std").zig.c_translation.cast([*c]interp_hw_t, SIO_BASE + SIO_INTERP0_ACCUM0_OFFSET);
pub const interp0_hw = &interp_hw_array[@as(usize, @intCast(@as(c_int, 0)))];
pub const interp1_hw = &interp_hw_array[@as(usize, @intCast(@as(c_int, 1)))];
pub const sio_hw = @import("std").zig.c_translation.cast([*c]sio_hw_t, SIO_BASE);
pub const _HARDWARE_STRUCTS_PADSBANK0_H = "";
pub const HARDWARE_REGS_PADS_BANK0_DEFINED = "";
pub const PADS_BANK0_VOLTAGE_SELECT_OFFSET = _u(@as(c_int, 0x00000000));
pub const PADS_BANK0_VOLTAGE_SELECT_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_VOLTAGE_SELECT_RESET = _u(@as(c_int, 0x00000000));
pub const PADS_BANK0_VOLTAGE_SELECT_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_VOLTAGE_SELECT_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_VOLTAGE_SELECT_ACCESS = "RW";
pub const PADS_BANK0_VOLTAGE_SELECT_VALUE_3V3 = _u(@as(c_int, 0x0));
pub const PADS_BANK0_VOLTAGE_SELECT_VALUE_1V8 = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO0_OFFSET = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO0_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO0_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO0_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO0_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO0_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO0_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO0_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO0_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO0_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO0_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO0_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO0_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO0_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO0_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO0_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO0_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO0_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO0_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO0_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO0_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO0_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO0_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO0_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO0_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO0_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO0_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO0_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO0_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO0_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO0_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO0_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO0_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO0_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO0_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO0_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO0_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO0_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO0_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO0_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO0_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO0_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO1_OFFSET = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO1_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO1_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO1_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO1_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO1_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO1_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO1_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO1_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO1_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO1_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO1_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO1_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO1_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO1_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO1_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO1_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO1_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO1_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO1_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO1_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO1_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO1_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO1_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO1_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO1_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO1_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO1_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO1_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO1_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO1_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO1_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO1_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO1_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO1_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO1_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO1_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO1_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO1_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO1_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO1_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO1_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO2_OFFSET = _u(@as(c_int, 0x0000000c));
pub const PADS_BANK0_GPIO2_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO2_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO2_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO2_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO2_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO2_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO2_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO2_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO2_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO2_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO2_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO2_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO2_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO2_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO2_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO2_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO2_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO2_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO2_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO2_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO2_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO2_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO2_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO2_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO2_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO2_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO2_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO2_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO2_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO2_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO2_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO2_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO2_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO2_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO2_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO2_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO2_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO2_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO2_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO2_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO2_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO3_OFFSET = _u(@as(c_int, 0x00000010));
pub const PADS_BANK0_GPIO3_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO3_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO3_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO3_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO3_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO3_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO3_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO3_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO3_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO3_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO3_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO3_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO3_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO3_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO3_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO3_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO3_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO3_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO3_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO3_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO3_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO3_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO3_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO3_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO3_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO3_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO3_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO3_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO3_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO3_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO3_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO3_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO3_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO3_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO3_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO3_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO3_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO3_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO3_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO3_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO3_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO4_OFFSET = _u(@as(c_int, 0x00000014));
pub const PADS_BANK0_GPIO4_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO4_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO4_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO4_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO4_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO4_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO4_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO4_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO4_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO4_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO4_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO4_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO4_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO4_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO4_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO4_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO4_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO4_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO4_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO4_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO4_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO4_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO4_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO4_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO4_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO4_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO4_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO4_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO4_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO4_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO4_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO4_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO4_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO4_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO4_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO4_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO4_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO4_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO4_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO4_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO4_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO5_OFFSET = _u(@as(c_int, 0x00000018));
pub const PADS_BANK0_GPIO5_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO5_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO5_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO5_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO5_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO5_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO5_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO5_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO5_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO5_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO5_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO5_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO5_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO5_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO5_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO5_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO5_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO5_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO5_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO5_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO5_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO5_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO5_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO5_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO5_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO5_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO5_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO5_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO5_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO5_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO5_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO5_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO5_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO5_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO5_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO5_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO5_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO5_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO5_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO5_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO5_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO6_OFFSET = _u(@as(c_int, 0x0000001c));
pub const PADS_BANK0_GPIO6_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO6_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO6_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO6_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO6_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO6_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO6_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO6_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO6_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO6_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO6_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO6_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO6_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO6_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO6_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO6_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO6_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO6_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO6_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO6_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO6_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO6_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO6_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO6_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO6_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO6_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO6_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO6_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO6_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO6_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO6_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO6_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO6_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO6_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO6_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO6_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO6_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO6_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO6_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO6_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO6_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO7_OFFSET = _u(@as(c_int, 0x00000020));
pub const PADS_BANK0_GPIO7_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO7_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO7_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO7_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO7_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO7_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO7_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO7_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO7_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO7_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO7_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO7_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO7_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO7_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO7_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO7_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO7_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO7_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO7_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO7_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO7_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO7_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO7_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO7_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO7_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO7_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO7_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO7_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO7_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO7_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO7_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO7_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO7_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO7_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO7_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO7_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO7_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO7_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO7_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO7_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO7_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO8_OFFSET = _u(@as(c_int, 0x00000024));
pub const PADS_BANK0_GPIO8_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO8_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO8_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO8_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO8_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO8_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO8_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO8_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO8_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO8_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO8_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO8_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO8_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO8_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO8_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO8_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO8_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO8_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO8_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO8_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO8_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO8_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO8_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO8_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO8_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO8_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO8_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO8_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO8_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO8_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO8_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO8_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO8_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO8_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO8_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO8_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO8_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO8_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO8_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO8_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO8_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO9_OFFSET = _u(@as(c_int, 0x00000028));
pub const PADS_BANK0_GPIO9_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO9_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO9_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO9_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO9_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO9_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO9_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO9_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO9_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO9_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO9_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO9_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO9_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO9_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO9_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO9_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO9_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO9_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO9_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO9_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO9_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO9_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO9_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO9_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO9_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO9_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO9_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO9_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO9_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO9_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO9_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO9_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO9_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO9_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO9_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO9_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO9_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO9_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO9_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO9_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO9_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO10_OFFSET = _u(@as(c_int, 0x0000002c));
pub const PADS_BANK0_GPIO10_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO10_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO10_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO10_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO10_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO10_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO10_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO10_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO10_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO10_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO10_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO10_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO10_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO10_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO10_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO10_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO10_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO10_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO10_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO10_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO10_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO10_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO10_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO10_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO10_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO10_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO10_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO10_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO10_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO10_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO10_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO10_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO10_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO10_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO10_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO10_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO10_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO10_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO10_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO10_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO10_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO11_OFFSET = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO11_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO11_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO11_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO11_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO11_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO11_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO11_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO11_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO11_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO11_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO11_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO11_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO11_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO11_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO11_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO11_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO11_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO11_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO11_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO11_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO11_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO11_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO11_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO11_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO11_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO11_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO11_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO11_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO11_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO11_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO11_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO11_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO11_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO11_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO11_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO11_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO11_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO11_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO11_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO11_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO11_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO12_OFFSET = _u(@as(c_int, 0x00000034));
pub const PADS_BANK0_GPIO12_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO12_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO12_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO12_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO12_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO12_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO12_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO12_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO12_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO12_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO12_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO12_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO12_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO12_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO12_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO12_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO12_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO12_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO12_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO12_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO12_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO12_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO12_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO12_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO12_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO12_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO12_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO12_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO12_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO12_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO12_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO12_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO12_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO12_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO12_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO12_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO12_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO12_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO12_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO12_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO12_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO13_OFFSET = _u(@as(c_int, 0x00000038));
pub const PADS_BANK0_GPIO13_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO13_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO13_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO13_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO13_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO13_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO13_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO13_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO13_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO13_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO13_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO13_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO13_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO13_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO13_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO13_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO13_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO13_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO13_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO13_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO13_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO13_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO13_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO13_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO13_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO13_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO13_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO13_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO13_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO13_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO13_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO13_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO13_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO13_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO13_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO13_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO13_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO13_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO13_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO13_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO13_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO14_OFFSET = _u(@as(c_int, 0x0000003c));
pub const PADS_BANK0_GPIO14_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO14_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO14_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO14_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO14_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO14_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO14_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO14_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO14_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO14_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO14_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO14_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO14_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO14_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO14_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO14_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO14_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO14_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO14_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO14_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO14_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO14_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO14_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO14_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO14_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO14_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO14_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO14_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO14_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO14_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO14_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO14_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO14_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO14_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO14_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO14_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO14_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO14_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO14_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO14_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO14_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO15_OFFSET = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO15_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO15_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO15_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO15_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO15_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO15_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO15_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO15_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO15_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO15_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO15_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO15_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO15_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO15_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO15_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO15_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO15_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO15_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO15_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO15_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO15_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO15_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO15_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO15_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO15_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO15_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO15_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO15_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO15_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO15_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO15_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO15_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO15_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO15_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO15_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO15_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO15_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO15_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO15_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO15_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO15_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO16_OFFSET = _u(@as(c_int, 0x00000044));
pub const PADS_BANK0_GPIO16_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO16_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO16_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO16_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO16_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO16_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO16_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO16_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO16_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO16_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO16_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO16_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO16_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO16_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO16_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO16_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO16_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO16_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO16_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO16_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO16_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO16_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO16_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO16_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO16_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO16_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO16_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO16_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO16_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO16_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO16_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO16_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO16_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO16_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO16_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO16_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO16_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO16_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO16_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO16_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO16_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO17_OFFSET = _u(@as(c_int, 0x00000048));
pub const PADS_BANK0_GPIO17_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO17_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO17_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO17_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO17_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO17_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO17_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO17_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO17_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO17_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO17_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO17_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO17_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO17_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO17_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO17_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO17_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO17_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO17_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO17_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO17_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO17_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO17_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO17_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO17_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO17_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO17_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO17_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO17_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO17_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO17_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO17_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO17_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO17_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO17_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO17_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO17_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO17_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO17_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO17_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO17_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO18_OFFSET = _u(@as(c_int, 0x0000004c));
pub const PADS_BANK0_GPIO18_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO18_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO18_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO18_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO18_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO18_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO18_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO18_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO18_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO18_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO18_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO18_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO18_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO18_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO18_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO18_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO18_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO18_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO18_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO18_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO18_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO18_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO18_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO18_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO18_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO18_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO18_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO18_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO18_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO18_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO18_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO18_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO18_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO18_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO18_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO18_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO18_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO18_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO18_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO18_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO18_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO19_OFFSET = _u(@as(c_int, 0x00000050));
pub const PADS_BANK0_GPIO19_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO19_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO19_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO19_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO19_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO19_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO19_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO19_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO19_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO19_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO19_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO19_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO19_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO19_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO19_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO19_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO19_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO19_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO19_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO19_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO19_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO19_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO19_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO19_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO19_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO19_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO19_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO19_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO19_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO19_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO19_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO19_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO19_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO19_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO19_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO19_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO19_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO19_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO19_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO19_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO19_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO20_OFFSET = _u(@as(c_int, 0x00000054));
pub const PADS_BANK0_GPIO20_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO20_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO20_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO20_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO20_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO20_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO20_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO20_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO20_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO20_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO20_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO20_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO20_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO20_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO20_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO20_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO20_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO20_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO20_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO20_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO20_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO20_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO20_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO20_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO20_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO20_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO20_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO20_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO20_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO20_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO20_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO20_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO20_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO20_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO20_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO20_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO20_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO20_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO20_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO20_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO20_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO21_OFFSET = _u(@as(c_int, 0x00000058));
pub const PADS_BANK0_GPIO21_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO21_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO21_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO21_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO21_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO21_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO21_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO21_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO21_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO21_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO21_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO21_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO21_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO21_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO21_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO21_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO21_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO21_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO21_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO21_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO21_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO21_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO21_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO21_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO21_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO21_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO21_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO21_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO21_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO21_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO21_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO21_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO21_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO21_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO21_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO21_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO21_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO21_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO21_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO21_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO21_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO22_OFFSET = _u(@as(c_int, 0x0000005c));
pub const PADS_BANK0_GPIO22_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO22_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO22_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO22_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO22_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO22_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO22_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO22_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO22_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO22_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO22_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO22_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO22_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO22_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO22_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO22_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO22_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO22_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO22_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO22_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO22_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO22_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO22_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO22_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO22_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO22_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO22_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO22_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO22_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO22_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO22_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO22_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO22_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO22_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO22_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO22_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO22_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO22_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO22_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO22_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO22_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO23_OFFSET = _u(@as(c_int, 0x00000060));
pub const PADS_BANK0_GPIO23_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO23_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO23_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO23_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO23_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO23_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO23_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO23_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO23_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO23_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO23_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO23_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO23_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO23_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO23_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO23_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO23_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO23_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO23_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO23_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO23_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO23_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO23_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO23_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO23_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO23_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO23_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO23_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO23_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO23_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO23_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO23_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO23_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO23_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO23_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO23_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO23_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO23_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO23_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO23_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO23_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO24_OFFSET = _u(@as(c_int, 0x00000064));
pub const PADS_BANK0_GPIO24_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO24_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO24_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO24_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO24_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO24_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO24_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO24_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO24_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO24_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO24_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO24_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO24_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO24_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO24_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO24_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO24_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO24_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO24_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO24_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO24_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO24_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO24_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO24_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO24_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO24_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO24_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO24_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO24_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO24_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO24_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO24_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO24_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO24_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO24_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO24_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO24_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO24_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO24_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO24_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO24_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO25_OFFSET = _u(@as(c_int, 0x00000068));
pub const PADS_BANK0_GPIO25_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO25_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO25_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO25_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO25_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO25_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO25_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO25_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO25_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO25_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO25_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO25_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO25_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO25_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO25_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO25_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO25_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO25_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO25_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO25_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO25_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO25_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO25_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO25_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO25_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO25_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO25_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO25_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO25_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO25_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO25_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO25_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO25_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO25_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO25_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO25_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO25_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO25_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO25_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO25_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO25_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO26_OFFSET = _u(@as(c_int, 0x0000006c));
pub const PADS_BANK0_GPIO26_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO26_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO26_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO26_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO26_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO26_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO26_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO26_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO26_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO26_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO26_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO26_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO26_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO26_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO26_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO26_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO26_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO26_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO26_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO26_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO26_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO26_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO26_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO26_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO26_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO26_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO26_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO26_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO26_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO26_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO26_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO26_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO26_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO26_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO26_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO26_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO26_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO26_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO26_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO26_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO26_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO27_OFFSET = _u(@as(c_int, 0x00000070));
pub const PADS_BANK0_GPIO27_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO27_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO27_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO27_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO27_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO27_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO27_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO27_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO27_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO27_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO27_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO27_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO27_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO27_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO27_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO27_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO27_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO27_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO27_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO27_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO27_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO27_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO27_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO27_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO27_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO27_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO27_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO27_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO27_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO27_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO27_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO27_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO27_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO27_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO27_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO27_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO27_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO27_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO27_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO27_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO27_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO28_OFFSET = _u(@as(c_int, 0x00000074));
pub const PADS_BANK0_GPIO28_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO28_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO28_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO28_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO28_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO28_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO28_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO28_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO28_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO28_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO28_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO28_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO28_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO28_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO28_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO28_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO28_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO28_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO28_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO28_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO28_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO28_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO28_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO28_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO28_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO28_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO28_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO28_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO28_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO28_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO28_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO28_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO28_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO28_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO28_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO28_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO28_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO28_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO28_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO28_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO28_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO29_OFFSET = _u(@as(c_int, 0x00000078));
pub const PADS_BANK0_GPIO29_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_GPIO29_RESET = _u(@as(c_int, 0x00000056));
pub const PADS_BANK0_GPIO29_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO29_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO29_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO29_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO29_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO29_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO29_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO29_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO29_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO29_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO29_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO29_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO29_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO29_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO29_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO29_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO29_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO29_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO29_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO29_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO29_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO29_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO29_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO29_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO29_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO29_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO29_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO29_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO29_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO29_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO29_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO29_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO29_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO29_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO29_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO29_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO29_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO29_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO29_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_SWCLK_OFFSET = _u(@as(c_int, 0x0000007c));
pub const PADS_BANK0_SWCLK_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_SWCLK_RESET = _u(@as(c_int, 0x000000da));
pub const PADS_BANK0_SWCLK_OD_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWCLK_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_SWCLK_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_SWCLK_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_SWCLK_OD_ACCESS = "RW";
pub const PADS_BANK0_SWCLK_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWCLK_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_SWCLK_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_SWCLK_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_SWCLK_IE_ACCESS = "RW";
pub const PADS_BANK0_SWCLK_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWCLK_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_SWCLK_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_SWCLK_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_SWCLK_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_SWCLK_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_SWCLK_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWCLK_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_SWCLK_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_SWCLK_PUE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWCLK_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_SWCLK_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_SWCLK_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_SWCLK_PUE_ACCESS = "RW";
pub const PADS_BANK0_SWCLK_PDE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_SWCLK_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_SWCLK_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_SWCLK_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_SWCLK_PDE_ACCESS = "RW";
pub const PADS_BANK0_SWCLK_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWCLK_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_SWCLK_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_SWCLK_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_SWCLK_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_SWCLK_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_SWCLK_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_SWCLK_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_SWCLK_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_SWCLK_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_SWD_OFFSET = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_SWD_BITS = _u(@as(c_int, 0x000000ff));
pub const PADS_BANK0_SWD_RESET = _u(@as(c_int, 0x0000005a));
pub const PADS_BANK0_SWD_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_SWD_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_SWD_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_SWD_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_SWD_OD_ACCESS = "RW";
pub const PADS_BANK0_SWD_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWD_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_SWD_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_SWD_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_SWD_IE_ACCESS = "RW";
pub const PADS_BANK0_SWD_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWD_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_SWD_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_SWD_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_SWD_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_SWD_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_SWD_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWD_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_SWD_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_SWD_PUE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWD_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_SWD_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_SWD_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_SWD_PUE_ACCESS = "RW";
pub const PADS_BANK0_SWD_PDE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_SWD_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_SWD_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_SWD_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_SWD_PDE_ACCESS = "RW";
pub const PADS_BANK0_SWD_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWD_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_SWD_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_SWD_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_SWD_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_SWD_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_SWD_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_SWD_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_SWD_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_SWD_SLEWFAST_ACCESS = "RW";
pub const padsbank0_hw = @import("std").zig.c_translation.cast([*c]padsbank0_hw_t, PADS_BANK0_BASE);
pub const _HARDWARE_STRUCTS_IOBANK0_H = "";
pub const HARDWARE_REGS_IO_BANK0_DEFINED = "";
pub const IO_BANK0_GPIO0_STATUS_OFFSET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO0_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO0_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO0_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO0_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO0_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO0_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO0_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO0_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO0_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO0_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO0_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO0_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO0_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO0_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO0_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO0_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO0_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO0_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO0_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO0_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO0_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO0_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO0_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO0_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO0_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO0_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO0_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO0_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO0_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO0_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO0_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO0_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO0_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO0_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO0_CTRL_OFFSET = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_GPIO0_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO0_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO0_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO0_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO0_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO0_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO0_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO0_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO0_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO0_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO0_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO0_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO0_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO0_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO0_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO0_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO0_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO0_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO0_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO0_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO0_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO0_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO0_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO0_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO0_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO0_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO0_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO0_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO0_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO0_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_JTAG_TCK = _u(@as(c_int, 0x00));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_SPI0_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_UART0_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_PWM_A_0 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_SIO_0 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_PIO0_0 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_PIO1_0 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO1_STATUS_OFFSET = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_GPIO1_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO1_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO1_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO1_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO1_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO1_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO1_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO1_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO1_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO1_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO1_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO1_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO1_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO1_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO1_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO1_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO1_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO1_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO1_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO1_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO1_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO1_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO1_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO1_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO1_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO1_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO1_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO1_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO1_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO1_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO1_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO1_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO1_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO1_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO1_CTRL_OFFSET = _u(@as(c_int, 0x0000000c));
pub const IO_BANK0_GPIO1_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO1_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO1_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO1_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO1_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO1_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO1_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO1_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO1_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO1_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO1_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO1_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO1_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO1_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO1_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO1_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO1_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO1_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO1_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO1_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO1_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO1_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO1_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO1_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO1_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO1_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO1_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO1_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO1_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO1_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_JTAG_TMS = _u(@as(c_int, 0x00));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_SPI0_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_UART0_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_PWM_B_0 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_SIO_1 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_PIO0_1 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_PIO1_1 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO2_STATUS_OFFSET = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_GPIO2_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO2_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO2_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO2_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO2_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO2_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO2_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO2_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO2_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO2_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO2_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO2_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO2_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO2_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO2_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO2_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO2_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO2_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO2_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO2_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO2_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO2_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO2_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO2_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO2_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO2_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO2_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO2_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO2_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO2_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO2_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO2_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO2_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO2_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO2_CTRL_OFFSET = _u(@as(c_int, 0x00000014));
pub const IO_BANK0_GPIO2_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO2_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO2_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO2_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO2_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO2_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO2_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO2_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO2_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO2_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO2_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO2_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO2_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO2_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO2_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO2_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO2_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO2_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO2_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO2_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO2_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO2_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO2_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO2_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO2_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO2_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO2_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO2_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO2_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO2_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_JTAG_TDI = _u(@as(c_int, 0x00));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_SPI0_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_UART0_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_PWM_A_1 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_SIO_2 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_PIO0_2 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_PIO1_2 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO3_STATUS_OFFSET = _u(@as(c_int, 0x00000018));
pub const IO_BANK0_GPIO3_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO3_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO3_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO3_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO3_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO3_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO3_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO3_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO3_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO3_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO3_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO3_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO3_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO3_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO3_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO3_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO3_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO3_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO3_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO3_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO3_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO3_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO3_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO3_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO3_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO3_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO3_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO3_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO3_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO3_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO3_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO3_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO3_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO3_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO3_CTRL_OFFSET = _u(@as(c_int, 0x0000001c));
pub const IO_BANK0_GPIO3_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO3_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO3_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO3_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO3_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO3_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO3_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO3_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO3_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO3_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO3_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO3_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO3_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO3_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO3_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO3_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO3_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO3_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO3_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO3_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO3_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO3_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO3_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO3_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO3_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO3_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO3_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO3_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO3_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO3_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_JTAG_TDO = _u(@as(c_int, 0x00));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_SPI0_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_UART0_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_PWM_B_1 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_SIO_3 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_PIO0_3 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_PIO1_3 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO4_STATUS_OFFSET = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_GPIO4_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO4_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO4_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO4_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO4_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO4_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO4_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO4_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO4_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO4_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO4_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO4_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO4_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO4_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO4_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO4_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO4_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO4_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO4_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO4_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO4_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO4_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO4_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO4_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO4_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO4_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO4_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO4_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO4_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO4_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO4_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO4_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO4_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO4_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO4_CTRL_OFFSET = _u(@as(c_int, 0x00000024));
pub const IO_BANK0_GPIO4_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO4_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO4_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO4_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO4_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO4_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO4_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO4_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO4_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO4_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO4_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO4_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO4_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO4_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO4_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO4_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO4_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO4_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO4_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO4_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO4_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO4_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO4_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO4_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO4_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO4_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO4_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO4_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO4_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO4_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_SPI0_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_UART1_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_PWM_A_2 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_SIO_4 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_PIO0_4 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_PIO1_4 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO5_STATUS_OFFSET = _u(@as(c_int, 0x00000028));
pub const IO_BANK0_GPIO5_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO5_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO5_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO5_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO5_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO5_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO5_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO5_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO5_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO5_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO5_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO5_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO5_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO5_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO5_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO5_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO5_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO5_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO5_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO5_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO5_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO5_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO5_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO5_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO5_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO5_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO5_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO5_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO5_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO5_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO5_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO5_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO5_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO5_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO5_CTRL_OFFSET = _u(@as(c_int, 0x0000002c));
pub const IO_BANK0_GPIO5_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO5_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO5_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO5_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO5_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO5_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO5_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO5_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO5_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO5_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO5_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO5_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO5_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO5_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO5_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO5_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO5_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO5_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO5_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO5_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO5_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO5_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO5_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO5_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO5_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO5_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO5_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO5_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO5_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO5_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_SPI0_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_UART1_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_PWM_B_2 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_SIO_5 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_PIO0_5 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_PIO1_5 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO6_STATUS_OFFSET = _u(@as(c_int, 0x00000030));
pub const IO_BANK0_GPIO6_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO6_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO6_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO6_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO6_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO6_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO6_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO6_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO6_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO6_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO6_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO6_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO6_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO6_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO6_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO6_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO6_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO6_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO6_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO6_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO6_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO6_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO6_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO6_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO6_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO6_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO6_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO6_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO6_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO6_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO6_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO6_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO6_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO6_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO6_CTRL_OFFSET = _u(@as(c_int, 0x00000034));
pub const IO_BANK0_GPIO6_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO6_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO6_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO6_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO6_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO6_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO6_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO6_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO6_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO6_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO6_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO6_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO6_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO6_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO6_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO6_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO6_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO6_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO6_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO6_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO6_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO6_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO6_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO6_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO6_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO6_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO6_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO6_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO6_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO6_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_SPI0_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_UART1_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_PWM_A_3 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_SIO_6 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_PIO0_6 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_PIO1_6 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_SOFTCON = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO7_STATUS_OFFSET = _u(@as(c_int, 0x00000038));
pub const IO_BANK0_GPIO7_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO7_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO7_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO7_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO7_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO7_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO7_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO7_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO7_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO7_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO7_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO7_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO7_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO7_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO7_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO7_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO7_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO7_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO7_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO7_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO7_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO7_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO7_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO7_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO7_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO7_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO7_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO7_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO7_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO7_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO7_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO7_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO7_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO7_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO7_CTRL_OFFSET = _u(@as(c_int, 0x0000003c));
pub const IO_BANK0_GPIO7_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO7_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO7_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO7_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO7_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO7_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO7_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO7_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO7_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO7_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO7_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO7_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO7_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO7_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO7_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO7_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO7_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO7_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO7_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO7_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO7_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO7_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO7_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO7_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO7_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO7_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO7_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO7_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO7_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO7_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_SPI0_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_UART1_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_PWM_B_3 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_SIO_7 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_PIO0_7 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_PIO1_7 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_OE_N = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO8_STATUS_OFFSET = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_GPIO8_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO8_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO8_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO8_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO8_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO8_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO8_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO8_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO8_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO8_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO8_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO8_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO8_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO8_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO8_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO8_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO8_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO8_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO8_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO8_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO8_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO8_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO8_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO8_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO8_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO8_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO8_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO8_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO8_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO8_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO8_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO8_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO8_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO8_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO8_CTRL_OFFSET = _u(@as(c_int, 0x00000044));
pub const IO_BANK0_GPIO8_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO8_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO8_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO8_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO8_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO8_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO8_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO8_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO8_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO8_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO8_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO8_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO8_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO8_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO8_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO8_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO8_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO8_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO8_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO8_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO8_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO8_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO8_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO8_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO8_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO8_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO8_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO8_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO8_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO8_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_SPI1_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_UART1_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_PWM_A_4 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_SIO_8 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_PIO0_8 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_PIO1_8 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_RCV = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO9_STATUS_OFFSET = _u(@as(c_int, 0x00000048));
pub const IO_BANK0_GPIO9_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO9_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO9_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO9_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO9_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO9_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO9_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO9_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO9_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO9_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO9_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO9_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO9_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO9_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO9_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO9_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO9_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO9_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO9_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO9_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO9_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO9_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO9_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO9_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO9_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO9_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO9_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO9_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO9_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO9_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO9_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO9_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO9_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO9_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO9_CTRL_OFFSET = _u(@as(c_int, 0x0000004c));
pub const IO_BANK0_GPIO9_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO9_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO9_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO9_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO9_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO9_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO9_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO9_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO9_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO9_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO9_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO9_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO9_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO9_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO9_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO9_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO9_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO9_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO9_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO9_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO9_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO9_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO9_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO9_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO9_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO9_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO9_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO9_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO9_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO9_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_SPI1_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_UART1_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_PWM_B_4 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_SIO_9 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_PIO0_9 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_PIO1_9 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_VP = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO10_STATUS_OFFSET = _u(@as(c_int, 0x00000050));
pub const IO_BANK0_GPIO10_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO10_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO10_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO10_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO10_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO10_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO10_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO10_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO10_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO10_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO10_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO10_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO10_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO10_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO10_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO10_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO10_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO10_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO10_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO10_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO10_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO10_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO10_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO10_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO10_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO10_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO10_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO10_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO10_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO10_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO10_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO10_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO10_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO10_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO10_CTRL_OFFSET = _u(@as(c_int, 0x00000054));
pub const IO_BANK0_GPIO10_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO10_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO10_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO10_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO10_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO10_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO10_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO10_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO10_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO10_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO10_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO10_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO10_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO10_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO10_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO10_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO10_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO10_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO10_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO10_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO10_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO10_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO10_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO10_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO10_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO10_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO10_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO10_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO10_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO10_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_SPI1_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_UART1_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_PWM_A_5 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_SIO_10 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_PIO0_10 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_PIO1_10 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_VM = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO11_STATUS_OFFSET = _u(@as(c_int, 0x00000058));
pub const IO_BANK0_GPIO11_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO11_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO11_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO11_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO11_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO11_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO11_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO11_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO11_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO11_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO11_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO11_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO11_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO11_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO11_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO11_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO11_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO11_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO11_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO11_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO11_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO11_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO11_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO11_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO11_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO11_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO11_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO11_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO11_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO11_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO11_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO11_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO11_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO11_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO11_CTRL_OFFSET = _u(@as(c_int, 0x0000005c));
pub const IO_BANK0_GPIO11_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO11_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO11_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO11_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO11_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO11_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO11_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO11_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO11_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO11_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO11_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO11_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO11_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO11_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO11_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO11_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO11_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO11_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO11_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO11_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO11_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO11_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO11_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO11_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO11_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO11_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO11_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO11_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO11_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO11_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_SPI1_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_UART1_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_PWM_B_5 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_SIO_11 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_PIO0_11 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_PIO1_11 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_SUSPND = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO12_STATUS_OFFSET = _u(@as(c_int, 0x00000060));
pub const IO_BANK0_GPIO12_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO12_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO12_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO12_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO12_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO12_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO12_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO12_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO12_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO12_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO12_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO12_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO12_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO12_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO12_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO12_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO12_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO12_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO12_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO12_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO12_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO12_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO12_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO12_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO12_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO12_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO12_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO12_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO12_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO12_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO12_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO12_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO12_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO12_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO12_CTRL_OFFSET = _u(@as(c_int, 0x00000064));
pub const IO_BANK0_GPIO12_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO12_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO12_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO12_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO12_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO12_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO12_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO12_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO12_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO12_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO12_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO12_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO12_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO12_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO12_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO12_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO12_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO12_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO12_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO12_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO12_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO12_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO12_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO12_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO12_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO12_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO12_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO12_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO12_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO12_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_SPI1_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_UART0_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_PWM_A_6 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_SIO_12 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_PIO0_12 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_PIO1_12 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_SPEED = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO13_STATUS_OFFSET = _u(@as(c_int, 0x00000068));
pub const IO_BANK0_GPIO13_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO13_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO13_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO13_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO13_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO13_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO13_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO13_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO13_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO13_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO13_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO13_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO13_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO13_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO13_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO13_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO13_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO13_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO13_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO13_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO13_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO13_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO13_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO13_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO13_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO13_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO13_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO13_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO13_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO13_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO13_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO13_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO13_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO13_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO13_CTRL_OFFSET = _u(@as(c_int, 0x0000006c));
pub const IO_BANK0_GPIO13_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO13_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO13_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO13_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO13_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO13_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO13_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO13_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO13_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO13_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO13_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO13_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO13_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO13_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO13_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO13_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO13_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO13_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO13_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO13_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO13_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO13_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO13_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO13_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO13_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO13_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO13_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO13_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO13_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO13_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_SPI1_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_UART0_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_PWM_B_6 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_SIO_13 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_PIO0_13 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_PIO1_13 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_VPO = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO14_STATUS_OFFSET = _u(@as(c_int, 0x00000070));
pub const IO_BANK0_GPIO14_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO14_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO14_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO14_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO14_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO14_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO14_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO14_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO14_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO14_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO14_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO14_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO14_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO14_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO14_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO14_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO14_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO14_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO14_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO14_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO14_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO14_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO14_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO14_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO14_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO14_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO14_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO14_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO14_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO14_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO14_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO14_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO14_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO14_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO14_CTRL_OFFSET = _u(@as(c_int, 0x00000074));
pub const IO_BANK0_GPIO14_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO14_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO14_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO14_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO14_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO14_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO14_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO14_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO14_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO14_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO14_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO14_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO14_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO14_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO14_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO14_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO14_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO14_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO14_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO14_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO14_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO14_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO14_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO14_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO14_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO14_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO14_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO14_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO14_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO14_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_SPI1_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_UART0_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_PWM_A_7 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_SIO_14 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_PIO0_14 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_PIO1_14 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_VMO = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO15_STATUS_OFFSET = _u(@as(c_int, 0x00000078));
pub const IO_BANK0_GPIO15_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO15_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO15_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO15_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO15_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO15_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO15_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO15_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO15_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO15_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO15_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO15_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO15_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO15_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO15_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO15_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO15_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO15_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO15_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO15_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO15_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO15_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO15_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO15_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO15_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO15_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO15_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO15_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO15_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO15_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO15_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO15_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO15_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO15_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO15_CTRL_OFFSET = _u(@as(c_int, 0x0000007c));
pub const IO_BANK0_GPIO15_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO15_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO15_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO15_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO15_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO15_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO15_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO15_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO15_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO15_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO15_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO15_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO15_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO15_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO15_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO15_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO15_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO15_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO15_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO15_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO15_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO15_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO15_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO15_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO15_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO15_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO15_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO15_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO15_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO15_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_SPI1_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_UART0_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_PWM_B_7 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_SIO_15 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_PIO0_15 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_PIO1_15 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_USB_MUXING_DIGITAL_DP = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO16_STATUS_OFFSET = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_GPIO16_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO16_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO16_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO16_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO16_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO16_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO16_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO16_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO16_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO16_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO16_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO16_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO16_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO16_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO16_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO16_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO16_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO16_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO16_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO16_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO16_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO16_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO16_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO16_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO16_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO16_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO16_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO16_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO16_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO16_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO16_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO16_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO16_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO16_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO16_CTRL_OFFSET = _u(@as(c_int, 0x00000084));
pub const IO_BANK0_GPIO16_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO16_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO16_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO16_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO16_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO16_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO16_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO16_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO16_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO16_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO16_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO16_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO16_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO16_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO16_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO16_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO16_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO16_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO16_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO16_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO16_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO16_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO16_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO16_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO16_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO16_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO16_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO16_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO16_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO16_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_SPI0_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_UART0_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_PWM_A_0 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_SIO_16 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_PIO0_16 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_PIO1_16 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_USB_MUXING_DIGITAL_DM = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO17_STATUS_OFFSET = _u(@as(c_int, 0x00000088));
pub const IO_BANK0_GPIO17_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO17_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO17_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO17_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO17_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO17_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO17_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO17_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO17_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO17_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO17_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO17_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO17_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO17_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO17_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO17_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO17_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO17_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO17_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO17_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO17_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO17_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO17_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO17_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO17_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO17_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO17_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO17_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO17_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO17_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO17_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO17_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO17_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO17_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO17_CTRL_OFFSET = _u(@as(c_int, 0x0000008c));
pub const IO_BANK0_GPIO17_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO17_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO17_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO17_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO17_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO17_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO17_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO17_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO17_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO17_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO17_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO17_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO17_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO17_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO17_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO17_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO17_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO17_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO17_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO17_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO17_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO17_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO17_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO17_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO17_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO17_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO17_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO17_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO17_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO17_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_SPI0_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_UART0_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_PWM_B_0 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_SIO_17 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_PIO0_17 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_PIO1_17 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO18_STATUS_OFFSET = _u(@as(c_int, 0x00000090));
pub const IO_BANK0_GPIO18_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO18_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO18_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO18_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO18_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO18_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO18_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO18_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO18_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO18_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO18_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO18_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO18_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO18_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO18_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO18_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO18_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO18_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO18_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO18_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO18_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO18_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO18_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO18_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO18_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO18_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO18_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO18_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO18_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO18_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO18_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO18_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO18_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO18_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO18_CTRL_OFFSET = _u(@as(c_int, 0x00000094));
pub const IO_BANK0_GPIO18_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO18_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO18_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO18_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO18_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO18_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO18_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO18_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO18_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO18_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO18_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO18_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO18_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO18_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO18_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO18_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO18_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO18_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO18_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO18_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO18_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO18_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO18_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO18_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO18_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO18_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO18_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO18_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO18_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO18_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_SPI0_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_UART0_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_PWM_A_1 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_SIO_18 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_PIO0_18 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_PIO1_18 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO19_STATUS_OFFSET = _u(@as(c_int, 0x00000098));
pub const IO_BANK0_GPIO19_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO19_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO19_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO19_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO19_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO19_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO19_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO19_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO19_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO19_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO19_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO19_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO19_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO19_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO19_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO19_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO19_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO19_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO19_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO19_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO19_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO19_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO19_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO19_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO19_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO19_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO19_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO19_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO19_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO19_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO19_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO19_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO19_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO19_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO19_CTRL_OFFSET = _u(@as(c_int, 0x0000009c));
pub const IO_BANK0_GPIO19_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO19_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO19_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO19_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO19_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO19_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO19_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO19_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO19_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO19_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO19_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO19_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO19_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO19_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO19_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO19_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO19_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO19_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO19_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO19_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO19_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO19_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO19_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO19_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO19_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO19_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO19_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO19_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO19_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO19_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_SPI0_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_UART0_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_PWM_B_1 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_SIO_19 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_PIO0_19 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_PIO1_19 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO20_STATUS_OFFSET = _u(@as(c_int, 0x000000a0));
pub const IO_BANK0_GPIO20_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO20_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO20_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO20_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO20_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO20_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO20_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO20_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO20_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO20_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO20_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO20_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO20_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO20_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO20_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO20_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO20_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO20_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO20_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO20_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO20_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO20_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO20_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO20_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO20_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO20_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO20_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO20_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO20_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO20_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO20_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO20_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO20_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO20_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO20_CTRL_OFFSET = _u(@as(c_int, 0x000000a4));
pub const IO_BANK0_GPIO20_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO20_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO20_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO20_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO20_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO20_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO20_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO20_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO20_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO20_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO20_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO20_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO20_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO20_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO20_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO20_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO20_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO20_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO20_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO20_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO20_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO20_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO20_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO20_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO20_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO20_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO20_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO20_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO20_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO20_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_SPI0_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_UART1_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_PWM_A_2 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_SIO_20 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_PIO0_20 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_PIO1_20 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_CLOCKS_GPIN_0 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO21_STATUS_OFFSET = _u(@as(c_int, 0x000000a8));
pub const IO_BANK0_GPIO21_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO21_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO21_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO21_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO21_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO21_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO21_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO21_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO21_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO21_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO21_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO21_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO21_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO21_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO21_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO21_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO21_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO21_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO21_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO21_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO21_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO21_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO21_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO21_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO21_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO21_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO21_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO21_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO21_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO21_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO21_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO21_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO21_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO21_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO21_CTRL_OFFSET = _u(@as(c_int, 0x000000ac));
pub const IO_BANK0_GPIO21_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO21_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO21_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO21_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO21_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO21_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO21_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO21_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO21_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO21_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO21_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO21_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO21_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO21_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO21_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO21_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO21_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO21_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO21_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO21_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO21_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO21_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO21_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO21_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO21_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO21_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO21_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO21_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO21_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO21_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_SPI0_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_UART1_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_PWM_B_2 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_SIO_21 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_PIO0_21 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_PIO1_21 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_CLOCKS_GPOUT_0 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO22_STATUS_OFFSET = _u(@as(c_int, 0x000000b0));
pub const IO_BANK0_GPIO22_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO22_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO22_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO22_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO22_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO22_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO22_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO22_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO22_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO22_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO22_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO22_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO22_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO22_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO22_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO22_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO22_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO22_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO22_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO22_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO22_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO22_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO22_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO22_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO22_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO22_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO22_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO22_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO22_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO22_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO22_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO22_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO22_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO22_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO22_CTRL_OFFSET = _u(@as(c_int, 0x000000b4));
pub const IO_BANK0_GPIO22_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO22_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO22_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO22_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO22_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO22_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO22_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO22_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO22_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO22_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO22_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO22_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO22_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO22_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO22_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO22_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO22_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO22_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO22_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO22_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO22_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO22_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO22_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO22_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO22_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO22_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO22_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO22_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO22_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO22_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_SPI0_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_UART1_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_PWM_A_3 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_SIO_22 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_PIO0_22 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_PIO1_22 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_CLOCKS_GPIN_1 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO23_STATUS_OFFSET = _u(@as(c_int, 0x000000b8));
pub const IO_BANK0_GPIO23_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO23_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO23_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO23_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO23_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO23_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO23_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO23_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO23_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO23_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO23_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO23_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO23_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO23_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO23_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO23_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO23_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO23_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO23_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO23_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO23_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO23_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO23_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO23_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO23_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO23_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO23_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO23_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO23_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO23_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO23_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO23_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO23_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO23_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO23_CTRL_OFFSET = _u(@as(c_int, 0x000000bc));
pub const IO_BANK0_GPIO23_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO23_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO23_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO23_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO23_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO23_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO23_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO23_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO23_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO23_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO23_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO23_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO23_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO23_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO23_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO23_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO23_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO23_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO23_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO23_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO23_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO23_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO23_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO23_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO23_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO23_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO23_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO23_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO23_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO23_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_SPI0_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_UART1_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_PWM_B_3 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_SIO_23 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_PIO0_23 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_PIO1_23 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_CLOCKS_GPOUT_1 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO24_STATUS_OFFSET = _u(@as(c_int, 0x000000c0));
pub const IO_BANK0_GPIO24_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO24_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO24_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO24_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO24_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO24_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO24_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO24_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO24_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO24_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO24_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO24_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO24_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO24_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO24_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO24_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO24_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO24_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO24_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO24_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO24_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO24_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO24_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO24_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO24_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO24_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO24_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO24_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO24_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO24_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO24_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO24_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO24_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO24_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO24_CTRL_OFFSET = _u(@as(c_int, 0x000000c4));
pub const IO_BANK0_GPIO24_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO24_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO24_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO24_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO24_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO24_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO24_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO24_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO24_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO24_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO24_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO24_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO24_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO24_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO24_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO24_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO24_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO24_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO24_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO24_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO24_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO24_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO24_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO24_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO24_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO24_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO24_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO24_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO24_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO24_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_SPI1_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_UART1_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_PWM_A_4 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_SIO_24 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_PIO0_24 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_PIO1_24 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_CLOCKS_GPOUT_2 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO25_STATUS_OFFSET = _u(@as(c_int, 0x000000c8));
pub const IO_BANK0_GPIO25_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO25_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO25_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO25_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO25_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO25_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO25_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO25_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO25_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO25_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO25_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO25_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO25_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO25_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO25_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO25_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO25_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO25_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO25_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO25_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO25_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO25_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO25_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO25_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO25_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO25_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO25_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO25_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO25_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO25_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO25_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO25_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO25_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO25_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO25_CTRL_OFFSET = _u(@as(c_int, 0x000000cc));
pub const IO_BANK0_GPIO25_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO25_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO25_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO25_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO25_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO25_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO25_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO25_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO25_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO25_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO25_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO25_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO25_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO25_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO25_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO25_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO25_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO25_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO25_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO25_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO25_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO25_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO25_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO25_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO25_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO25_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO25_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO25_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO25_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO25_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_SPI1_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_UART1_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_PWM_B_4 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_SIO_25 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_PIO0_25 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_PIO1_25 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_CLOCKS_GPOUT_3 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO26_STATUS_OFFSET = _u(@as(c_int, 0x000000d0));
pub const IO_BANK0_GPIO26_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO26_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO26_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO26_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO26_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO26_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO26_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO26_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO26_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO26_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO26_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO26_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO26_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO26_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO26_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO26_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO26_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO26_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO26_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO26_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO26_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO26_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO26_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO26_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO26_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO26_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO26_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO26_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO26_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO26_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO26_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO26_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO26_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO26_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO26_CTRL_OFFSET = _u(@as(c_int, 0x000000d4));
pub const IO_BANK0_GPIO26_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO26_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO26_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO26_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO26_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO26_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO26_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO26_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO26_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO26_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO26_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO26_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO26_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO26_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO26_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO26_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO26_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO26_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO26_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO26_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO26_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO26_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO26_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO26_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO26_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO26_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO26_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO26_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO26_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO26_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_SPI1_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_UART1_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_PWM_A_5 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_SIO_26 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_PIO0_26 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_PIO1_26 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO27_STATUS_OFFSET = _u(@as(c_int, 0x000000d8));
pub const IO_BANK0_GPIO27_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO27_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO27_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO27_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO27_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO27_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO27_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO27_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO27_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO27_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO27_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO27_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO27_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO27_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO27_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO27_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO27_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO27_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO27_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO27_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO27_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO27_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO27_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO27_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO27_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO27_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO27_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO27_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO27_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO27_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO27_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO27_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO27_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO27_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO27_CTRL_OFFSET = _u(@as(c_int, 0x000000dc));
pub const IO_BANK0_GPIO27_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO27_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO27_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO27_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO27_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO27_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO27_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO27_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO27_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO27_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO27_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO27_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO27_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO27_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO27_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO27_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO27_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO27_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO27_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO27_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO27_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO27_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO27_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO27_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO27_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO27_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO27_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO27_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO27_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO27_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_SPI1_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_UART1_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_PWM_B_5 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_SIO_27 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_PIO0_27 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_PIO1_27 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO28_STATUS_OFFSET = _u(@as(c_int, 0x000000e0));
pub const IO_BANK0_GPIO28_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO28_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO28_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO28_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO28_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO28_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO28_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO28_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO28_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO28_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO28_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO28_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO28_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO28_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO28_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO28_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO28_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO28_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO28_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO28_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO28_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO28_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO28_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO28_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO28_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO28_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO28_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO28_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO28_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO28_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO28_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO28_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO28_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO28_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO28_CTRL_OFFSET = _u(@as(c_int, 0x000000e4));
pub const IO_BANK0_GPIO28_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO28_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO28_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO28_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO28_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO28_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO28_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO28_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO28_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO28_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO28_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO28_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO28_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO28_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO28_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO28_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO28_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO28_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO28_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO28_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO28_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO28_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO28_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO28_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO28_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO28_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO28_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO28_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO28_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO28_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_SPI1_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_UART0_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_PWM_A_6 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_SIO_28 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_PIO0_28 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_PIO1_28 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO29_STATUS_OFFSET = _u(@as(c_int, 0x000000e8));
pub const IO_BANK0_GPIO29_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x050a3300, .hexadecimal));
pub const IO_BANK0_GPIO29_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO29_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_GPIO29_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO29_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO29_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO29_STATUS_IRQFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_STATUS_IRQFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_GPIO29_STATUS_IRQFROMPAD_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO29_STATUS_IRQFROMPAD_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_GPIO29_STATUS_IRQFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO29_STATUS_INTOPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_STATUS_INTOPERI_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_GPIO29_STATUS_INTOPERI_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO29_STATUS_INTOPERI_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_GPIO29_STATUS_INTOPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO29_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_GPIO29_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO29_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO29_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO29_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO29_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO29_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO29_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO29_STATUS_OEFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_STATUS_OEFROMPERI_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_GPIO29_STATUS_OEFROMPERI_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO29_STATUS_OEFROMPERI_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO29_STATUS_OEFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO29_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO29_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO29_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO29_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO29_STATUS_OUTFROMPERI_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_STATUS_OUTFROMPERI_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO29_STATUS_OUTFROMPERI_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO29_STATUS_OUTFROMPERI_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO29_STATUS_OUTFROMPERI_ACCESS = "RO";
pub const IO_BANK0_GPIO29_CTRL_OFFSET = _u(@as(c_int, 0x000000ec));
pub const IO_BANK0_GPIO29_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003331f, .hexadecimal));
pub const IO_BANK0_GPIO29_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO29_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hexadecimal));
pub const IO_BANK0_GPIO29_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO29_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO29_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO29_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO29_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO29_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO29_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const IO_BANK0_GPIO29_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO29_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO29_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO29_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO29_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO29_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO29_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_CTRL_OEOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO29_CTRL_OEOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO29_CTRL_OEOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO29_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO29_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO29_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO29_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO29_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_GPIO29_CTRL_OUTOVER_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO29_CTRL_OUTOVER_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_GPIO29_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO29_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO29_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO29_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_SPI1_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_UART0_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_PWM_B_6 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_SIO_29 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_PIO0_29 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_PIO1_29 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_INTR0_OFFSET = _u(@as(c_int, 0x000000f0));
pub const IO_BANK0_INTR0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_INTR0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_INTR0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_INTR0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_INTR0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_INTR0_GPIO7_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_INTR0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_INTR0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_INTR0_GPIO7_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_INTR0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_INTR0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_INTR0_GPIO7_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_INTR0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_INTR0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_INTR0_GPIO6_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_INTR0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_INTR0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_INTR0_GPIO6_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_INTR0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_INTR0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_INTR0_GPIO6_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_INTR0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR0_GPIO5_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_INTR0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR0_GPIO5_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_INTR0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR0_GPIO5_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_INTR0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR0_GPIO4_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_INTR0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR0_GPIO4_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_INTR0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR0_GPIO4_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_INTR0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR0_GPIO3_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_INTR0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR0_GPIO3_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_INTR0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR0_GPIO3_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_INTR0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR0_GPIO2_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_INTR0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR0_GPIO2_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_INTR0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR0_GPIO2_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_INTR0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR0_GPIO1_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_INTR0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR0_GPIO1_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_INTR0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR0_GPIO1_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_INTR0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR0_GPIO0_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_INTR0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR0_GPIO0_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_INTR0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR0_GPIO0_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR1_OFFSET = _u(@as(c_int, 0x000000f4));
pub const IO_BANK0_INTR1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_INTR1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_INTR1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_INTR1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_INTR1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_INTR1_GPIO15_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_INTR1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_INTR1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_INTR1_GPIO15_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_INTR1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_INTR1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_INTR1_GPIO15_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_INTR1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_INTR1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_INTR1_GPIO14_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_INTR1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_INTR1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_INTR1_GPIO14_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_INTR1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_INTR1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_INTR1_GPIO14_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_INTR1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR1_GPIO13_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_INTR1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR1_GPIO13_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_INTR1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR1_GPIO13_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_INTR1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR1_GPIO12_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_INTR1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR1_GPIO12_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_INTR1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR1_GPIO12_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_INTR1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR1_GPIO11_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_INTR1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR1_GPIO11_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_INTR1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR1_GPIO11_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_INTR1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR1_GPIO10_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_INTR1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR1_GPIO10_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_INTR1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR1_GPIO10_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_INTR1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR1_GPIO9_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_INTR1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR1_GPIO9_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_INTR1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR1_GPIO9_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_INTR1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR1_GPIO8_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_INTR1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR1_GPIO8_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_INTR1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR1_GPIO8_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR2_OFFSET = _u(@as(c_int, 0x000000f8));
pub const IO_BANK0_INTR2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_INTR2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_INTR2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_INTR2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_INTR2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_INTR2_GPIO23_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_INTR2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_INTR2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_INTR2_GPIO23_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_INTR2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_INTR2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_INTR2_GPIO23_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_INTR2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_INTR2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_INTR2_GPIO22_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_INTR2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_INTR2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_INTR2_GPIO22_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_INTR2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_INTR2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_INTR2_GPIO22_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_INTR2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR2_GPIO21_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_INTR2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR2_GPIO21_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_INTR2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR2_GPIO21_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_INTR2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR2_GPIO20_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_INTR2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR2_GPIO20_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_INTR2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR2_GPIO20_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_INTR2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR2_GPIO19_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_INTR2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR2_GPIO19_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_INTR2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR2_GPIO19_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_INTR2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR2_GPIO18_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_INTR2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR2_GPIO18_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_INTR2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR2_GPIO18_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_INTR2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR2_GPIO17_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_INTR2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR2_GPIO17_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_INTR2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR2_GPIO17_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_INTR2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR2_GPIO16_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_INTR2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR2_GPIO16_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_INTR2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR2_GPIO16_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR3_OFFSET = _u(@as(c_int, 0x000000fc));
pub const IO_BANK0_INTR3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const IO_BANK0_INTR3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_INTR3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_INTR3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR3_GPIO29_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_INTR3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR3_GPIO29_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_INTR3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR3_GPIO29_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_INTR3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR3_GPIO28_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_INTR3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR3_GPIO28_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_INTR3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR3_GPIO28_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_INTR3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR3_GPIO27_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_INTR3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR3_GPIO27_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_INTR3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR3_GPIO27_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_INTR3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR3_GPIO26_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_INTR3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR3_GPIO26_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_INTR3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR3_GPIO26_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_INTR3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR3_GPIO25_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_INTR3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR3_GPIO25_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_INTR3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR3_GPIO25_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_INTR3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR3_GPIO24_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_INTR3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR3_GPIO24_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_INTR3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR3_GPIO24_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTE0_OFFSET = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_PROC0_INTE0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_OFFSET = _u(@as(c_int, 0x00000104));
pub const IO_BANK0_PROC0_INTE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_PROC0_INTE1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_OFFSET = _u(@as(c_int, 0x00000108));
pub const IO_BANK0_PROC0_INTE2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_PROC0_INTE2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_OFFSET = _u(@as(c_int, 0x0000010c));
pub const IO_BANK0_PROC0_INTE3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const IO_BANK0_PROC0_INTE3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_OFFSET = _u(@as(c_int, 0x00000110));
pub const IO_BANK0_PROC0_INTF0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_PROC0_INTF0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_OFFSET = _u(@as(c_int, 0x00000114));
pub const IO_BANK0_PROC0_INTF1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_PROC0_INTF1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_OFFSET = _u(@as(c_int, 0x00000118));
pub const IO_BANK0_PROC0_INTF2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_PROC0_INTF2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_OFFSET = _u(@as(c_int, 0x0000011c));
pub const IO_BANK0_PROC0_INTF3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const IO_BANK0_PROC0_INTF3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTS0_OFFSET = _u(@as(c_int, 0x00000120));
pub const IO_BANK0_PROC0_INTS0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_PROC0_INTS0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_OFFSET = _u(@as(c_int, 0x00000124));
pub const IO_BANK0_PROC0_INTS1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_PROC0_INTS1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_OFFSET = _u(@as(c_int, 0x00000128));
pub const IO_BANK0_PROC0_INTS2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_PROC0_INTS2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_OFFSET = _u(@as(c_int, 0x0000012c));
pub const IO_BANK0_PROC0_INTS3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const IO_BANK0_PROC0_INTS3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTE0_OFFSET = _u(@as(c_int, 0x00000130));
pub const IO_BANK0_PROC1_INTE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_PROC1_INTE0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_OFFSET = _u(@as(c_int, 0x00000134));
pub const IO_BANK0_PROC1_INTE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_PROC1_INTE1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_OFFSET = _u(@as(c_int, 0x00000138));
pub const IO_BANK0_PROC1_INTE2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_PROC1_INTE2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_OFFSET = _u(@as(c_int, 0x0000013c));
pub const IO_BANK0_PROC1_INTE3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const IO_BANK0_PROC1_INTE3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_OFFSET = _u(@as(c_int, 0x00000140));
pub const IO_BANK0_PROC1_INTF0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_PROC1_INTF0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_OFFSET = _u(@as(c_int, 0x00000144));
pub const IO_BANK0_PROC1_INTF1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_PROC1_INTF1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_OFFSET = _u(@as(c_int, 0x00000148));
pub const IO_BANK0_PROC1_INTF2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_PROC1_INTF2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_OFFSET = _u(@as(c_int, 0x0000014c));
pub const IO_BANK0_PROC1_INTF3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const IO_BANK0_PROC1_INTF3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTS0_OFFSET = _u(@as(c_int, 0x00000150));
pub const IO_BANK0_PROC1_INTS0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_PROC1_INTS0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_OFFSET = _u(@as(c_int, 0x00000154));
pub const IO_BANK0_PROC1_INTS1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_PROC1_INTS1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_OFFSET = _u(@as(c_int, 0x00000158));
pub const IO_BANK0_PROC1_INTS2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_PROC1_INTS2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_OFFSET = _u(@as(c_int, 0x0000015c));
pub const IO_BANK0_PROC1_INTS3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const IO_BANK0_PROC1_INTS3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTE0_OFFSET = _u(@as(c_int, 0x00000160));
pub const IO_BANK0_DORMANT_WAKE_INTE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_OFFSET = _u(@as(c_int, 0x00000164));
pub const IO_BANK0_DORMANT_WAKE_INTE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_OFFSET = _u(@as(c_int, 0x00000168));
pub const IO_BANK0_DORMANT_WAKE_INTE2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_OFFSET = _u(@as(c_int, 0x0000016c));
pub const IO_BANK0_DORMANT_WAKE_INTE3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_OFFSET = _u(@as(c_int, 0x00000170));
pub const IO_BANK0_DORMANT_WAKE_INTF0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_OFFSET = _u(@as(c_int, 0x00000174));
pub const IO_BANK0_DORMANT_WAKE_INTF1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_OFFSET = _u(@as(c_int, 0x00000178));
pub const IO_BANK0_DORMANT_WAKE_INTF2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_OFFSET = _u(@as(c_int, 0x0000017c));
pub const IO_BANK0_DORMANT_WAKE_INTF3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTS0_OFFSET = _u(@as(c_int, 0x00000180));
pub const IO_BANK0_DORMANT_WAKE_INTS0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_OFFSET = _u(@as(c_int, 0x00000184));
pub const IO_BANK0_DORMANT_WAKE_INTS1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_OFFSET = _u(@as(c_int, 0x00000188));
pub const IO_BANK0_DORMANT_WAKE_INTS2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_OFFSET = _u(@as(c_int, 0x0000018c));
pub const IO_BANK0_DORMANT_WAKE_INTS3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_ACCESS = "RO";
pub const iobank0_hw = @import("std").zig.c_translation.cast([*c]iobank0_hw_t, IO_BANK0_BASE);
pub const _HARDWARE_IRQ_H = "";
pub const PICO_MAX_SHARED_IRQ_HANDLERS = @as(c_int, 4);
pub const PICO_DISABLE_SHARED_IRQ_HANDLERS = @as(c_int, 0);
pub const PICO_VTABLE_PER_CORE = @as(c_int, 0);
pub const _INTCTRL_H_ = "";
pub const TIMER_IRQ_0 = @as(c_int, 0);
pub const TIMER_IRQ_1 = @as(c_int, 1);
pub const TIMER_IRQ_2 = @as(c_int, 2);
pub const TIMER_IRQ_3 = @as(c_int, 3);
pub const PWM_IRQ_WRAP = @as(c_int, 4);
pub const USBCTRL_IRQ = @as(c_int, 5);
pub const XIP_IRQ = @as(c_int, 6);
pub const PIO0_IRQ_0 = @as(c_int, 7);
pub const PIO0_IRQ_1 = @as(c_int, 8);
pub const PIO1_IRQ_0 = @as(c_int, 9);
pub const PIO1_IRQ_1 = @as(c_int, 10);
pub const DMA_IRQ_0 = @as(c_int, 11);
pub const DMA_IRQ_1 = @as(c_int, 12);
pub const IO_IRQ_BANK0 = @as(c_int, 13);
pub const IO_IRQ_QSPI = @as(c_int, 14);
pub const SIO_IRQ_PROC0 = @as(c_int, 15);
pub const SIO_IRQ_PROC1 = @as(c_int, 16);
pub const CLOCKS_IRQ = @as(c_int, 17);
pub const SPI0_IRQ = @as(c_int, 18);
pub const SPI1_IRQ = @as(c_int, 19);
pub const UART0_IRQ = @as(c_int, 20);
pub const UART1_IRQ = @as(c_int, 21);
pub const ADC_IRQ_FIFO = @as(c_int, 22);
pub const I2C0_IRQ = @as(c_int, 23);
pub const I2C1_IRQ = @as(c_int, 24);
pub const RTC_IRQ = @as(c_int, 25);
pub const HARDWARE_REGS_M0PLUS_DEFINED = "";
pub const M0PLUS_SYST_CSR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e010, .hexadecimal));
pub const M0PLUS_SYST_CSR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010007, .hexadecimal));
pub const M0PLUS_SYST_CSR_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_SYST_CSR_COUNTFLAG_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_SYST_CSR_COUNTFLAG_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const M0PLUS_SYST_CSR_COUNTFLAG_MSB = _u(@as(c_int, 16));
pub const M0PLUS_SYST_CSR_COUNTFLAG_LSB = _u(@as(c_int, 16));
pub const M0PLUS_SYST_CSR_COUNTFLAG_ACCESS = "RO";
pub const M0PLUS_SYST_CSR_CLKSOURCE_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_SYST_CSR_CLKSOURCE_BITS = _u(@as(c_int, 0x00000004));
pub const M0PLUS_SYST_CSR_CLKSOURCE_MSB = _u(@as(c_int, 2));
pub const M0PLUS_SYST_CSR_CLKSOURCE_LSB = _u(@as(c_int, 2));
pub const M0PLUS_SYST_CSR_CLKSOURCE_ACCESS = "RW";
pub const M0PLUS_SYST_CSR_TICKINT_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_SYST_CSR_TICKINT_BITS = _u(@as(c_int, 0x00000002));
pub const M0PLUS_SYST_CSR_TICKINT_MSB = _u(@as(c_int, 1));
pub const M0PLUS_SYST_CSR_TICKINT_LSB = _u(@as(c_int, 1));
pub const M0PLUS_SYST_CSR_TICKINT_ACCESS = "RW";
pub const M0PLUS_SYST_CSR_ENABLE_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_SYST_CSR_ENABLE_BITS = _u(@as(c_int, 0x00000001));
pub const M0PLUS_SYST_CSR_ENABLE_MSB = _u(@as(c_int, 0));
pub const M0PLUS_SYST_CSR_ENABLE_LSB = _u(@as(c_int, 0));
pub const M0PLUS_SYST_CSR_ENABLE_ACCESS = "RW";
pub const M0PLUS_SYST_RVR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e014, .hexadecimal));
pub const M0PLUS_SYST_RVR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const M0PLUS_SYST_RVR_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_SYST_RVR_RELOAD_RESET = _u(@as(c_int, 0x000000));
pub const M0PLUS_SYST_RVR_RELOAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const M0PLUS_SYST_RVR_RELOAD_MSB = _u(@as(c_int, 23));
pub const M0PLUS_SYST_RVR_RELOAD_LSB = _u(@as(c_int, 0));
pub const M0PLUS_SYST_RVR_RELOAD_ACCESS = "RW";
pub const M0PLUS_SYST_CVR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e018, .hexadecimal));
pub const M0PLUS_SYST_CVR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const M0PLUS_SYST_CVR_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_SYST_CVR_CURRENT_RESET = _u(@as(c_int, 0x000000));
pub const M0PLUS_SYST_CVR_CURRENT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const M0PLUS_SYST_CVR_CURRENT_MSB = _u(@as(c_int, 23));
pub const M0PLUS_SYST_CVR_CURRENT_LSB = _u(@as(c_int, 0));
pub const M0PLUS_SYST_CVR_CURRENT_ACCESS = "RW";
pub const M0PLUS_SYST_CALIB_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e01c, .hexadecimal));
pub const M0PLUS_SYST_CALIB_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0ffffff, .hexadecimal));
pub const M0PLUS_SYST_CALIB_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_SYST_CALIB_NOREF_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_SYST_CALIB_NOREF_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const M0PLUS_SYST_CALIB_NOREF_MSB = _u(@as(c_int, 31));
pub const M0PLUS_SYST_CALIB_NOREF_LSB = _u(@as(c_int, 31));
pub const M0PLUS_SYST_CALIB_NOREF_ACCESS = "RO";
pub const M0PLUS_SYST_CALIB_SKEW_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_SYST_CALIB_SKEW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const M0PLUS_SYST_CALIB_SKEW_MSB = _u(@as(c_int, 30));
pub const M0PLUS_SYST_CALIB_SKEW_LSB = _u(@as(c_int, 30));
pub const M0PLUS_SYST_CALIB_SKEW_ACCESS = "RO";
pub const M0PLUS_SYST_CALIB_TENMS_RESET = _u(@as(c_int, 0x000000));
pub const M0PLUS_SYST_CALIB_TENMS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hexadecimal));
pub const M0PLUS_SYST_CALIB_TENMS_MSB = _u(@as(c_int, 23));
pub const M0PLUS_SYST_CALIB_TENMS_LSB = _u(@as(c_int, 0));
pub const M0PLUS_SYST_CALIB_TENMS_ACCESS = "RO";
pub const M0PLUS_NVIC_ISER_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e100, .hexadecimal));
pub const M0PLUS_NVIC_ISER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const M0PLUS_NVIC_ISER_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_NVIC_ISER_SETENA_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_NVIC_ISER_SETENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const M0PLUS_NVIC_ISER_SETENA_MSB = _u(@as(c_int, 31));
pub const M0PLUS_NVIC_ISER_SETENA_LSB = _u(@as(c_int, 0));
pub const M0PLUS_NVIC_ISER_SETENA_ACCESS = "RW";
pub const M0PLUS_NVIC_ICER_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e180, .hexadecimal));
pub const M0PLUS_NVIC_ICER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const M0PLUS_NVIC_ICER_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_NVIC_ICER_CLRENA_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_NVIC_ICER_CLRENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const M0PLUS_NVIC_ICER_CLRENA_MSB = _u(@as(c_int, 31));
pub const M0PLUS_NVIC_ICER_CLRENA_LSB = _u(@as(c_int, 0));
pub const M0PLUS_NVIC_ICER_CLRENA_ACCESS = "RW";
pub const M0PLUS_NVIC_ISPR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e200, .hexadecimal));
pub const M0PLUS_NVIC_ISPR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const M0PLUS_NVIC_ISPR_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_NVIC_ISPR_SETPEND_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_NVIC_ISPR_SETPEND_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const M0PLUS_NVIC_ISPR_SETPEND_MSB = _u(@as(c_int, 31));
pub const M0PLUS_NVIC_ISPR_SETPEND_LSB = _u(@as(c_int, 0));
pub const M0PLUS_NVIC_ISPR_SETPEND_ACCESS = "RW";
pub const M0PLUS_NVIC_ICPR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e280, .hexadecimal));
pub const M0PLUS_NVIC_ICPR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const M0PLUS_NVIC_ICPR_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_NVIC_ICPR_CLRPEND_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_NVIC_ICPR_CLRPEND_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const M0PLUS_NVIC_ICPR_CLRPEND_MSB = _u(@as(c_int, 31));
pub const M0PLUS_NVIC_ICPR_CLRPEND_LSB = _u(@as(c_int, 0));
pub const M0PLUS_NVIC_ICPR_CLRPEND_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e400, .hexadecimal));
pub const M0PLUS_NVIC_IPR0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0c0c0c0, .hexadecimal));
pub const M0PLUS_NVIC_IPR0_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_NVIC_IPR0_IP_3_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR0_IP_3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0000000, .hexadecimal));
pub const M0PLUS_NVIC_IPR0_IP_3_MSB = _u(@as(c_int, 31));
pub const M0PLUS_NVIC_IPR0_IP_3_LSB = _u(@as(c_int, 30));
pub const M0PLUS_NVIC_IPR0_IP_3_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR0_IP_2_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR0_IP_2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00c00000, .hexadecimal));
pub const M0PLUS_NVIC_IPR0_IP_2_MSB = _u(@as(c_int, 23));
pub const M0PLUS_NVIC_IPR0_IP_2_LSB = _u(@as(c_int, 22));
pub const M0PLUS_NVIC_IPR0_IP_2_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR0_IP_1_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR0_IP_1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hexadecimal));
pub const M0PLUS_NVIC_IPR0_IP_1_MSB = _u(@as(c_int, 15));
pub const M0PLUS_NVIC_IPR0_IP_1_LSB = _u(@as(c_int, 14));
pub const M0PLUS_NVIC_IPR0_IP_1_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR0_IP_0_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR0_IP_0_BITS = _u(@as(c_int, 0x000000c0));
pub const M0PLUS_NVIC_IPR0_IP_0_MSB = _u(@as(c_int, 7));
pub const M0PLUS_NVIC_IPR0_IP_0_LSB = _u(@as(c_int, 6));
pub const M0PLUS_NVIC_IPR0_IP_0_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e404, .hexadecimal));
pub const M0PLUS_NVIC_IPR1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0c0c0c0, .hexadecimal));
pub const M0PLUS_NVIC_IPR1_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_NVIC_IPR1_IP_7_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR1_IP_7_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0000000, .hexadecimal));
pub const M0PLUS_NVIC_IPR1_IP_7_MSB = _u(@as(c_int, 31));
pub const M0PLUS_NVIC_IPR1_IP_7_LSB = _u(@as(c_int, 30));
pub const M0PLUS_NVIC_IPR1_IP_7_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR1_IP_6_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR1_IP_6_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00c00000, .hexadecimal));
pub const M0PLUS_NVIC_IPR1_IP_6_MSB = _u(@as(c_int, 23));
pub const M0PLUS_NVIC_IPR1_IP_6_LSB = _u(@as(c_int, 22));
pub const M0PLUS_NVIC_IPR1_IP_6_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR1_IP_5_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR1_IP_5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hexadecimal));
pub const M0PLUS_NVIC_IPR1_IP_5_MSB = _u(@as(c_int, 15));
pub const M0PLUS_NVIC_IPR1_IP_5_LSB = _u(@as(c_int, 14));
pub const M0PLUS_NVIC_IPR1_IP_5_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR1_IP_4_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR1_IP_4_BITS = _u(@as(c_int, 0x000000c0));
pub const M0PLUS_NVIC_IPR1_IP_4_MSB = _u(@as(c_int, 7));
pub const M0PLUS_NVIC_IPR1_IP_4_LSB = _u(@as(c_int, 6));
pub const M0PLUS_NVIC_IPR1_IP_4_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e408, .hexadecimal));
pub const M0PLUS_NVIC_IPR2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0c0c0c0, .hexadecimal));
pub const M0PLUS_NVIC_IPR2_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_NVIC_IPR2_IP_11_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR2_IP_11_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0000000, .hexadecimal));
pub const M0PLUS_NVIC_IPR2_IP_11_MSB = _u(@as(c_int, 31));
pub const M0PLUS_NVIC_IPR2_IP_11_LSB = _u(@as(c_int, 30));
pub const M0PLUS_NVIC_IPR2_IP_11_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR2_IP_10_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR2_IP_10_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00c00000, .hexadecimal));
pub const M0PLUS_NVIC_IPR2_IP_10_MSB = _u(@as(c_int, 23));
pub const M0PLUS_NVIC_IPR2_IP_10_LSB = _u(@as(c_int, 22));
pub const M0PLUS_NVIC_IPR2_IP_10_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR2_IP_9_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR2_IP_9_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hexadecimal));
pub const M0PLUS_NVIC_IPR2_IP_9_MSB = _u(@as(c_int, 15));
pub const M0PLUS_NVIC_IPR2_IP_9_LSB = _u(@as(c_int, 14));
pub const M0PLUS_NVIC_IPR2_IP_9_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR2_IP_8_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR2_IP_8_BITS = _u(@as(c_int, 0x000000c0));
pub const M0PLUS_NVIC_IPR2_IP_8_MSB = _u(@as(c_int, 7));
pub const M0PLUS_NVIC_IPR2_IP_8_LSB = _u(@as(c_int, 6));
pub const M0PLUS_NVIC_IPR2_IP_8_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR3_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e40c, .hexadecimal));
pub const M0PLUS_NVIC_IPR3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0c0c0c0, .hexadecimal));
pub const M0PLUS_NVIC_IPR3_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_NVIC_IPR3_IP_15_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR3_IP_15_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0000000, .hexadecimal));
pub const M0PLUS_NVIC_IPR3_IP_15_MSB = _u(@as(c_int, 31));
pub const M0PLUS_NVIC_IPR3_IP_15_LSB = _u(@as(c_int, 30));
pub const M0PLUS_NVIC_IPR3_IP_15_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR3_IP_14_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR3_IP_14_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00c00000, .hexadecimal));
pub const M0PLUS_NVIC_IPR3_IP_14_MSB = _u(@as(c_int, 23));
pub const M0PLUS_NVIC_IPR3_IP_14_LSB = _u(@as(c_int, 22));
pub const M0PLUS_NVIC_IPR3_IP_14_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR3_IP_13_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR3_IP_13_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hexadecimal));
pub const M0PLUS_NVIC_IPR3_IP_13_MSB = _u(@as(c_int, 15));
pub const M0PLUS_NVIC_IPR3_IP_13_LSB = _u(@as(c_int, 14));
pub const M0PLUS_NVIC_IPR3_IP_13_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR3_IP_12_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR3_IP_12_BITS = _u(@as(c_int, 0x000000c0));
pub const M0PLUS_NVIC_IPR3_IP_12_MSB = _u(@as(c_int, 7));
pub const M0PLUS_NVIC_IPR3_IP_12_LSB = _u(@as(c_int, 6));
pub const M0PLUS_NVIC_IPR3_IP_12_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR4_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e410, .hexadecimal));
pub const M0PLUS_NVIC_IPR4_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0c0c0c0, .hexadecimal));
pub const M0PLUS_NVIC_IPR4_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_NVIC_IPR4_IP_19_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR4_IP_19_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0000000, .hexadecimal));
pub const M0PLUS_NVIC_IPR4_IP_19_MSB = _u(@as(c_int, 31));
pub const M0PLUS_NVIC_IPR4_IP_19_LSB = _u(@as(c_int, 30));
pub const M0PLUS_NVIC_IPR4_IP_19_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR4_IP_18_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR4_IP_18_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00c00000, .hexadecimal));
pub const M0PLUS_NVIC_IPR4_IP_18_MSB = _u(@as(c_int, 23));
pub const M0PLUS_NVIC_IPR4_IP_18_LSB = _u(@as(c_int, 22));
pub const M0PLUS_NVIC_IPR4_IP_18_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR4_IP_17_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR4_IP_17_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hexadecimal));
pub const M0PLUS_NVIC_IPR4_IP_17_MSB = _u(@as(c_int, 15));
pub const M0PLUS_NVIC_IPR4_IP_17_LSB = _u(@as(c_int, 14));
pub const M0PLUS_NVIC_IPR4_IP_17_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR4_IP_16_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR4_IP_16_BITS = _u(@as(c_int, 0x000000c0));
pub const M0PLUS_NVIC_IPR4_IP_16_MSB = _u(@as(c_int, 7));
pub const M0PLUS_NVIC_IPR4_IP_16_LSB = _u(@as(c_int, 6));
pub const M0PLUS_NVIC_IPR4_IP_16_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR5_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e414, .hexadecimal));
pub const M0PLUS_NVIC_IPR5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0c0c0c0, .hexadecimal));
pub const M0PLUS_NVIC_IPR5_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_NVIC_IPR5_IP_23_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR5_IP_23_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0000000, .hexadecimal));
pub const M0PLUS_NVIC_IPR5_IP_23_MSB = _u(@as(c_int, 31));
pub const M0PLUS_NVIC_IPR5_IP_23_LSB = _u(@as(c_int, 30));
pub const M0PLUS_NVIC_IPR5_IP_23_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR5_IP_22_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR5_IP_22_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00c00000, .hexadecimal));
pub const M0PLUS_NVIC_IPR5_IP_22_MSB = _u(@as(c_int, 23));
pub const M0PLUS_NVIC_IPR5_IP_22_LSB = _u(@as(c_int, 22));
pub const M0PLUS_NVIC_IPR5_IP_22_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR5_IP_21_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR5_IP_21_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hexadecimal));
pub const M0PLUS_NVIC_IPR5_IP_21_MSB = _u(@as(c_int, 15));
pub const M0PLUS_NVIC_IPR5_IP_21_LSB = _u(@as(c_int, 14));
pub const M0PLUS_NVIC_IPR5_IP_21_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR5_IP_20_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR5_IP_20_BITS = _u(@as(c_int, 0x000000c0));
pub const M0PLUS_NVIC_IPR5_IP_20_MSB = _u(@as(c_int, 7));
pub const M0PLUS_NVIC_IPR5_IP_20_LSB = _u(@as(c_int, 6));
pub const M0PLUS_NVIC_IPR5_IP_20_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR6_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e418, .hexadecimal));
pub const M0PLUS_NVIC_IPR6_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0c0c0c0, .hexadecimal));
pub const M0PLUS_NVIC_IPR6_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_NVIC_IPR6_IP_27_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR6_IP_27_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0000000, .hexadecimal));
pub const M0PLUS_NVIC_IPR6_IP_27_MSB = _u(@as(c_int, 31));
pub const M0PLUS_NVIC_IPR6_IP_27_LSB = _u(@as(c_int, 30));
pub const M0PLUS_NVIC_IPR6_IP_27_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR6_IP_26_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR6_IP_26_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00c00000, .hexadecimal));
pub const M0PLUS_NVIC_IPR6_IP_26_MSB = _u(@as(c_int, 23));
pub const M0PLUS_NVIC_IPR6_IP_26_LSB = _u(@as(c_int, 22));
pub const M0PLUS_NVIC_IPR6_IP_26_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR6_IP_25_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR6_IP_25_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hexadecimal));
pub const M0PLUS_NVIC_IPR6_IP_25_MSB = _u(@as(c_int, 15));
pub const M0PLUS_NVIC_IPR6_IP_25_LSB = _u(@as(c_int, 14));
pub const M0PLUS_NVIC_IPR6_IP_25_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR6_IP_24_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR6_IP_24_BITS = _u(@as(c_int, 0x000000c0));
pub const M0PLUS_NVIC_IPR6_IP_24_MSB = _u(@as(c_int, 7));
pub const M0PLUS_NVIC_IPR6_IP_24_LSB = _u(@as(c_int, 6));
pub const M0PLUS_NVIC_IPR6_IP_24_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR7_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e41c, .hexadecimal));
pub const M0PLUS_NVIC_IPR7_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0c0c0c0, .hexadecimal));
pub const M0PLUS_NVIC_IPR7_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_NVIC_IPR7_IP_31_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR7_IP_31_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0000000, .hexadecimal));
pub const M0PLUS_NVIC_IPR7_IP_31_MSB = _u(@as(c_int, 31));
pub const M0PLUS_NVIC_IPR7_IP_31_LSB = _u(@as(c_int, 30));
pub const M0PLUS_NVIC_IPR7_IP_31_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR7_IP_30_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR7_IP_30_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00c00000, .hexadecimal));
pub const M0PLUS_NVIC_IPR7_IP_30_MSB = _u(@as(c_int, 23));
pub const M0PLUS_NVIC_IPR7_IP_30_LSB = _u(@as(c_int, 22));
pub const M0PLUS_NVIC_IPR7_IP_30_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR7_IP_29_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR7_IP_29_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hexadecimal));
pub const M0PLUS_NVIC_IPR7_IP_29_MSB = _u(@as(c_int, 15));
pub const M0PLUS_NVIC_IPR7_IP_29_LSB = _u(@as(c_int, 14));
pub const M0PLUS_NVIC_IPR7_IP_29_ACCESS = "RW";
pub const M0PLUS_NVIC_IPR7_IP_28_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_NVIC_IPR7_IP_28_BITS = _u(@as(c_int, 0x000000c0));
pub const M0PLUS_NVIC_IPR7_IP_28_MSB = _u(@as(c_int, 7));
pub const M0PLUS_NVIC_IPR7_IP_28_LSB = _u(@as(c_int, 6));
pub const M0PLUS_NVIC_IPR7_IP_28_ACCESS = "RW";
pub const M0PLUS_CPUID_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed00, .hexadecimal));
pub const M0PLUS_CPUID_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const M0PLUS_CPUID_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x410cc601, .hexadecimal));
pub const M0PLUS_CPUID_IMPLEMENTER_RESET = _u(@as(c_int, 0x41));
pub const M0PLUS_CPUID_IMPLEMENTER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff000000, .hexadecimal));
pub const M0PLUS_CPUID_IMPLEMENTER_MSB = _u(@as(c_int, 31));
pub const M0PLUS_CPUID_IMPLEMENTER_LSB = _u(@as(c_int, 24));
pub const M0PLUS_CPUID_IMPLEMENTER_ACCESS = "RO";
pub const M0PLUS_CPUID_VARIANT_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_CPUID_VARIANT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hexadecimal));
pub const M0PLUS_CPUID_VARIANT_MSB = _u(@as(c_int, 23));
pub const M0PLUS_CPUID_VARIANT_LSB = _u(@as(c_int, 20));
pub const M0PLUS_CPUID_VARIANT_ACCESS = "RO";
pub const M0PLUS_CPUID_ARCHITECTURE_RESET = _u(@as(c_int, 0xc));
pub const M0PLUS_CPUID_ARCHITECTURE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hexadecimal));
pub const M0PLUS_CPUID_ARCHITECTURE_MSB = _u(@as(c_int, 19));
pub const M0PLUS_CPUID_ARCHITECTURE_LSB = _u(@as(c_int, 16));
pub const M0PLUS_CPUID_ARCHITECTURE_ACCESS = "RO";
pub const M0PLUS_CPUID_PARTNO_RESET = _u(@as(c_int, 0xc60));
pub const M0PLUS_CPUID_PARTNO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000fff0, .hexadecimal));
pub const M0PLUS_CPUID_PARTNO_MSB = _u(@as(c_int, 15));
pub const M0PLUS_CPUID_PARTNO_LSB = _u(@as(c_int, 4));
pub const M0PLUS_CPUID_PARTNO_ACCESS = "RO";
pub const M0PLUS_CPUID_REVISION_RESET = _u(@as(c_int, 0x1));
pub const M0PLUS_CPUID_REVISION_BITS = _u(@as(c_int, 0x0000000f));
pub const M0PLUS_CPUID_REVISION_MSB = _u(@as(c_int, 3));
pub const M0PLUS_CPUID_REVISION_LSB = _u(@as(c_int, 0));
pub const M0PLUS_CPUID_REVISION_ACCESS = "RO";
pub const M0PLUS_ICSR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed04, .hexadecimal));
pub const M0PLUS_ICSR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9edff1ff, .hexadecimal));
pub const M0PLUS_ICSR_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_ICSR_NMIPENDSET_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_ICSR_NMIPENDSET_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const M0PLUS_ICSR_NMIPENDSET_MSB = _u(@as(c_int, 31));
pub const M0PLUS_ICSR_NMIPENDSET_LSB = _u(@as(c_int, 31));
pub const M0PLUS_ICSR_NMIPENDSET_ACCESS = "RW";
pub const M0PLUS_ICSR_PENDSVSET_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_ICSR_PENDSVSET_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const M0PLUS_ICSR_PENDSVSET_MSB = _u(@as(c_int, 28));
pub const M0PLUS_ICSR_PENDSVSET_LSB = _u(@as(c_int, 28));
pub const M0PLUS_ICSR_PENDSVSET_ACCESS = "RW";
pub const M0PLUS_ICSR_PENDSVCLR_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_ICSR_PENDSVCLR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const M0PLUS_ICSR_PENDSVCLR_MSB = _u(@as(c_int, 27));
pub const M0PLUS_ICSR_PENDSVCLR_LSB = _u(@as(c_int, 27));
pub const M0PLUS_ICSR_PENDSVCLR_ACCESS = "RW";
pub const M0PLUS_ICSR_PENDSTSET_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_ICSR_PENDSTSET_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const M0PLUS_ICSR_PENDSTSET_MSB = _u(@as(c_int, 26));
pub const M0PLUS_ICSR_PENDSTSET_LSB = _u(@as(c_int, 26));
pub const M0PLUS_ICSR_PENDSTSET_ACCESS = "RW";
pub const M0PLUS_ICSR_PENDSTCLR_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_ICSR_PENDSTCLR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const M0PLUS_ICSR_PENDSTCLR_MSB = _u(@as(c_int, 25));
pub const M0PLUS_ICSR_PENDSTCLR_LSB = _u(@as(c_int, 25));
pub const M0PLUS_ICSR_PENDSTCLR_ACCESS = "RW";
pub const M0PLUS_ICSR_ISRPREEMPT_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_ICSR_ISRPREEMPT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const M0PLUS_ICSR_ISRPREEMPT_MSB = _u(@as(c_int, 23));
pub const M0PLUS_ICSR_ISRPREEMPT_LSB = _u(@as(c_int, 23));
pub const M0PLUS_ICSR_ISRPREEMPT_ACCESS = "RO";
pub const M0PLUS_ICSR_ISRPENDING_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_ICSR_ISRPENDING_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const M0PLUS_ICSR_ISRPENDING_MSB = _u(@as(c_int, 22));
pub const M0PLUS_ICSR_ISRPENDING_LSB = _u(@as(c_int, 22));
pub const M0PLUS_ICSR_ISRPENDING_ACCESS = "RO";
pub const M0PLUS_ICSR_VECTPENDING_RESET = _u(@as(c_int, 0x000));
pub const M0PLUS_ICSR_VECTPENDING_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x001ff000, .hexadecimal));
pub const M0PLUS_ICSR_VECTPENDING_MSB = _u(@as(c_int, 20));
pub const M0PLUS_ICSR_VECTPENDING_LSB = _u(@as(c_int, 12));
pub const M0PLUS_ICSR_VECTPENDING_ACCESS = "RO";
pub const M0PLUS_ICSR_VECTACTIVE_RESET = _u(@as(c_int, 0x000));
pub const M0PLUS_ICSR_VECTACTIVE_BITS = _u(@as(c_int, 0x000001ff));
pub const M0PLUS_ICSR_VECTACTIVE_MSB = _u(@as(c_int, 8));
pub const M0PLUS_ICSR_VECTACTIVE_LSB = _u(@as(c_int, 0));
pub const M0PLUS_ICSR_VECTACTIVE_ACCESS = "RO";
pub const M0PLUS_VTOR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed08, .hexadecimal));
pub const M0PLUS_VTOR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff00, .hexadecimal));
pub const M0PLUS_VTOR_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_VTOR_TBLOFF_RESET = _u(@as(c_int, 0x000000));
pub const M0PLUS_VTOR_TBLOFF_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff00, .hexadecimal));
pub const M0PLUS_VTOR_TBLOFF_MSB = _u(@as(c_int, 31));
pub const M0PLUS_VTOR_TBLOFF_LSB = _u(@as(c_int, 8));
pub const M0PLUS_VTOR_TBLOFF_ACCESS = "RW";
pub const M0PLUS_AIRCR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed0c, .hexadecimal));
pub const M0PLUS_AIRCR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff8006, .hexadecimal));
pub const M0PLUS_AIRCR_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_AIRCR_VECTKEY_RESET = _u(@as(c_int, 0x0000));
pub const M0PLUS_AIRCR_VECTKEY_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff0000, .hexadecimal));
pub const M0PLUS_AIRCR_VECTKEY_MSB = _u(@as(c_int, 31));
pub const M0PLUS_AIRCR_VECTKEY_LSB = _u(@as(c_int, 16));
pub const M0PLUS_AIRCR_VECTKEY_ACCESS = "RW";
pub const M0PLUS_AIRCR_ENDIANESS_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_AIRCR_ENDIANESS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const M0PLUS_AIRCR_ENDIANESS_MSB = _u(@as(c_int, 15));
pub const M0PLUS_AIRCR_ENDIANESS_LSB = _u(@as(c_int, 15));
pub const M0PLUS_AIRCR_ENDIANESS_ACCESS = "RO";
pub const M0PLUS_AIRCR_SYSRESETREQ_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_AIRCR_SYSRESETREQ_BITS = _u(@as(c_int, 0x00000004));
pub const M0PLUS_AIRCR_SYSRESETREQ_MSB = _u(@as(c_int, 2));
pub const M0PLUS_AIRCR_SYSRESETREQ_LSB = _u(@as(c_int, 2));
pub const M0PLUS_AIRCR_SYSRESETREQ_ACCESS = "RW";
pub const M0PLUS_AIRCR_VECTCLRACTIVE_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_AIRCR_VECTCLRACTIVE_BITS = _u(@as(c_int, 0x00000002));
pub const M0PLUS_AIRCR_VECTCLRACTIVE_MSB = _u(@as(c_int, 1));
pub const M0PLUS_AIRCR_VECTCLRACTIVE_LSB = _u(@as(c_int, 1));
pub const M0PLUS_AIRCR_VECTCLRACTIVE_ACCESS = "RW";
pub const M0PLUS_SCR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed10, .hexadecimal));
pub const M0PLUS_SCR_BITS = _u(@as(c_int, 0x00000016));
pub const M0PLUS_SCR_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_SCR_SEVONPEND_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_SCR_SEVONPEND_BITS = _u(@as(c_int, 0x00000010));
pub const M0PLUS_SCR_SEVONPEND_MSB = _u(@as(c_int, 4));
pub const M0PLUS_SCR_SEVONPEND_LSB = _u(@as(c_int, 4));
pub const M0PLUS_SCR_SEVONPEND_ACCESS = "RW";
pub const M0PLUS_SCR_SLEEPDEEP_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_SCR_SLEEPDEEP_BITS = _u(@as(c_int, 0x00000004));
pub const M0PLUS_SCR_SLEEPDEEP_MSB = _u(@as(c_int, 2));
pub const M0PLUS_SCR_SLEEPDEEP_LSB = _u(@as(c_int, 2));
pub const M0PLUS_SCR_SLEEPDEEP_ACCESS = "RW";
pub const M0PLUS_SCR_SLEEPONEXIT_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_SCR_SLEEPONEXIT_BITS = _u(@as(c_int, 0x00000002));
pub const M0PLUS_SCR_SLEEPONEXIT_MSB = _u(@as(c_int, 1));
pub const M0PLUS_SCR_SLEEPONEXIT_LSB = _u(@as(c_int, 1));
pub const M0PLUS_SCR_SLEEPONEXIT_ACCESS = "RW";
pub const M0PLUS_CCR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed14, .hexadecimal));
pub const M0PLUS_CCR_BITS = _u(@as(c_int, 0x00000208));
pub const M0PLUS_CCR_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_CCR_STKALIGN_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_CCR_STKALIGN_BITS = _u(@as(c_int, 0x00000200));
pub const M0PLUS_CCR_STKALIGN_MSB = _u(@as(c_int, 9));
pub const M0PLUS_CCR_STKALIGN_LSB = _u(@as(c_int, 9));
pub const M0PLUS_CCR_STKALIGN_ACCESS = "RO";
pub const M0PLUS_CCR_UNALIGN_TRP_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_CCR_UNALIGN_TRP_BITS = _u(@as(c_int, 0x00000008));
pub const M0PLUS_CCR_UNALIGN_TRP_MSB = _u(@as(c_int, 3));
pub const M0PLUS_CCR_UNALIGN_TRP_LSB = _u(@as(c_int, 3));
pub const M0PLUS_CCR_UNALIGN_TRP_ACCESS = "RO";
pub const M0PLUS_SHPR2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed1c, .hexadecimal));
pub const M0PLUS_SHPR2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0000000, .hexadecimal));
pub const M0PLUS_SHPR2_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_SHPR2_PRI_11_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_SHPR2_PRI_11_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0000000, .hexadecimal));
pub const M0PLUS_SHPR2_PRI_11_MSB = _u(@as(c_int, 31));
pub const M0PLUS_SHPR2_PRI_11_LSB = _u(@as(c_int, 30));
pub const M0PLUS_SHPR2_PRI_11_ACCESS = "RW";
pub const M0PLUS_SHPR3_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed20, .hexadecimal));
pub const M0PLUS_SHPR3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0c00000, .hexadecimal));
pub const M0PLUS_SHPR3_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_SHPR3_PRI_15_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_SHPR3_PRI_15_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0000000, .hexadecimal));
pub const M0PLUS_SHPR3_PRI_15_MSB = _u(@as(c_int, 31));
pub const M0PLUS_SHPR3_PRI_15_LSB = _u(@as(c_int, 30));
pub const M0PLUS_SHPR3_PRI_15_ACCESS = "RW";
pub const M0PLUS_SHPR3_PRI_14_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_SHPR3_PRI_14_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00c00000, .hexadecimal));
pub const M0PLUS_SHPR3_PRI_14_MSB = _u(@as(c_int, 23));
pub const M0PLUS_SHPR3_PRI_14_LSB = _u(@as(c_int, 22));
pub const M0PLUS_SHPR3_PRI_14_ACCESS = "RW";
pub const M0PLUS_SHCSR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed24, .hexadecimal));
pub const M0PLUS_SHCSR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const M0PLUS_SHCSR_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_SHCSR_SVCALLPENDED_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_SHCSR_SVCALLPENDED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const M0PLUS_SHCSR_SVCALLPENDED_MSB = _u(@as(c_int, 15));
pub const M0PLUS_SHCSR_SVCALLPENDED_LSB = _u(@as(c_int, 15));
pub const M0PLUS_SHCSR_SVCALLPENDED_ACCESS = "RW";
pub const M0PLUS_MPU_TYPE_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed90, .hexadecimal));
pub const M0PLUS_MPU_TYPE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffff01, .hexadecimal));
pub const M0PLUS_MPU_TYPE_RESET = _u(@as(c_int, 0x00000800));
pub const M0PLUS_MPU_TYPE_IREGION_RESET = _u(@as(c_int, 0x00));
pub const M0PLUS_MPU_TYPE_IREGION_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ff0000, .hexadecimal));
pub const M0PLUS_MPU_TYPE_IREGION_MSB = _u(@as(c_int, 23));
pub const M0PLUS_MPU_TYPE_IREGION_LSB = _u(@as(c_int, 16));
pub const M0PLUS_MPU_TYPE_IREGION_ACCESS = "RO";
pub const M0PLUS_MPU_TYPE_DREGION_RESET = _u(@as(c_int, 0x08));
pub const M0PLUS_MPU_TYPE_DREGION_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ff00, .hexadecimal));
pub const M0PLUS_MPU_TYPE_DREGION_MSB = _u(@as(c_int, 15));
pub const M0PLUS_MPU_TYPE_DREGION_LSB = _u(@as(c_int, 8));
pub const M0PLUS_MPU_TYPE_DREGION_ACCESS = "RO";
pub const M0PLUS_MPU_TYPE_SEPARATE_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_MPU_TYPE_SEPARATE_BITS = _u(@as(c_int, 0x00000001));
pub const M0PLUS_MPU_TYPE_SEPARATE_MSB = _u(@as(c_int, 0));
pub const M0PLUS_MPU_TYPE_SEPARATE_LSB = _u(@as(c_int, 0));
pub const M0PLUS_MPU_TYPE_SEPARATE_ACCESS = "RO";
pub const M0PLUS_MPU_CTRL_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed94, .hexadecimal));
pub const M0PLUS_MPU_CTRL_BITS = _u(@as(c_int, 0x00000007));
pub const M0PLUS_MPU_CTRL_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_MPU_CTRL_PRIVDEFENA_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_MPU_CTRL_PRIVDEFENA_BITS = _u(@as(c_int, 0x00000004));
pub const M0PLUS_MPU_CTRL_PRIVDEFENA_MSB = _u(@as(c_int, 2));
pub const M0PLUS_MPU_CTRL_PRIVDEFENA_LSB = _u(@as(c_int, 2));
pub const M0PLUS_MPU_CTRL_PRIVDEFENA_ACCESS = "RW";
pub const M0PLUS_MPU_CTRL_HFNMIENA_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_MPU_CTRL_HFNMIENA_BITS = _u(@as(c_int, 0x00000002));
pub const M0PLUS_MPU_CTRL_HFNMIENA_MSB = _u(@as(c_int, 1));
pub const M0PLUS_MPU_CTRL_HFNMIENA_LSB = _u(@as(c_int, 1));
pub const M0PLUS_MPU_CTRL_HFNMIENA_ACCESS = "RW";
pub const M0PLUS_MPU_CTRL_ENABLE_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_MPU_CTRL_ENABLE_BITS = _u(@as(c_int, 0x00000001));
pub const M0PLUS_MPU_CTRL_ENABLE_MSB = _u(@as(c_int, 0));
pub const M0PLUS_MPU_CTRL_ENABLE_LSB = _u(@as(c_int, 0));
pub const M0PLUS_MPU_CTRL_ENABLE_ACCESS = "RW";
pub const M0PLUS_MPU_RNR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed98, .hexadecimal));
pub const M0PLUS_MPU_RNR_BITS = _u(@as(c_int, 0x0000000f));
pub const M0PLUS_MPU_RNR_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_MPU_RNR_REGION_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_MPU_RNR_REGION_BITS = _u(@as(c_int, 0x0000000f));
pub const M0PLUS_MPU_RNR_REGION_MSB = _u(@as(c_int, 3));
pub const M0PLUS_MPU_RNR_REGION_LSB = _u(@as(c_int, 0));
pub const M0PLUS_MPU_RNR_REGION_ACCESS = "RW";
pub const M0PLUS_MPU_RBAR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed9c, .hexadecimal));
pub const M0PLUS_MPU_RBAR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff1f, .hexadecimal));
pub const M0PLUS_MPU_RBAR_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_MPU_RBAR_ADDR_RESET = _u(@as(c_int, 0x000000));
pub const M0PLUS_MPU_RBAR_ADDR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff00, .hexadecimal));
pub const M0PLUS_MPU_RBAR_ADDR_MSB = _u(@as(c_int, 31));
pub const M0PLUS_MPU_RBAR_ADDR_LSB = _u(@as(c_int, 8));
pub const M0PLUS_MPU_RBAR_ADDR_ACCESS = "RW";
pub const M0PLUS_MPU_RBAR_VALID_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_MPU_RBAR_VALID_BITS = _u(@as(c_int, 0x00000010));
pub const M0PLUS_MPU_RBAR_VALID_MSB = _u(@as(c_int, 4));
pub const M0PLUS_MPU_RBAR_VALID_LSB = _u(@as(c_int, 4));
pub const M0PLUS_MPU_RBAR_VALID_ACCESS = "RW";
pub const M0PLUS_MPU_RBAR_REGION_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_MPU_RBAR_REGION_BITS = _u(@as(c_int, 0x0000000f));
pub const M0PLUS_MPU_RBAR_REGION_MSB = _u(@as(c_int, 3));
pub const M0PLUS_MPU_RBAR_REGION_LSB = _u(@as(c_int, 0));
pub const M0PLUS_MPU_RBAR_REGION_ACCESS = "RW";
pub const M0PLUS_MPU_RASR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000eda0, .hexadecimal));
pub const M0PLUS_MPU_RASR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff3f, .hexadecimal));
pub const M0PLUS_MPU_RASR_RESET = _u(@as(c_int, 0x00000000));
pub const M0PLUS_MPU_RASR_ATTRS_RESET = _u(@as(c_int, 0x0000));
pub const M0PLUS_MPU_RASR_ATTRS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff0000, .hexadecimal));
pub const M0PLUS_MPU_RASR_ATTRS_MSB = _u(@as(c_int, 31));
pub const M0PLUS_MPU_RASR_ATTRS_LSB = _u(@as(c_int, 16));
pub const M0PLUS_MPU_RASR_ATTRS_ACCESS = "RW";
pub const M0PLUS_MPU_RASR_SRD_RESET = _u(@as(c_int, 0x00));
pub const M0PLUS_MPU_RASR_SRD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ff00, .hexadecimal));
pub const M0PLUS_MPU_RASR_SRD_MSB = _u(@as(c_int, 15));
pub const M0PLUS_MPU_RASR_SRD_LSB = _u(@as(c_int, 8));
pub const M0PLUS_MPU_RASR_SRD_ACCESS = "RW";
pub const M0PLUS_MPU_RASR_SIZE_RESET = _u(@as(c_int, 0x00));
pub const M0PLUS_MPU_RASR_SIZE_BITS = _u(@as(c_int, 0x0000003e));
pub const M0PLUS_MPU_RASR_SIZE_MSB = _u(@as(c_int, 5));
pub const M0PLUS_MPU_RASR_SIZE_LSB = _u(@as(c_int, 1));
pub const M0PLUS_MPU_RASR_SIZE_ACCESS = "RW";
pub const M0PLUS_MPU_RASR_ENABLE_RESET = _u(@as(c_int, 0x0));
pub const M0PLUS_MPU_RASR_ENABLE_BITS = _u(@as(c_int, 0x00000001));
pub const M0PLUS_MPU_RASR_ENABLE_MSB = _u(@as(c_int, 0));
pub const M0PLUS_MPU_RASR_ENABLE_LSB = _u(@as(c_int, 0));
pub const M0PLUS_MPU_RASR_ENABLE_ACCESS = "RW";
pub const PICO_DEFAULT_IRQ_PRIORITY = @as(c_int, 0x80);
pub const PICO_LOWEST_IRQ_PRIORITY = @as(c_int, 0xff);
pub const PICO_HIGHEST_IRQ_PRIORITY = @as(c_int, 0x00);
pub const PICO_SHARED_IRQ_HANDLER_DEFAULT_ORDER_PRIORITY = @as(c_int, 0x80);
pub const PICO_SHARED_IRQ_HANDLER_HIGHEST_ORDER_PRIORITY = @as(c_int, 0xff);
pub const PICO_SHARED_IRQ_HANDLER_LOWEST_ORDER_PRIORITY = @as(c_int, 0x00);
pub const PARAM_ASSERTIONS_ENABLED_IRQ = @as(c_int, 0);
pub const PARAM_ASSERTIONS_ENABLED_GPIO = @as(c_int, 0);
pub const GPIO_OUT = @as(c_int, 1);
pub const GPIO_IN = @as(c_int, 0);
pub const GPIO_IRQ_CALLBACK_ORDER_PRIORITY = PICO_SHARED_IRQ_HANDLER_LOWEST_ORDER_PRIORITY;
pub const GPIO_RAW_IRQ_HANDLER_DEFAULT_ORDER_PRIORITY = PICO_SHARED_IRQ_HANDLER_DEFAULT_ORDER_PRIORITY;
pub const PICO_DEBUG_PIN_BASE = @as(c_uint, 19);
pub const PICO_DEBUG_PIN_COUNT = @as(c_uint, 3);
pub const _HARDWARE_UART_H = "";
pub const _HARDWARE_STRUCTS_UART_H = "";
pub const HARDWARE_REGS_UART_DEFINED = "";
pub const UART_UARTDR_OFFSET = _u(@as(c_int, 0x00000000));
pub const UART_UARTDR_BITS = _u(@as(c_int, 0x00000fff));
pub const UART_UARTDR_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTDR_OE_RESET = "-";
pub const UART_UARTDR_OE_BITS = _u(@as(c_int, 0x00000800));
pub const UART_UARTDR_OE_MSB = _u(@as(c_int, 11));
pub const UART_UARTDR_OE_LSB = _u(@as(c_int, 11));
pub const UART_UARTDR_OE_ACCESS = "RO";
pub const UART_UARTDR_BE_RESET = "-";
pub const UART_UARTDR_BE_BITS = _u(@as(c_int, 0x00000400));
pub const UART_UARTDR_BE_MSB = _u(@as(c_int, 10));
pub const UART_UARTDR_BE_LSB = _u(@as(c_int, 10));
pub const UART_UARTDR_BE_ACCESS = "RO";
pub const UART_UARTDR_PE_RESET = "-";
pub const UART_UARTDR_PE_BITS = _u(@as(c_int, 0x00000200));
pub const UART_UARTDR_PE_MSB = _u(@as(c_int, 9));
pub const UART_UARTDR_PE_LSB = _u(@as(c_int, 9));
pub const UART_UARTDR_PE_ACCESS = "RO";
pub const UART_UARTDR_FE_RESET = "-";
pub const UART_UARTDR_FE_BITS = _u(@as(c_int, 0x00000100));
pub const UART_UARTDR_FE_MSB = _u(@as(c_int, 8));
pub const UART_UARTDR_FE_LSB = _u(@as(c_int, 8));
pub const UART_UARTDR_FE_ACCESS = "RO";
pub const UART_UARTDR_DATA_RESET = "-";
pub const UART_UARTDR_DATA_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTDR_DATA_MSB = _u(@as(c_int, 7));
pub const UART_UARTDR_DATA_LSB = _u(@as(c_int, 0));
pub const UART_UARTDR_DATA_ACCESS = "RWF";
pub const UART_UARTRSR_OFFSET = _u(@as(c_int, 0x00000004));
pub const UART_UARTRSR_BITS = _u(@as(c_int, 0x0000000f));
pub const UART_UARTRSR_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTRSR_OE_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRSR_OE_BITS = _u(@as(c_int, 0x00000008));
pub const UART_UARTRSR_OE_MSB = _u(@as(c_int, 3));
pub const UART_UARTRSR_OE_LSB = _u(@as(c_int, 3));
pub const UART_UARTRSR_OE_ACCESS = "WC";
pub const UART_UARTRSR_BE_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRSR_BE_BITS = _u(@as(c_int, 0x00000004));
pub const UART_UARTRSR_BE_MSB = _u(@as(c_int, 2));
pub const UART_UARTRSR_BE_LSB = _u(@as(c_int, 2));
pub const UART_UARTRSR_BE_ACCESS = "WC";
pub const UART_UARTRSR_PE_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRSR_PE_BITS = _u(@as(c_int, 0x00000002));
pub const UART_UARTRSR_PE_MSB = _u(@as(c_int, 1));
pub const UART_UARTRSR_PE_LSB = _u(@as(c_int, 1));
pub const UART_UARTRSR_PE_ACCESS = "WC";
pub const UART_UARTRSR_FE_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRSR_FE_BITS = _u(@as(c_int, 0x00000001));
pub const UART_UARTRSR_FE_MSB = _u(@as(c_int, 0));
pub const UART_UARTRSR_FE_LSB = _u(@as(c_int, 0));
pub const UART_UARTRSR_FE_ACCESS = "WC";
pub const UART_UARTFR_OFFSET = _u(@as(c_int, 0x00000018));
pub const UART_UARTFR_BITS = _u(@as(c_int, 0x000001ff));
pub const UART_UARTFR_RESET = _u(@as(c_int, 0x00000090));
pub const UART_UARTFR_RI_RESET = "-";
pub const UART_UARTFR_RI_BITS = _u(@as(c_int, 0x00000100));
pub const UART_UARTFR_RI_MSB = _u(@as(c_int, 8));
pub const UART_UARTFR_RI_LSB = _u(@as(c_int, 8));
pub const UART_UARTFR_RI_ACCESS = "RO";
pub const UART_UARTFR_TXFE_RESET = _u(@as(c_int, 0x1));
pub const UART_UARTFR_TXFE_BITS = _u(@as(c_int, 0x00000080));
pub const UART_UARTFR_TXFE_MSB = _u(@as(c_int, 7));
pub const UART_UARTFR_TXFE_LSB = _u(@as(c_int, 7));
pub const UART_UARTFR_TXFE_ACCESS = "RO";
pub const UART_UARTFR_RXFF_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTFR_RXFF_BITS = _u(@as(c_int, 0x00000040));
pub const UART_UARTFR_RXFF_MSB = _u(@as(c_int, 6));
pub const UART_UARTFR_RXFF_LSB = _u(@as(c_int, 6));
pub const UART_UARTFR_RXFF_ACCESS = "RO";
pub const UART_UARTFR_TXFF_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTFR_TXFF_BITS = _u(@as(c_int, 0x00000020));
pub const UART_UARTFR_TXFF_MSB = _u(@as(c_int, 5));
pub const UART_UARTFR_TXFF_LSB = _u(@as(c_int, 5));
pub const UART_UARTFR_TXFF_ACCESS = "RO";
pub const UART_UARTFR_RXFE_RESET = _u(@as(c_int, 0x1));
pub const UART_UARTFR_RXFE_BITS = _u(@as(c_int, 0x00000010));
pub const UART_UARTFR_RXFE_MSB = _u(@as(c_int, 4));
pub const UART_UARTFR_RXFE_LSB = _u(@as(c_int, 4));
pub const UART_UARTFR_RXFE_ACCESS = "RO";
pub const UART_UARTFR_BUSY_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTFR_BUSY_BITS = _u(@as(c_int, 0x00000008));
pub const UART_UARTFR_BUSY_MSB = _u(@as(c_int, 3));
pub const UART_UARTFR_BUSY_LSB = _u(@as(c_int, 3));
pub const UART_UARTFR_BUSY_ACCESS = "RO";
pub const UART_UARTFR_DCD_RESET = "-";
pub const UART_UARTFR_DCD_BITS = _u(@as(c_int, 0x00000004));
pub const UART_UARTFR_DCD_MSB = _u(@as(c_int, 2));
pub const UART_UARTFR_DCD_LSB = _u(@as(c_int, 2));
pub const UART_UARTFR_DCD_ACCESS = "RO";
pub const UART_UARTFR_DSR_RESET = "-";
pub const UART_UARTFR_DSR_BITS = _u(@as(c_int, 0x00000002));
pub const UART_UARTFR_DSR_MSB = _u(@as(c_int, 1));
pub const UART_UARTFR_DSR_LSB = _u(@as(c_int, 1));
pub const UART_UARTFR_DSR_ACCESS = "RO";
pub const UART_UARTFR_CTS_RESET = "-";
pub const UART_UARTFR_CTS_BITS = _u(@as(c_int, 0x00000001));
pub const UART_UARTFR_CTS_MSB = _u(@as(c_int, 0));
pub const UART_UARTFR_CTS_LSB = _u(@as(c_int, 0));
pub const UART_UARTFR_CTS_ACCESS = "RO";
pub const UART_UARTILPR_OFFSET = _u(@as(c_int, 0x00000020));
pub const UART_UARTILPR_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTILPR_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTILPR_ILPDVSR_RESET = _u(@as(c_int, 0x00));
pub const UART_UARTILPR_ILPDVSR_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTILPR_ILPDVSR_MSB = _u(@as(c_int, 7));
pub const UART_UARTILPR_ILPDVSR_LSB = _u(@as(c_int, 0));
pub const UART_UARTILPR_ILPDVSR_ACCESS = "RW";
pub const UART_UARTIBRD_OFFSET = _u(@as(c_int, 0x00000024));
pub const UART_UARTIBRD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const UART_UARTIBRD_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTIBRD_BAUD_DIVINT_RESET = _u(@as(c_int, 0x0000));
pub const UART_UARTIBRD_BAUD_DIVINT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const UART_UARTIBRD_BAUD_DIVINT_MSB = _u(@as(c_int, 15));
pub const UART_UARTIBRD_BAUD_DIVINT_LSB = _u(@as(c_int, 0));
pub const UART_UARTIBRD_BAUD_DIVINT_ACCESS = "RW";
pub const UART_UARTFBRD_OFFSET = _u(@as(c_int, 0x00000028));
pub const UART_UARTFBRD_BITS = _u(@as(c_int, 0x0000003f));
pub const UART_UARTFBRD_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTFBRD_BAUD_DIVFRAC_RESET = _u(@as(c_int, 0x00));
pub const UART_UARTFBRD_BAUD_DIVFRAC_BITS = _u(@as(c_int, 0x0000003f));
pub const UART_UARTFBRD_BAUD_DIVFRAC_MSB = _u(@as(c_int, 5));
pub const UART_UARTFBRD_BAUD_DIVFRAC_LSB = _u(@as(c_int, 0));
pub const UART_UARTFBRD_BAUD_DIVFRAC_ACCESS = "RW";
pub const UART_UARTLCR_H_OFFSET = _u(@as(c_int, 0x0000002c));
pub const UART_UARTLCR_H_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTLCR_H_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTLCR_H_SPS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTLCR_H_SPS_BITS = _u(@as(c_int, 0x00000080));
pub const UART_UARTLCR_H_SPS_MSB = _u(@as(c_int, 7));
pub const UART_UARTLCR_H_SPS_LSB = _u(@as(c_int, 7));
pub const UART_UARTLCR_H_SPS_ACCESS = "RW";
pub const UART_UARTLCR_H_WLEN_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTLCR_H_WLEN_BITS = _u(@as(c_int, 0x00000060));
pub const UART_UARTLCR_H_WLEN_MSB = _u(@as(c_int, 6));
pub const UART_UARTLCR_H_WLEN_LSB = _u(@as(c_int, 5));
pub const UART_UARTLCR_H_WLEN_ACCESS = "RW";
pub const UART_UARTLCR_H_FEN_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTLCR_H_FEN_BITS = _u(@as(c_int, 0x00000010));
pub const UART_UARTLCR_H_FEN_MSB = _u(@as(c_int, 4));
pub const UART_UARTLCR_H_FEN_LSB = _u(@as(c_int, 4));
pub const UART_UARTLCR_H_FEN_ACCESS = "RW";
pub const UART_UARTLCR_H_STP2_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTLCR_H_STP2_BITS = _u(@as(c_int, 0x00000008));
pub const UART_UARTLCR_H_STP2_MSB = _u(@as(c_int, 3));
pub const UART_UARTLCR_H_STP2_LSB = _u(@as(c_int, 3));
pub const UART_UARTLCR_H_STP2_ACCESS = "RW";
pub const UART_UARTLCR_H_EPS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTLCR_H_EPS_BITS = _u(@as(c_int, 0x00000004));
pub const UART_UARTLCR_H_EPS_MSB = _u(@as(c_int, 2));
pub const UART_UARTLCR_H_EPS_LSB = _u(@as(c_int, 2));
pub const UART_UARTLCR_H_EPS_ACCESS = "RW";
pub const UART_UARTLCR_H_PEN_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTLCR_H_PEN_BITS = _u(@as(c_int, 0x00000002));
pub const UART_UARTLCR_H_PEN_MSB = _u(@as(c_int, 1));
pub const UART_UARTLCR_H_PEN_LSB = _u(@as(c_int, 1));
pub const UART_UARTLCR_H_PEN_ACCESS = "RW";
pub const UART_UARTLCR_H_BRK_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTLCR_H_BRK_BITS = _u(@as(c_int, 0x00000001));
pub const UART_UARTLCR_H_BRK_MSB = _u(@as(c_int, 0));
pub const UART_UARTLCR_H_BRK_LSB = _u(@as(c_int, 0));
pub const UART_UARTLCR_H_BRK_ACCESS = "RW";
pub const UART_UARTCR_OFFSET = _u(@as(c_int, 0x00000030));
pub const UART_UARTCR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ff87, .hexadecimal));
pub const UART_UARTCR_RESET = _u(@as(c_int, 0x00000300));
pub const UART_UARTCR_CTSEN_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_CTSEN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const UART_UARTCR_CTSEN_MSB = _u(@as(c_int, 15));
pub const UART_UARTCR_CTSEN_LSB = _u(@as(c_int, 15));
pub const UART_UARTCR_CTSEN_ACCESS = "RW";
pub const UART_UARTCR_RTSEN_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_RTSEN_BITS = _u(@as(c_int, 0x00004000));
pub const UART_UARTCR_RTSEN_MSB = _u(@as(c_int, 14));
pub const UART_UARTCR_RTSEN_LSB = _u(@as(c_int, 14));
pub const UART_UARTCR_RTSEN_ACCESS = "RW";
pub const UART_UARTCR_OUT2_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_OUT2_BITS = _u(@as(c_int, 0x00002000));
pub const UART_UARTCR_OUT2_MSB = _u(@as(c_int, 13));
pub const UART_UARTCR_OUT2_LSB = _u(@as(c_int, 13));
pub const UART_UARTCR_OUT2_ACCESS = "RW";
pub const UART_UARTCR_OUT1_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_OUT1_BITS = _u(@as(c_int, 0x00001000));
pub const UART_UARTCR_OUT1_MSB = _u(@as(c_int, 12));
pub const UART_UARTCR_OUT1_LSB = _u(@as(c_int, 12));
pub const UART_UARTCR_OUT1_ACCESS = "RW";
pub const UART_UARTCR_RTS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_RTS_BITS = _u(@as(c_int, 0x00000800));
pub const UART_UARTCR_RTS_MSB = _u(@as(c_int, 11));
pub const UART_UARTCR_RTS_LSB = _u(@as(c_int, 11));
pub const UART_UARTCR_RTS_ACCESS = "RW";
pub const UART_UARTCR_DTR_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_DTR_BITS = _u(@as(c_int, 0x00000400));
pub const UART_UARTCR_DTR_MSB = _u(@as(c_int, 10));
pub const UART_UARTCR_DTR_LSB = _u(@as(c_int, 10));
pub const UART_UARTCR_DTR_ACCESS = "RW";
pub const UART_UARTCR_RXE_RESET = _u(@as(c_int, 0x1));
pub const UART_UARTCR_RXE_BITS = _u(@as(c_int, 0x00000200));
pub const UART_UARTCR_RXE_MSB = _u(@as(c_int, 9));
pub const UART_UARTCR_RXE_LSB = _u(@as(c_int, 9));
pub const UART_UARTCR_RXE_ACCESS = "RW";
pub const UART_UARTCR_TXE_RESET = _u(@as(c_int, 0x1));
pub const UART_UARTCR_TXE_BITS = _u(@as(c_int, 0x00000100));
pub const UART_UARTCR_TXE_MSB = _u(@as(c_int, 8));
pub const UART_UARTCR_TXE_LSB = _u(@as(c_int, 8));
pub const UART_UARTCR_TXE_ACCESS = "RW";
pub const UART_UARTCR_LBE_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_LBE_BITS = _u(@as(c_int, 0x00000080));
pub const UART_UARTCR_LBE_MSB = _u(@as(c_int, 7));
pub const UART_UARTCR_LBE_LSB = _u(@as(c_int, 7));
pub const UART_UARTCR_LBE_ACCESS = "RW";
pub const UART_UARTCR_SIRLP_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_SIRLP_BITS = _u(@as(c_int, 0x00000004));
pub const UART_UARTCR_SIRLP_MSB = _u(@as(c_int, 2));
pub const UART_UARTCR_SIRLP_LSB = _u(@as(c_int, 2));
pub const UART_UARTCR_SIRLP_ACCESS = "RW";
pub const UART_UARTCR_SIREN_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_SIREN_BITS = _u(@as(c_int, 0x00000002));
pub const UART_UARTCR_SIREN_MSB = _u(@as(c_int, 1));
pub const UART_UARTCR_SIREN_LSB = _u(@as(c_int, 1));
pub const UART_UARTCR_SIREN_ACCESS = "RW";
pub const UART_UARTCR_UARTEN_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_UARTEN_BITS = _u(@as(c_int, 0x00000001));
pub const UART_UARTCR_UARTEN_MSB = _u(@as(c_int, 0));
pub const UART_UARTCR_UARTEN_LSB = _u(@as(c_int, 0));
pub const UART_UARTCR_UARTEN_ACCESS = "RW";
pub const UART_UARTIFLS_OFFSET = _u(@as(c_int, 0x00000034));
pub const UART_UARTIFLS_BITS = _u(@as(c_int, 0x0000003f));
pub const UART_UARTIFLS_RESET = _u(@as(c_int, 0x00000012));
pub const UART_UARTIFLS_RXIFLSEL_RESET = _u(@as(c_int, 0x2));
pub const UART_UARTIFLS_RXIFLSEL_BITS = _u(@as(c_int, 0x00000038));
pub const UART_UARTIFLS_RXIFLSEL_MSB = _u(@as(c_int, 5));
pub const UART_UARTIFLS_RXIFLSEL_LSB = _u(@as(c_int, 3));
pub const UART_UARTIFLS_RXIFLSEL_ACCESS = "RW";
pub const UART_UARTIFLS_TXIFLSEL_RESET = _u(@as(c_int, 0x2));
pub const UART_UARTIFLS_TXIFLSEL_BITS = _u(@as(c_int, 0x00000007));
pub const UART_UARTIFLS_TXIFLSEL_MSB = _u(@as(c_int, 2));
pub const UART_UARTIFLS_TXIFLSEL_LSB = _u(@as(c_int, 0));
pub const UART_UARTIFLS_TXIFLSEL_ACCESS = "RW";
pub const UART_UARTIMSC_OFFSET = _u(@as(c_int, 0x00000038));
pub const UART_UARTIMSC_BITS = _u(@as(c_int, 0x000007ff));
pub const UART_UARTIMSC_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTIMSC_OEIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_OEIM_BITS = _u(@as(c_int, 0x00000400));
pub const UART_UARTIMSC_OEIM_MSB = _u(@as(c_int, 10));
pub const UART_UARTIMSC_OEIM_LSB = _u(@as(c_int, 10));
pub const UART_UARTIMSC_OEIM_ACCESS = "RW";
pub const UART_UARTIMSC_BEIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_BEIM_BITS = _u(@as(c_int, 0x00000200));
pub const UART_UARTIMSC_BEIM_MSB = _u(@as(c_int, 9));
pub const UART_UARTIMSC_BEIM_LSB = _u(@as(c_int, 9));
pub const UART_UARTIMSC_BEIM_ACCESS = "RW";
pub const UART_UARTIMSC_PEIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_PEIM_BITS = _u(@as(c_int, 0x00000100));
pub const UART_UARTIMSC_PEIM_MSB = _u(@as(c_int, 8));
pub const UART_UARTIMSC_PEIM_LSB = _u(@as(c_int, 8));
pub const UART_UARTIMSC_PEIM_ACCESS = "RW";
pub const UART_UARTIMSC_FEIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_FEIM_BITS = _u(@as(c_int, 0x00000080));
pub const UART_UARTIMSC_FEIM_MSB = _u(@as(c_int, 7));
pub const UART_UARTIMSC_FEIM_LSB = _u(@as(c_int, 7));
pub const UART_UARTIMSC_FEIM_ACCESS = "RW";
pub const UART_UARTIMSC_RTIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_RTIM_BITS = _u(@as(c_int, 0x00000040));
pub const UART_UARTIMSC_RTIM_MSB = _u(@as(c_int, 6));
pub const UART_UARTIMSC_RTIM_LSB = _u(@as(c_int, 6));
pub const UART_UARTIMSC_RTIM_ACCESS = "RW";
pub const UART_UARTIMSC_TXIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_TXIM_BITS = _u(@as(c_int, 0x00000020));
pub const UART_UARTIMSC_TXIM_MSB = _u(@as(c_int, 5));
pub const UART_UARTIMSC_TXIM_LSB = _u(@as(c_int, 5));
pub const UART_UARTIMSC_TXIM_ACCESS = "RW";
pub const UART_UARTIMSC_RXIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_RXIM_BITS = _u(@as(c_int, 0x00000010));
pub const UART_UARTIMSC_RXIM_MSB = _u(@as(c_int, 4));
pub const UART_UARTIMSC_RXIM_LSB = _u(@as(c_int, 4));
pub const UART_UARTIMSC_RXIM_ACCESS = "RW";
pub const UART_UARTIMSC_DSRMIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_DSRMIM_BITS = _u(@as(c_int, 0x00000008));
pub const UART_UARTIMSC_DSRMIM_MSB = _u(@as(c_int, 3));
pub const UART_UARTIMSC_DSRMIM_LSB = _u(@as(c_int, 3));
pub const UART_UARTIMSC_DSRMIM_ACCESS = "RW";
pub const UART_UARTIMSC_DCDMIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_DCDMIM_BITS = _u(@as(c_int, 0x00000004));
pub const UART_UARTIMSC_DCDMIM_MSB = _u(@as(c_int, 2));
pub const UART_UARTIMSC_DCDMIM_LSB = _u(@as(c_int, 2));
pub const UART_UARTIMSC_DCDMIM_ACCESS = "RW";
pub const UART_UARTIMSC_CTSMIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_CTSMIM_BITS = _u(@as(c_int, 0x00000002));
pub const UART_UARTIMSC_CTSMIM_MSB = _u(@as(c_int, 1));
pub const UART_UARTIMSC_CTSMIM_LSB = _u(@as(c_int, 1));
pub const UART_UARTIMSC_CTSMIM_ACCESS = "RW";
pub const UART_UARTIMSC_RIMIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_RIMIM_BITS = _u(@as(c_int, 0x00000001));
pub const UART_UARTIMSC_RIMIM_MSB = _u(@as(c_int, 0));
pub const UART_UARTIMSC_RIMIM_LSB = _u(@as(c_int, 0));
pub const UART_UARTIMSC_RIMIM_ACCESS = "RW";
pub const UART_UARTRIS_OFFSET = _u(@as(c_int, 0x0000003c));
pub const UART_UARTRIS_BITS = _u(@as(c_int, 0x000007ff));
pub const UART_UARTRIS_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTRIS_OERIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRIS_OERIS_BITS = _u(@as(c_int, 0x00000400));
pub const UART_UARTRIS_OERIS_MSB = _u(@as(c_int, 10));
pub const UART_UARTRIS_OERIS_LSB = _u(@as(c_int, 10));
pub const UART_UARTRIS_OERIS_ACCESS = "RO";
pub const UART_UARTRIS_BERIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRIS_BERIS_BITS = _u(@as(c_int, 0x00000200));
pub const UART_UARTRIS_BERIS_MSB = _u(@as(c_int, 9));
pub const UART_UARTRIS_BERIS_LSB = _u(@as(c_int, 9));
pub const UART_UARTRIS_BERIS_ACCESS = "RO";
pub const UART_UARTRIS_PERIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRIS_PERIS_BITS = _u(@as(c_int, 0x00000100));
pub const UART_UARTRIS_PERIS_MSB = _u(@as(c_int, 8));
pub const UART_UARTRIS_PERIS_LSB = _u(@as(c_int, 8));
pub const UART_UARTRIS_PERIS_ACCESS = "RO";
pub const UART_UARTRIS_FERIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRIS_FERIS_BITS = _u(@as(c_int, 0x00000080));
pub const UART_UARTRIS_FERIS_MSB = _u(@as(c_int, 7));
pub const UART_UARTRIS_FERIS_LSB = _u(@as(c_int, 7));
pub const UART_UARTRIS_FERIS_ACCESS = "RO";
pub const UART_UARTRIS_RTRIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRIS_RTRIS_BITS = _u(@as(c_int, 0x00000040));
pub const UART_UARTRIS_RTRIS_MSB = _u(@as(c_int, 6));
pub const UART_UARTRIS_RTRIS_LSB = _u(@as(c_int, 6));
pub const UART_UARTRIS_RTRIS_ACCESS = "RO";
pub const UART_UARTRIS_TXRIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRIS_TXRIS_BITS = _u(@as(c_int, 0x00000020));
pub const UART_UARTRIS_TXRIS_MSB = _u(@as(c_int, 5));
pub const UART_UARTRIS_TXRIS_LSB = _u(@as(c_int, 5));
pub const UART_UARTRIS_TXRIS_ACCESS = "RO";
pub const UART_UARTRIS_RXRIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRIS_RXRIS_BITS = _u(@as(c_int, 0x00000010));
pub const UART_UARTRIS_RXRIS_MSB = _u(@as(c_int, 4));
pub const UART_UARTRIS_RXRIS_LSB = _u(@as(c_int, 4));
pub const UART_UARTRIS_RXRIS_ACCESS = "RO";
pub const UART_UARTRIS_DSRRMIS_RESET = "-";
pub const UART_UARTRIS_DSRRMIS_BITS = _u(@as(c_int, 0x00000008));
pub const UART_UARTRIS_DSRRMIS_MSB = _u(@as(c_int, 3));
pub const UART_UARTRIS_DSRRMIS_LSB = _u(@as(c_int, 3));
pub const UART_UARTRIS_DSRRMIS_ACCESS = "RO";
pub const UART_UARTRIS_DCDRMIS_RESET = "-";
pub const UART_UARTRIS_DCDRMIS_BITS = _u(@as(c_int, 0x00000004));
pub const UART_UARTRIS_DCDRMIS_MSB = _u(@as(c_int, 2));
pub const UART_UARTRIS_DCDRMIS_LSB = _u(@as(c_int, 2));
pub const UART_UARTRIS_DCDRMIS_ACCESS = "RO";
pub const UART_UARTRIS_CTSRMIS_RESET = "-";
pub const UART_UARTRIS_CTSRMIS_BITS = _u(@as(c_int, 0x00000002));
pub const UART_UARTRIS_CTSRMIS_MSB = _u(@as(c_int, 1));
pub const UART_UARTRIS_CTSRMIS_LSB = _u(@as(c_int, 1));
pub const UART_UARTRIS_CTSRMIS_ACCESS = "RO";
pub const UART_UARTRIS_RIRMIS_RESET = "-";
pub const UART_UARTRIS_RIRMIS_BITS = _u(@as(c_int, 0x00000001));
pub const UART_UARTRIS_RIRMIS_MSB = _u(@as(c_int, 0));
pub const UART_UARTRIS_RIRMIS_LSB = _u(@as(c_int, 0));
pub const UART_UARTRIS_RIRMIS_ACCESS = "RO";
pub const UART_UARTMIS_OFFSET = _u(@as(c_int, 0x00000040));
pub const UART_UARTMIS_BITS = _u(@as(c_int, 0x000007ff));
pub const UART_UARTMIS_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTMIS_OEMIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTMIS_OEMIS_BITS = _u(@as(c_int, 0x00000400));
pub const UART_UARTMIS_OEMIS_MSB = _u(@as(c_int, 10));
pub const UART_UARTMIS_OEMIS_LSB = _u(@as(c_int, 10));
pub const UART_UARTMIS_OEMIS_ACCESS = "RO";
pub const UART_UARTMIS_BEMIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTMIS_BEMIS_BITS = _u(@as(c_int, 0x00000200));
pub const UART_UARTMIS_BEMIS_MSB = _u(@as(c_int, 9));
pub const UART_UARTMIS_BEMIS_LSB = _u(@as(c_int, 9));
pub const UART_UARTMIS_BEMIS_ACCESS = "RO";
pub const UART_UARTMIS_PEMIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTMIS_PEMIS_BITS = _u(@as(c_int, 0x00000100));
pub const UART_UARTMIS_PEMIS_MSB = _u(@as(c_int, 8));
pub const UART_UARTMIS_PEMIS_LSB = _u(@as(c_int, 8));
pub const UART_UARTMIS_PEMIS_ACCESS = "RO";
pub const UART_UARTMIS_FEMIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTMIS_FEMIS_BITS = _u(@as(c_int, 0x00000080));
pub const UART_UARTMIS_FEMIS_MSB = _u(@as(c_int, 7));
pub const UART_UARTMIS_FEMIS_LSB = _u(@as(c_int, 7));
pub const UART_UARTMIS_FEMIS_ACCESS = "RO";
pub const UART_UARTMIS_RTMIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTMIS_RTMIS_BITS = _u(@as(c_int, 0x00000040));
pub const UART_UARTMIS_RTMIS_MSB = _u(@as(c_int, 6));
pub const UART_UARTMIS_RTMIS_LSB = _u(@as(c_int, 6));
pub const UART_UARTMIS_RTMIS_ACCESS = "RO";
pub const UART_UARTMIS_TXMIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTMIS_TXMIS_BITS = _u(@as(c_int, 0x00000020));
pub const UART_UARTMIS_TXMIS_MSB = _u(@as(c_int, 5));
pub const UART_UARTMIS_TXMIS_LSB = _u(@as(c_int, 5));
pub const UART_UARTMIS_TXMIS_ACCESS = "RO";
pub const UART_UARTMIS_RXMIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTMIS_RXMIS_BITS = _u(@as(c_int, 0x00000010));
pub const UART_UARTMIS_RXMIS_MSB = _u(@as(c_int, 4));
pub const UART_UARTMIS_RXMIS_LSB = _u(@as(c_int, 4));
pub const UART_UARTMIS_RXMIS_ACCESS = "RO";
pub const UART_UARTMIS_DSRMMIS_RESET = "-";
pub const UART_UARTMIS_DSRMMIS_BITS = _u(@as(c_int, 0x00000008));
pub const UART_UARTMIS_DSRMMIS_MSB = _u(@as(c_int, 3));
pub const UART_UARTMIS_DSRMMIS_LSB = _u(@as(c_int, 3));
pub const UART_UARTMIS_DSRMMIS_ACCESS = "RO";
pub const UART_UARTMIS_DCDMMIS_RESET = "-";
pub const UART_UARTMIS_DCDMMIS_BITS = _u(@as(c_int, 0x00000004));
pub const UART_UARTMIS_DCDMMIS_MSB = _u(@as(c_int, 2));
pub const UART_UARTMIS_DCDMMIS_LSB = _u(@as(c_int, 2));
pub const UART_UARTMIS_DCDMMIS_ACCESS = "RO";
pub const UART_UARTMIS_CTSMMIS_RESET = "-";
pub const UART_UARTMIS_CTSMMIS_BITS = _u(@as(c_int, 0x00000002));
pub const UART_UARTMIS_CTSMMIS_MSB = _u(@as(c_int, 1));
pub const UART_UARTMIS_CTSMMIS_LSB = _u(@as(c_int, 1));
pub const UART_UARTMIS_CTSMMIS_ACCESS = "RO";
pub const UART_UARTMIS_RIMMIS_RESET = "-";
pub const UART_UARTMIS_RIMMIS_BITS = _u(@as(c_int, 0x00000001));
pub const UART_UARTMIS_RIMMIS_MSB = _u(@as(c_int, 0));
pub const UART_UARTMIS_RIMMIS_LSB = _u(@as(c_int, 0));
pub const UART_UARTMIS_RIMMIS_ACCESS = "RO";
pub const UART_UARTICR_OFFSET = _u(@as(c_int, 0x00000044));
pub const UART_UARTICR_BITS = _u(@as(c_int, 0x000007ff));
pub const UART_UARTICR_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTICR_OEIC_RESET = "-";
pub const UART_UARTICR_OEIC_BITS = _u(@as(c_int, 0x00000400));
pub const UART_UARTICR_OEIC_MSB = _u(@as(c_int, 10));
pub const UART_UARTICR_OEIC_LSB = _u(@as(c_int, 10));
pub const UART_UARTICR_OEIC_ACCESS = "WC";
pub const UART_UARTICR_BEIC_RESET = "-";
pub const UART_UARTICR_BEIC_BITS = _u(@as(c_int, 0x00000200));
pub const UART_UARTICR_BEIC_MSB = _u(@as(c_int, 9));
pub const UART_UARTICR_BEIC_LSB = _u(@as(c_int, 9));
pub const UART_UARTICR_BEIC_ACCESS = "WC";
pub const UART_UARTICR_PEIC_RESET = "-";
pub const UART_UARTICR_PEIC_BITS = _u(@as(c_int, 0x00000100));
pub const UART_UARTICR_PEIC_MSB = _u(@as(c_int, 8));
pub const UART_UARTICR_PEIC_LSB = _u(@as(c_int, 8));
pub const UART_UARTICR_PEIC_ACCESS = "WC";
pub const UART_UARTICR_FEIC_RESET = "-";
pub const UART_UARTICR_FEIC_BITS = _u(@as(c_int, 0x00000080));
pub const UART_UARTICR_FEIC_MSB = _u(@as(c_int, 7));
pub const UART_UARTICR_FEIC_LSB = _u(@as(c_int, 7));
pub const UART_UARTICR_FEIC_ACCESS = "WC";
pub const UART_UARTICR_RTIC_RESET = "-";
pub const UART_UARTICR_RTIC_BITS = _u(@as(c_int, 0x00000040));
pub const UART_UARTICR_RTIC_MSB = _u(@as(c_int, 6));
pub const UART_UARTICR_RTIC_LSB = _u(@as(c_int, 6));
pub const UART_UARTICR_RTIC_ACCESS = "WC";
pub const UART_UARTICR_TXIC_RESET = "-";
pub const UART_UARTICR_TXIC_BITS = _u(@as(c_int, 0x00000020));
pub const UART_UARTICR_TXIC_MSB = _u(@as(c_int, 5));
pub const UART_UARTICR_TXIC_LSB = _u(@as(c_int, 5));
pub const UART_UARTICR_TXIC_ACCESS = "WC";
pub const UART_UARTICR_RXIC_RESET = "-";
pub const UART_UARTICR_RXIC_BITS = _u(@as(c_int, 0x00000010));
pub const UART_UARTICR_RXIC_MSB = _u(@as(c_int, 4));
pub const UART_UARTICR_RXIC_LSB = _u(@as(c_int, 4));
pub const UART_UARTICR_RXIC_ACCESS = "WC";
pub const UART_UARTICR_DSRMIC_RESET = "-";
pub const UART_UARTICR_DSRMIC_BITS = _u(@as(c_int, 0x00000008));
pub const UART_UARTICR_DSRMIC_MSB = _u(@as(c_int, 3));
pub const UART_UARTICR_DSRMIC_LSB = _u(@as(c_int, 3));
pub const UART_UARTICR_DSRMIC_ACCESS = "WC";
pub const UART_UARTICR_DCDMIC_RESET = "-";
pub const UART_UARTICR_DCDMIC_BITS = _u(@as(c_int, 0x00000004));
pub const UART_UARTICR_DCDMIC_MSB = _u(@as(c_int, 2));
pub const UART_UARTICR_DCDMIC_LSB = _u(@as(c_int, 2));
pub const UART_UARTICR_DCDMIC_ACCESS = "WC";
pub const UART_UARTICR_CTSMIC_RESET = "-";
pub const UART_UARTICR_CTSMIC_BITS = _u(@as(c_int, 0x00000002));
pub const UART_UARTICR_CTSMIC_MSB = _u(@as(c_int, 1));
pub const UART_UARTICR_CTSMIC_LSB = _u(@as(c_int, 1));
pub const UART_UARTICR_CTSMIC_ACCESS = "WC";
pub const UART_UARTICR_RIMIC_RESET = "-";
pub const UART_UARTICR_RIMIC_BITS = _u(@as(c_int, 0x00000001));
pub const UART_UARTICR_RIMIC_MSB = _u(@as(c_int, 0));
pub const UART_UARTICR_RIMIC_LSB = _u(@as(c_int, 0));
pub const UART_UARTICR_RIMIC_ACCESS = "WC";
pub const UART_UARTDMACR_OFFSET = _u(@as(c_int, 0x00000048));
pub const UART_UARTDMACR_BITS = _u(@as(c_int, 0x00000007));
pub const UART_UARTDMACR_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTDMACR_DMAONERR_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTDMACR_DMAONERR_BITS = _u(@as(c_int, 0x00000004));
pub const UART_UARTDMACR_DMAONERR_MSB = _u(@as(c_int, 2));
pub const UART_UARTDMACR_DMAONERR_LSB = _u(@as(c_int, 2));
pub const UART_UARTDMACR_DMAONERR_ACCESS = "RW";
pub const UART_UARTDMACR_TXDMAE_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTDMACR_TXDMAE_BITS = _u(@as(c_int, 0x00000002));
pub const UART_UARTDMACR_TXDMAE_MSB = _u(@as(c_int, 1));
pub const UART_UARTDMACR_TXDMAE_LSB = _u(@as(c_int, 1));
pub const UART_UARTDMACR_TXDMAE_ACCESS = "RW";
pub const UART_UARTDMACR_RXDMAE_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTDMACR_RXDMAE_BITS = _u(@as(c_int, 0x00000001));
pub const UART_UARTDMACR_RXDMAE_MSB = _u(@as(c_int, 0));
pub const UART_UARTDMACR_RXDMAE_LSB = _u(@as(c_int, 0));
pub const UART_UARTDMACR_RXDMAE_ACCESS = "RW";
pub const UART_UARTPERIPHID0_OFFSET = _u(@as(c_int, 0x00000fe0));
pub const UART_UARTPERIPHID0_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPERIPHID0_RESET = _u(@as(c_int, 0x00000011));
pub const UART_UARTPERIPHID0_PARTNUMBER0_RESET = _u(@as(c_int, 0x11));
pub const UART_UARTPERIPHID0_PARTNUMBER0_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPERIPHID0_PARTNUMBER0_MSB = _u(@as(c_int, 7));
pub const UART_UARTPERIPHID0_PARTNUMBER0_LSB = _u(@as(c_int, 0));
pub const UART_UARTPERIPHID0_PARTNUMBER0_ACCESS = "RO";
pub const UART_UARTPERIPHID1_OFFSET = _u(@as(c_int, 0x00000fe4));
pub const UART_UARTPERIPHID1_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPERIPHID1_RESET = _u(@as(c_int, 0x00000010));
pub const UART_UARTPERIPHID1_DESIGNER0_RESET = _u(@as(c_int, 0x1));
pub const UART_UARTPERIPHID1_DESIGNER0_BITS = _u(@as(c_int, 0x000000f0));
pub const UART_UARTPERIPHID1_DESIGNER0_MSB = _u(@as(c_int, 7));
pub const UART_UARTPERIPHID1_DESIGNER0_LSB = _u(@as(c_int, 4));
pub const UART_UARTPERIPHID1_DESIGNER0_ACCESS = "RO";
pub const UART_UARTPERIPHID1_PARTNUMBER1_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTPERIPHID1_PARTNUMBER1_BITS = _u(@as(c_int, 0x0000000f));
pub const UART_UARTPERIPHID1_PARTNUMBER1_MSB = _u(@as(c_int, 3));
pub const UART_UARTPERIPHID1_PARTNUMBER1_LSB = _u(@as(c_int, 0));
pub const UART_UARTPERIPHID1_PARTNUMBER1_ACCESS = "RO";
pub const UART_UARTPERIPHID2_OFFSET = _u(@as(c_int, 0x00000fe8));
pub const UART_UARTPERIPHID2_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPERIPHID2_RESET = _u(@as(c_int, 0x00000034));
pub const UART_UARTPERIPHID2_REVISION_RESET = _u(@as(c_int, 0x3));
pub const UART_UARTPERIPHID2_REVISION_BITS = _u(@as(c_int, 0x000000f0));
pub const UART_UARTPERIPHID2_REVISION_MSB = _u(@as(c_int, 7));
pub const UART_UARTPERIPHID2_REVISION_LSB = _u(@as(c_int, 4));
pub const UART_UARTPERIPHID2_REVISION_ACCESS = "RO";
pub const UART_UARTPERIPHID2_DESIGNER1_RESET = _u(@as(c_int, 0x4));
pub const UART_UARTPERIPHID2_DESIGNER1_BITS = _u(@as(c_int, 0x0000000f));
pub const UART_UARTPERIPHID2_DESIGNER1_MSB = _u(@as(c_int, 3));
pub const UART_UARTPERIPHID2_DESIGNER1_LSB = _u(@as(c_int, 0));
pub const UART_UARTPERIPHID2_DESIGNER1_ACCESS = "RO";
pub const UART_UARTPERIPHID3_OFFSET = _u(@as(c_int, 0x00000fec));
pub const UART_UARTPERIPHID3_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPERIPHID3_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTPERIPHID3_CONFIGURATION_RESET = _u(@as(c_int, 0x00));
pub const UART_UARTPERIPHID3_CONFIGURATION_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPERIPHID3_CONFIGURATION_MSB = _u(@as(c_int, 7));
pub const UART_UARTPERIPHID3_CONFIGURATION_LSB = _u(@as(c_int, 0));
pub const UART_UARTPERIPHID3_CONFIGURATION_ACCESS = "RO";
pub const UART_UARTPCELLID0_OFFSET = _u(@as(c_int, 0x00000ff0));
pub const UART_UARTPCELLID0_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPCELLID0_RESET = _u(@as(c_int, 0x0000000d));
pub const UART_UARTPCELLID0_UARTPCELLID0_RESET = _u(@as(c_int, 0x0d));
pub const UART_UARTPCELLID0_UARTPCELLID0_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPCELLID0_UARTPCELLID0_MSB = _u(@as(c_int, 7));
pub const UART_UARTPCELLID0_UARTPCELLID0_LSB = _u(@as(c_int, 0));
pub const UART_UARTPCELLID0_UARTPCELLID0_ACCESS = "RO";
pub const UART_UARTPCELLID1_OFFSET = _u(@as(c_int, 0x00000ff4));
pub const UART_UARTPCELLID1_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPCELLID1_RESET = _u(@as(c_int, 0x000000f0));
pub const UART_UARTPCELLID1_UARTPCELLID1_RESET = _u(@as(c_int, 0xf0));
pub const UART_UARTPCELLID1_UARTPCELLID1_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPCELLID1_UARTPCELLID1_MSB = _u(@as(c_int, 7));
pub const UART_UARTPCELLID1_UARTPCELLID1_LSB = _u(@as(c_int, 0));
pub const UART_UARTPCELLID1_UARTPCELLID1_ACCESS = "RO";
pub const UART_UARTPCELLID2_OFFSET = _u(@as(c_int, 0x00000ff8));
pub const UART_UARTPCELLID2_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPCELLID2_RESET = _u(@as(c_int, 0x00000005));
pub const UART_UARTPCELLID2_UARTPCELLID2_RESET = _u(@as(c_int, 0x05));
pub const UART_UARTPCELLID2_UARTPCELLID2_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPCELLID2_UARTPCELLID2_MSB = _u(@as(c_int, 7));
pub const UART_UARTPCELLID2_UARTPCELLID2_LSB = _u(@as(c_int, 0));
pub const UART_UARTPCELLID2_UARTPCELLID2_ACCESS = "RO";
pub const UART_UARTPCELLID3_OFFSET = _u(@as(c_int, 0x00000ffc));
pub const UART_UARTPCELLID3_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPCELLID3_RESET = _u(@as(c_int, 0x000000b1));
pub const UART_UARTPCELLID3_UARTPCELLID3_RESET = _u(@as(c_int, 0xb1));
pub const UART_UARTPCELLID3_UARTPCELLID3_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPCELLID3_UARTPCELLID3_MSB = _u(@as(c_int, 7));
pub const UART_UARTPCELLID3_UARTPCELLID3_LSB = _u(@as(c_int, 0));
pub const UART_UARTPCELLID3_UARTPCELLID3_ACCESS = "RO";
pub const uart0_hw = @import("std").zig.c_translation.cast([*c]uart_hw_t, UART0_BASE);
pub const uart1_hw = @import("std").zig.c_translation.cast([*c]uart_hw_t, UART1_BASE);
pub const _DREQ_H_ = "";
pub const DREQ_PIO0_TX0 = @as(c_int, 0x0);
pub const DREQ_PIO0_TX1 = @as(c_int, 0x1);
pub const DREQ_PIO0_TX2 = @as(c_int, 0x2);
pub const DREQ_PIO0_TX3 = @as(c_int, 0x3);
pub const DREQ_PIO0_RX0 = @as(c_int, 0x4);
pub const DREQ_PIO0_RX1 = @as(c_int, 0x5);
pub const DREQ_PIO0_RX2 = @as(c_int, 0x6);
pub const DREQ_PIO0_RX3 = @as(c_int, 0x7);
pub const DREQ_PIO1_TX0 = @as(c_int, 0x8);
pub const DREQ_PIO1_TX1 = @as(c_int, 0x9);
pub const DREQ_PIO1_TX2 = @as(c_int, 0xa);
pub const DREQ_PIO1_TX3 = @as(c_int, 0xb);
pub const DREQ_PIO1_RX0 = @as(c_int, 0xc);
pub const DREQ_PIO1_RX1 = @as(c_int, 0xd);
pub const DREQ_PIO1_RX2 = @as(c_int, 0xe);
pub const DREQ_PIO1_RX3 = @as(c_int, 0xf);
pub const DREQ_SPI0_TX = @as(c_int, 0x10);
pub const DREQ_SPI0_RX = @as(c_int, 0x11);
pub const DREQ_SPI1_TX = @as(c_int, 0x12);
pub const DREQ_SPI1_RX = @as(c_int, 0x13);
pub const DREQ_UART0_TX = @as(c_int, 0x14);
pub const DREQ_UART0_RX = @as(c_int, 0x15);
pub const DREQ_UART1_TX = @as(c_int, 0x16);
pub const DREQ_UART1_RX = @as(c_int, 0x17);
pub const DREQ_PWM_WRAP0 = @as(c_int, 0x18);
pub const DREQ_PWM_WRAP1 = @as(c_int, 0x19);
pub const DREQ_PWM_WRAP2 = @as(c_int, 0x1a);
pub const DREQ_PWM_WRAP3 = @as(c_int, 0x1b);
pub const DREQ_PWM_WRAP4 = @as(c_int, 0x1c);
pub const DREQ_PWM_WRAP5 = @as(c_int, 0x1d);
pub const DREQ_PWM_WRAP6 = @as(c_int, 0x1e);
pub const DREQ_PWM_WRAP7 = @as(c_int, 0x1f);
pub const DREQ_I2C0_TX = @as(c_int, 0x20);
pub const DREQ_I2C0_RX = @as(c_int, 0x21);
pub const DREQ_I2C1_TX = @as(c_int, 0x22);
pub const DREQ_I2C1_RX = @as(c_int, 0x23);
pub const DREQ_ADC = @as(c_int, 0x24);
pub const DREQ_XIP_STREAM = @as(c_int, 0x25);
pub const DREQ_XIP_SSITX = @as(c_int, 0x26);
pub const DREQ_XIP_SSIRX = @as(c_int, 0x27);
pub const PARAM_ASSERTIONS_ENABLED_UART = @as(c_int, 0);
pub const PICO_UART_ENABLE_CRLF_SUPPORT = @as(c_int, 1);
pub const PICO_UART_DEFAULT_CRLF = @as(c_int, 0);
pub const PICO_DEFAULT_UART_BAUD_RATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 115200, .decimal);
pub const uart0 = @import("std").zig.c_translation.cast([*c]uart_inst_t, uart0_hw);
pub const uart1 = @import("std").zig.c_translation.cast([*c]uart_inst_t, uart1_hw);
pub const uart_default = PICO_DEFAULT_UART_INSTANCE;
pub const _PICO_STDIO_USB_H = "";
pub const PICO_STDIO_USB_DEFAULT_CRLF = PICO_STDIO_DEFAULT_CRLF;
pub const PICO_STDIO_USB_STDOUT_TIMEOUT_US = @import("std").zig.c_translation.promoteIntLiteral(c_int, 500000, .decimal);
pub const PICO_STDIO_USB_TASK_INTERVAL_US = @as(c_int, 1000);
pub const PICO_STDIO_USB_ENABLE_RESET_VIA_BAUD_RATE = @as(c_int, 1);
pub const PICO_STDIO_USB_RESET_MAGIC_BAUD_RATE = @as(c_int, 1200);
pub const PICO_STDIO_USB_CONNECT_WAIT_TIMEOUT_MS = @as(c_int, 0);
pub const PICO_STDIO_USB_POST_CONNECT_WAIT_DELAY_MS = @as(c_int, 50);
pub const PICO_STDIO_USB_RESET_BOOTSEL_FIXED_ACTIVITY_LED = @as(c_int, 0);
pub const PICO_STDIO_USB_RESET_BOOTSEL_INTERFACE_DISABLE_MASK = @as(c_uint, 0);
pub const PICO_STDIO_USB_ENABLE_RESET_VIA_VENDOR_INTERFACE = @as(c_int, 1);
pub const PICO_STDIO_USB_RESET_INTERFACE_SUPPORT_RESET_TO_BOOTSEL = @as(c_int, 1);
pub const PICO_STDIO_USB_RESET_INTERFACE_SUPPORT_RESET_TO_FLASH_BOOT = @as(c_int, 1);
pub const PICO_STDIO_USB_RESET_RESET_TO_FLASH_DELAY_MS = @as(c_int, 100);
pub const PICO_STDIO_USB_CONNECTION_WITHOUT_DTR = @as(c_int, 0);
pub const PICO_STDIO_USB_DEVICE_SELF_POWERED = @as(c_int, 0);
pub const PICO_STDIO_USB_SUPPORT_CHARS_AVAILABLE_CALLBACK = @as(c_int, 1);
pub const PICO_DEFAULT_LED_PIN_INVERTED = @as(c_int, 0);
pub const _STDIO_H_ = "";
pub const _FSTDIO = "";
pub const __need___va_list = "";
pub const __GNUC_VA_LIST = "";
pub const _VA_LIST_DEFINED = "";
pub const _SYS_REENT_H_ = "";
pub const _SYS__TYPES_H = "";
pub const __need_wint_t = "";
pub const _WINT_T = "";
pub const _MACHINE__TYPES_H = "";
pub const unsigned = c_int;
pub const _CLOCK_T_ = c_ulong;
pub const _TIME_T_ = __int_least64_t;
pub const _CLOCKID_T_ = c_ulong;
pub const _TIMER_T_ = c_ulong;
pub const _NULL = @as(c_int, 0);
pub const __Long = c_long;
pub const __SYS_LOCK_H__ = "";
pub const _LOCK_RECURSIVE_T = _LOCK_T;
pub inline fn __LOCK_INIT_RECURSIVE(class: anytype, lock: anytype) @TypeOf(__LOCK_INIT(class, lock)) {
    return __LOCK_INIT(class, lock);
}
pub inline fn __lock_init(lock: anytype) @TypeOf(__retarget_lock_init(&lock)) {
    return __retarget_lock_init(&lock);
}
pub inline fn __lock_init_recursive(lock: anytype) @TypeOf(__retarget_lock_init_recursive(&lock)) {
    return __retarget_lock_init_recursive(&lock);
}
pub inline fn __lock_close(lock: anytype) @TypeOf(__retarget_lock_close(lock)) {
    return __retarget_lock_close(lock);
}
pub inline fn __lock_close_recursive(lock: anytype) @TypeOf(__retarget_lock_close_recursive(lock)) {
    return __retarget_lock_close_recursive(lock);
}
pub inline fn __lock_acquire(lock: anytype) @TypeOf(__retarget_lock_acquire(lock)) {
    return __retarget_lock_acquire(lock);
}
pub inline fn __lock_acquire_recursive(lock: anytype) @TypeOf(__retarget_lock_acquire_recursive(lock)) {
    return __retarget_lock_acquire_recursive(lock);
}
pub inline fn __lock_try_acquire(lock: anytype) @TypeOf(__retarget_lock_try_acquire(lock)) {
    return __retarget_lock_try_acquire(lock);
}
pub inline fn __lock_try_acquire_recursive(lock: anytype) @TypeOf(__retarget_lock_try_acquire_recursive(lock)) {
    return __retarget_lock_try_acquire_recursive(lock);
}
pub inline fn __lock_release(lock: anytype) @TypeOf(__retarget_lock_release(lock)) {
    return __retarget_lock_release(lock);
}
pub inline fn __lock_release_recursive(lock: anytype) @TypeOf(__retarget_lock_release_recursive(lock)) {
    return __retarget_lock_release_recursive(lock);
}
pub const _ATEXIT_SIZE = @as(c_int, 32);
pub const _RAND48_SEED_0 = @as(c_int, 0x330e);
pub const _RAND48_SEED_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xabcd, .hexadecimal);
pub const _RAND48_SEED_2 = @as(c_int, 0x1234);
pub const _RAND48_MULT_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe66d, .hexadecimal);
pub const _RAND48_MULT_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xdeec, .hexadecimal);
pub const _RAND48_MULT_2 = @as(c_int, 0x0005);
pub const _RAND48_ADD = @as(c_int, 0x000b);
pub const _REENT_EMERGENCY_SIZE = @as(c_int, 25);
pub const _REENT_ASCTIME_SIZE = @as(c_int, 26);
pub const _REENT_SIGNAL_SIZE = @as(c_int, 24);
pub const _N_LISTS = @as(c_int, 30);
pub inline fn _REENT_STDIO_STREAM(@"var": anytype, index: anytype) @TypeOf(&@"var".*.__sf[@as(usize, @intCast(index))]) {
    return &@"var".*.__sf[@as(usize, @intCast(index))];
}
pub inline fn _REENT_SIGNGAM(ptr: anytype) @TypeOf(ptr.*._new._reent._gamma_signgam) {
    return ptr.*._new._reent._gamma_signgam;
}
pub inline fn _REENT_RAND_NEXT(ptr: anytype) @TypeOf(ptr.*._new._reent._rand_next) {
    return ptr.*._new._reent._rand_next;
}
pub inline fn _REENT_RAND48_SEED(ptr: anytype) @TypeOf(ptr.*._new._reent._r48._seed) {
    return ptr.*._new._reent._r48._seed;
}
pub inline fn _REENT_RAND48_MULT(ptr: anytype) @TypeOf(ptr.*._new._reent._r48._mult) {
    return ptr.*._new._reent._r48._mult;
}
pub inline fn _REENT_RAND48_ADD(ptr: anytype) @TypeOf(ptr.*._new._reent._r48._add) {
    return ptr.*._new._reent._r48._add;
}
pub inline fn _REENT_MP_RESULT(ptr: anytype) @TypeOf(ptr.*._result) {
    return ptr.*._result;
}
pub inline fn _REENT_MP_RESULT_K(ptr: anytype) @TypeOf(ptr.*._result_k) {
    return ptr.*._result_k;
}
pub inline fn _REENT_MP_P5S(ptr: anytype) @TypeOf(ptr.*._p5s) {
    return ptr.*._p5s;
}
pub inline fn _REENT_MP_FREELIST(ptr: anytype) @TypeOf(ptr.*._freelist) {
    return ptr.*._freelist;
}
pub inline fn _REENT_ASCTIME_BUF(ptr: anytype) @TypeOf(ptr.*._new._reent._asctime_buf) {
    return ptr.*._new._reent._asctime_buf;
}
pub inline fn _REENT_TM(ptr: anytype) @TypeOf(&ptr.*._new._reent._localtime_buf) {
    return &ptr.*._new._reent._localtime_buf;
}
pub inline fn _REENT_EMERGENCY(ptr: anytype) @TypeOf(ptr.*._emergency) {
    return ptr.*._emergency;
}
pub inline fn _REENT_STRTOK_LAST(ptr: anytype) @TypeOf(ptr.*._new._reent._strtok_last) {
    return ptr.*._new._reent._strtok_last;
}
pub inline fn _REENT_MBLEN_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._mblen_state) {
    return ptr.*._new._reent._mblen_state;
}
pub inline fn _REENT_MBTOWC_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._mbtowc_state) {
    return ptr.*._new._reent._mbtowc_state;
}
pub inline fn _REENT_WCTOMB_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._wctomb_state) {
    return ptr.*._new._reent._wctomb_state;
}
pub inline fn _REENT_MBRLEN_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._mbrlen_state) {
    return ptr.*._new._reent._mbrlen_state;
}
pub inline fn _REENT_MBRTOWC_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._mbrtowc_state) {
    return ptr.*._new._reent._mbrtowc_state;
}
pub inline fn _REENT_MBSRTOWCS_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._mbsrtowcs_state) {
    return ptr.*._new._reent._mbsrtowcs_state;
}
pub inline fn _REENT_WCRTOMB_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._wcrtomb_state) {
    return ptr.*._new._reent._wcrtomb_state;
}
pub inline fn _REENT_WCSRTOMBS_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._wcsrtombs_state) {
    return ptr.*._new._reent._wcsrtombs_state;
}
pub inline fn _REENT_L64A_BUF(ptr: anytype) @TypeOf(ptr.*._new._reent._l64a_buf) {
    return ptr.*._new._reent._l64a_buf;
}
pub inline fn _REENT_SIGNAL_BUF(ptr: anytype) @TypeOf(ptr.*._new._reent._signal_buf) {
    return ptr.*._new._reent._signal_buf;
}
pub inline fn _REENT_GETDATE_ERR_P(ptr: anytype) @TypeOf(&ptr.*._new._reent._getdate_err) {
    return &ptr.*._new._reent._getdate_err;
}
pub const _Kmax = @import("std").zig.c_translation.sizeof(usize) << @as(c_int, 3);
pub const __ATTRIBUTE_IMPURE_PTR__ = "";
pub const _REENT = _impure_ptr;
pub const _GLOBAL_REENT = _global_impure_ptr;
pub const _GLOBAL_ATEXIT = _GLOBAL_REENT.*._atexit;
pub const __BIT_TYPES_DEFINED__ = @as(c_int, 1);
pub const _SYS_TYPES_H = "";
pub const _SYS__STDINT_H = "";
pub const _INT8_T_DECLARED = "";
pub const _UINT8_T_DECLARED = "";
pub const _INT16_T_DECLARED = "";
pub const _UINT16_T_DECLARED = "";
pub const __int16_t_defined = @as(c_int, 1);
pub const _INT32_T_DECLARED = "";
pub const _UINT32_T_DECLARED = "";
pub const __int32_t_defined = @as(c_int, 1);
pub const _INT64_T_DECLARED = "";
pub const _UINT64_T_DECLARED = "";
pub const __int64_t_defined = @as(c_int, 1);
pub const _INTMAX_T_DECLARED = "";
pub const _UINTMAX_T_DECLARED = "";
pub const _INTPTR_T_DECLARED = "";
pub const _UINTPTR_T_DECLARED = "";
pub const __MACHINE_ENDIAN_H__ = "";
pub const _LITTLE_ENDIAN = @as(c_int, 1234);
pub const _BIG_ENDIAN = @as(c_int, 4321);
pub const _PDP_ENDIAN = @as(c_int, 3412);
pub const _BYTE_ORDER = _LITTLE_ENDIAN;
pub const _QUAD_HIGHWORD = @as(c_int, 1);
pub const _QUAD_LOWWORD = @as(c_int, 0);
pub const LITTLE_ENDIAN = _LITTLE_ENDIAN;
pub const BIG_ENDIAN = _BIG_ENDIAN;
pub const PDP_ENDIAN = _PDP_ENDIAN;
pub const BYTE_ORDER = _BYTE_ORDER;
pub inline fn __bswap16(_x: anytype) @TypeOf(__builtin_bswap16(_x)) {
    return __builtin_bswap16(_x);
}
pub inline fn __bswap32(_x: anytype) @TypeOf(__builtin_bswap32(_x)) {
    return __builtin_bswap32(_x);
}
pub inline fn __bswap64(_x: anytype) @TypeOf(__builtin_bswap64(_x)) {
    return __builtin_bswap64(_x);
}
pub inline fn __htonl(_x: anytype) @TypeOf(__bswap32(_x)) {
    return __bswap32(_x);
}
pub inline fn __htons(_x: anytype) @TypeOf(__bswap16(_x)) {
    return __bswap16(_x);
}
pub inline fn __ntohl(_x: anytype) @TypeOf(__bswap32(_x)) {
    return __bswap32(_x);
}
pub inline fn __ntohs(_x: anytype) @TypeOf(__bswap16(_x)) {
    return __bswap16(_x);
}
pub const _SYS_SELECT_H = "";
pub const _SYS__SIGSET_H_ = "";
pub const _SYS__TIMEVAL_H_ = "";
pub const _SUSECONDS_T_DECLARED = "";
pub const __time_t_defined = "";
pub const _TIME_T_DECLARED = "";
pub const _TIMEVAL_DEFINED = "";
pub const _SYS_TIMESPEC_H_ = "";
pub const _SYS__TIMESPEC_H_ = "";
pub const _SIGSET_T_DECLARED = "";
pub const _SYS_TYPES_FD_SET = "";
pub const FD_SETSIZE = @as(c_int, 64);
pub const _NFDBITS = @import("std").zig.c_translation.cast(c_int, @import("std").zig.c_translation.sizeof(__fd_mask)) * @as(c_int, 8);
pub const NFDBITS = _NFDBITS;
pub inline fn _howmany(x: anytype, y: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div(x + (y - @as(c_int, 1)), y)) {
    return @import("std").zig.c_translation.MacroArithmetic.div(x + (y - @as(c_int, 1)), y);
}
pub inline fn __fdset_mask(n: anytype) @TypeOf(@import("std").zig.c_translation.cast(__fd_mask, @as(c_int, 1)) << @import("std").zig.c_translation.MacroArithmetic.rem(n, _NFDBITS)) {
    return @import("std").zig.c_translation.cast(__fd_mask, @as(c_int, 1)) << @import("std").zig.c_translation.MacroArithmetic.rem(n, _NFDBITS);
}
pub inline fn FD_ISSET(n: anytype, p: anytype) @TypeOf((p.*.__fds_bits[@as(usize, @intCast(@import("std").zig.c_translation.MacroArithmetic.div(n, _NFDBITS)))] & __fdset_mask(n)) != @as(c_int, 0)) {
    return (p.*.__fds_bits[@as(usize, @intCast(@import("std").zig.c_translation.MacroArithmetic.div(n, _NFDBITS)))] & __fdset_mask(n)) != @as(c_int, 0);
}
pub const _IN_ADDR_T_DECLARED = "";
pub const _IN_PORT_T_DECLARED = "";
pub const __u_char_defined = "";
pub const __u_short_defined = "";
pub const __u_int_defined = "";
pub const __u_long_defined = "";
pub const _BSDTYPES_DEFINED = "";
pub const _BLKCNT_T_DECLARED = "";
pub const _BLKSIZE_T_DECLARED = "";
pub const __clock_t_defined = "";
pub const _CLOCK_T_DECLARED = "";
pub const __daddr_t_defined = "";
pub const __caddr_t_defined = "";
pub const _FSBLKCNT_T_DECLARED = "";
pub const _ID_T_DECLARED = "";
pub const _INO_T_DECLARED = "";
pub const _OFF_T_DECLARED = "";
pub const _DEV_T_DECLARED = "";
pub const _UID_T_DECLARED = "";
pub const _GID_T_DECLARED = "";
pub const _PID_T_DECLARED = "";
pub const _KEY_T_DECLARED = "";
pub const _SSIZE_T_DECLARED = "";
pub const _MODE_T_DECLARED = "";
pub const _NLINK_T_DECLARED = "";
pub const __clockid_t_defined = "";
pub const _CLOCKID_T_DECLARED = "";
pub const __timer_t_defined = "";
pub const _TIMER_T_DECLARED = "";
pub const _USECONDS_T_DECLARED = "";
pub const _SYS__PTHREADTYPES_H_ = "";
pub const _SYS_SCHED_H_ = "";
pub const SCHED_OTHER = @as(c_int, 0);
pub const SCHED_FIFO = @as(c_int, 1);
pub const SCHED_RR = @as(c_int, 2);
pub const PTHREAD_SCOPE_PROCESS = @as(c_int, 0);
pub const PTHREAD_SCOPE_SYSTEM = @as(c_int, 1);
pub const PTHREAD_INHERIT_SCHED = @as(c_int, 1);
pub const PTHREAD_EXPLICIT_SCHED = @as(c_int, 2);
pub const PTHREAD_CREATE_DETACHED = @as(c_int, 0);
pub const PTHREAD_CREATE_JOINABLE = @as(c_int, 1);
pub const _PTHREAD_MUTEX_INITIALIZER = @import("std").zig.c_translation.cast(pthread_mutex_t, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal));
pub const _PTHREAD_COND_INITIALIZER = @import("std").zig.c_translation.cast(pthread_cond_t, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal));
pub const __FILE_defined = "";
pub const _NEWLIB_STDIO_H = "";
pub inline fn _flockfile(fp: anytype) @TypeOf(if (fp.*._flags & __SSTR) @as(c_int, 0) else __lock_acquire_recursive(fp.*._lock)) {
    return if (fp.*._flags & __SSTR) @as(c_int, 0) else __lock_acquire_recursive(fp.*._lock);
}
pub inline fn _funlockfile(fp: anytype) @TypeOf(if (fp.*._flags & __SSTR) @as(c_int, 0) else __lock_release_recursive(fp.*._lock)) {
    return if (fp.*._flags & __SSTR) @as(c_int, 0) else __lock_release_recursive(fp.*._lock);
}
pub const __SLBF = @as(c_int, 0x0001);
pub const __SNBF = @as(c_int, 0x0002);
pub const __SRD = @as(c_int, 0x0004);
pub const __SWR = @as(c_int, 0x0008);
pub const __SRW = @as(c_int, 0x0010);
pub const __SEOF = @as(c_int, 0x0020);
pub const __SERR = @as(c_int, 0x0040);
pub const __SMBF = @as(c_int, 0x0080);
pub const __SAPP = @as(c_int, 0x0100);
pub const __SSTR = @as(c_int, 0x0200);
pub const __SOPT = @as(c_int, 0x0400);
pub const __SNPT = @as(c_int, 0x0800);
pub const __SOFF = @as(c_int, 0x1000);
pub const __SORD = @as(c_int, 0x2000);
pub const __SL64 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hexadecimal);
pub const __SNLK = @as(c_int, 0x0001);
pub const __SWID = @as(c_int, 0x2000);
pub const _IOFBF = @as(c_int, 0);
pub const _IOLBF = @as(c_int, 1);
pub const _IONBF = @as(c_int, 2);
pub const EOF = -@as(c_int, 1);
pub const BUFSIZ = @as(c_int, 1024);
pub const FOPEN_MAX = @as(c_int, 20);
pub const FILENAME_MAX = @as(c_int, 1024);
pub const L_tmpnam = FILENAME_MAX;
pub const P_tmpdir = "/tmp";
pub const SEEK_SET = @as(c_int, 0);
pub const SEEK_CUR = @as(c_int, 1);
pub const SEEK_END = @as(c_int, 2);
pub const TMP_MAX = @as(c_int, 26);
pub const stdin = _REENT.*._stdin;
pub const stdout = _REENT.*._stdout;
pub const stderr = _REENT.*._stderr;
pub inline fn _stdin_r(x: anytype) @TypeOf(x.*._stdin) {
    return x.*._stdin;
}
pub inline fn _stdout_r(x: anytype) @TypeOf(x.*._stdout) {
    return x.*._stdout;
}
pub inline fn _stderr_r(x: anytype) @TypeOf(x.*._stderr) {
    return x.*._stderr;
}
pub const __VALIST = __gnuc_va_list;
pub inline fn __sgetc_r(__ptr: anytype, __p: anytype) @TypeOf(__sgetc_raw_r(__ptr, __p)) {
    return __sgetc_raw_r(__ptr, __p);
}
pub inline fn __sfeof(p: anytype) c_int {
    return @import("std").zig.c_translation.cast(c_int, (p.*._flags & __SEOF) != @as(c_int, 0));
}
pub inline fn __sferror(p: anytype) c_int {
    return @import("std").zig.c_translation.cast(c_int, (p.*._flags & __SERR) != @as(c_int, 0));
}
pub inline fn __sfileno(p: anytype) @TypeOf(p.*._file) {
    return p.*._file;
}
pub const L_ctermid = @as(c_int, 16);
pub const _PICO_BINARY_INFO_H = "";
pub const _PICO_BINARY_INFO_DEFS_H = "";
pub const BINARY_INFO_MARKER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7188ebf2, .hexadecimal);
pub const BINARY_INFO_MARKER_END = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe71aa390, .hexadecimal);
pub const _PICO_BINARY_INFO_STRUCTURE_H = "";
pub const BINARY_INFO_TYPE_RAW_DATA = @as(c_int, 1);
pub const BINARY_INFO_TYPE_SIZED_DATA = @as(c_int, 2);
pub const BINARY_INFO_TYPE_BINARY_INFO_LIST_ZERO_TERMINATED = @as(c_int, 3);
pub const BINARY_INFO_TYPE_BSON = @as(c_int, 4);
pub const BINARY_INFO_TYPE_ID_AND_INT = @as(c_int, 5);
pub const BINARY_INFO_TYPE_ID_AND_STRING = @as(c_int, 6);
pub const BINARY_INFO_TYPE_BLOCK_DEVICE = @as(c_int, 7);
pub const BINARY_INFO_TYPE_PINS_WITH_FUNC = @as(c_int, 8);
pub const BINARY_INFO_TYPE_PINS_WITH_NAME = @as(c_int, 9);
pub const BINARY_INFO_TYPE_PINS_WITH_NAMES = @as(c_int, 9);
pub const BINARY_INFO_TYPE_NAMED_GROUP = @as(c_int, 10);
pub inline fn BINARY_INFO_MAKE_TAG(c1: anytype, c2: anytype) @TypeOf(((@import("std").zig.c_translation.cast(uint, c2) & @as(c_uint, 0xff)) << @as(c_uint, 8)) | (@import("std").zig.c_translation.cast(uint, c1) & @as(c_uint, 0xff))) {
    return ((@import("std").zig.c_translation.cast(uint, c2) & @as(c_uint, 0xff)) << @as(c_uint, 8)) | (@import("std").zig.c_translation.cast(uint, c1) & @as(c_uint, 0xff));
}
pub const BINARY_INFO_TAG_RASPBERRY_PI = BINARY_INFO_MAKE_TAG('R', 'P');
pub const BINARY_INFO_ID_RP_PROGRAM_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02031c86, .hexadecimal);
pub const BINARY_INFO_ID_RP_PROGRAM_VERSION_STRING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x11a9bc3a, .hexadecimal);
pub const BINARY_INFO_ID_RP_PROGRAM_BUILD_DATE_STRING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9da22254, .hexadecimal);
pub const BINARY_INFO_ID_RP_BINARY_END = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x68f465de, .hexadecimal);
pub const BINARY_INFO_ID_RP_PROGRAM_URL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1856239a, .hexadecimal);
pub const BINARY_INFO_ID_RP_PROGRAM_DESCRIPTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xb6a07c19, .hexadecimal);
pub const BINARY_INFO_ID_RP_PROGRAM_FEATURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xa1f4b453, .hexadecimal);
pub const BINARY_INFO_ID_RP_PROGRAM_BUILD_ATTRIBUTE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x4275f0d3, .hexadecimal);
pub const BINARY_INFO_ID_RP_SDK_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x5360b3ab, .hexadecimal);
pub const BINARY_INFO_ID_RP_PICO_BOARD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xb63cffbb, .hexadecimal);
pub const BINARY_INFO_ID_RP_BOOT2_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7f8882e1, .hexadecimal);
pub inline fn bi_ptr_of(x: anytype) @TypeOf(u32) {
    _ = @TypeOf(x);
    return u32;
}
pub const BI_PINS_ENCODING_RANGE = @as(c_int, 1);
pub const BI_PINS_ENCODING_MULTI = @as(c_int, 2);
pub const BI_NAMED_GROUP_SHOW_IF_EMPTY = @as(c_int, 0x0001);
pub const BI_NAMED_GROUP_SEPARATE_COMMAS = @as(c_int, 0x0002);
pub const BI_NAMED_GROUP_SORT_ALPHA = @as(c_int, 0x0004);
pub const BI_NAMED_GROUP_ADVANCED = @as(c_int, 0x0008);
pub const PICO_NO_BINARY_INFO = @as(c_int, 1);
pub const _PICO_BINARY_INFO_CODE_H = "";
pub inline fn bi_binary_end(end: anytype) @TypeOf(bi_int(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_BINARY_END, end)) {
    return bi_int(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_BINARY_END, end);
}
pub inline fn bi_program_name(name: anytype) @TypeOf(bi_string(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_PROGRAM_NAME, name)) {
    return bi_string(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_PROGRAM_NAME, name);
}
pub inline fn bi_program_description(description: anytype) @TypeOf(bi_string(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_PROGRAM_DESCRIPTION, description)) {
    return bi_string(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_PROGRAM_DESCRIPTION, description);
}
pub inline fn bi_program_version_string(version_string: anytype) @TypeOf(bi_string(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_PROGRAM_VERSION_STRING, version_string)) {
    return bi_string(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_PROGRAM_VERSION_STRING, version_string);
}
pub inline fn bi_program_build_date_string(date_string: anytype) @TypeOf(bi_string(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_PROGRAM_BUILD_DATE_STRING, date_string)) {
    return bi_string(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_PROGRAM_BUILD_DATE_STRING, date_string);
}
pub inline fn bi_program_url(url: anytype) @TypeOf(bi_string(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_PROGRAM_URL, url)) {
    return bi_string(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_PROGRAM_URL, url);
}
pub inline fn bi_program_feature(feature: anytype) @TypeOf(bi_string(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_PROGRAM_FEATURE, feature)) {
    return bi_string(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_PROGRAM_FEATURE, feature);
}
pub inline fn bi_program_build_attribute(attr: anytype) @TypeOf(bi_string(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_PROGRAM_BUILD_ATTRIBUTE, attr)) {
    return bi_string(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_PROGRAM_BUILD_ATTRIBUTE, attr);
}
pub inline fn bi_program_feature_group(tag: anytype, id: anytype, name: anytype) @TypeOf(__bi_named_group(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_PROGRAM_FEATURE, tag, id, name, @as(c_int, 0))) {
    return __bi_named_group(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_PROGRAM_FEATURE, tag, id, name, @as(c_int, 0));
}
pub inline fn bi_program_feature_group_with_flags(tag: anytype, id: anytype, name: anytype, flags: anytype) @TypeOf(__bi_named_group(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_PROGRAM_FEATURE, tag, id, name, flags)) {
    return __bi_named_group(BINARY_INFO_TAG_RASPBERRY_PI, BINARY_INFO_ID_RP_PROGRAM_FEATURE, tag, id, name, flags);
}
pub inline fn bi_1pin_with_func(p0: anytype, func: anytype) @TypeOf(__bi_encoded_pins_with_func(((BI_PINS_ENCODING_MULTI | (func << @as(c_int, 3))) | (p0 << @as(c_int, 7))) | (p0 << @as(c_int, 12)))) {
    return __bi_encoded_pins_with_func(((BI_PINS_ENCODING_MULTI | (func << @as(c_int, 3))) | (p0 << @as(c_int, 7))) | (p0 << @as(c_int, 12)));
}
pub inline fn bi_2pins_with_func(p0: anytype, p1: anytype, func: anytype) @TypeOf(__bi_encoded_pins_with_func((((BI_PINS_ENCODING_MULTI | (func << @as(c_int, 3))) | (p0 << @as(c_int, 7))) | (p1 << @as(c_int, 12))) | (p1 << @as(c_int, 17)))) {
    return __bi_encoded_pins_with_func((((BI_PINS_ENCODING_MULTI | (func << @as(c_int, 3))) | (p0 << @as(c_int, 7))) | (p1 << @as(c_int, 12))) | (p1 << @as(c_int, 17)));
}
pub inline fn bi_3pins_with_func(p0: anytype, p1: anytype, p2: anytype, func: anytype) @TypeOf(__bi_encoded_pins_with_func(((((BI_PINS_ENCODING_MULTI | (func << @as(c_int, 3))) | (p0 << @as(c_int, 7))) | (p1 << @as(c_int, 12))) | (p2 << @as(c_int, 17))) | (p2 << @as(c_int, 22)))) {
    return __bi_encoded_pins_with_func(((((BI_PINS_ENCODING_MULTI | (func << @as(c_int, 3))) | (p0 << @as(c_int, 7))) | (p1 << @as(c_int, 12))) | (p2 << @as(c_int, 17))) | (p2 << @as(c_int, 22)));
}
pub inline fn bi_4pins_with_func(p0: anytype, p1: anytype, p2: anytype, p3: anytype, func: anytype) @TypeOf(__bi_encoded_pins_with_func((((((BI_PINS_ENCODING_MULTI | (func << @as(c_int, 3))) | (p0 << @as(c_int, 7))) | (p1 << @as(c_int, 12))) | (p2 << @as(c_int, 17))) | (p3 << @as(c_int, 22))) | (p3 << @as(c_int, 27)))) {
    return __bi_encoded_pins_with_func((((((BI_PINS_ENCODING_MULTI | (func << @as(c_int, 3))) | (p0 << @as(c_int, 7))) | (p1 << @as(c_int, 12))) | (p2 << @as(c_int, 17))) | (p3 << @as(c_int, 22))) | (p3 << @as(c_int, 27)));
}
pub inline fn bi_5pins_with_func(p0: anytype, p1: anytype, p2: anytype, p3: anytype, p4: anytype, func: anytype) @TypeOf(__bi_encoded_pins_with_func((((((BI_PINS_ENCODING_MULTI | (func << @as(c_int, 3))) | (p0 << @as(c_int, 7))) | (p1 << @as(c_int, 12))) | (p2 << @as(c_int, 17))) | (p3 << @as(c_int, 22))) | (p4 << @as(c_int, 27)))) {
    return __bi_encoded_pins_with_func((((((BI_PINS_ENCODING_MULTI | (func << @as(c_int, 3))) | (p0 << @as(c_int, 7))) | (p1 << @as(c_int, 12))) | (p2 << @as(c_int, 17))) | (p3 << @as(c_int, 22))) | (p4 << @as(c_int, 27)));
}
pub inline fn bi_pin_range_with_func(plo: anytype, phi: anytype, func: anytype) @TypeOf(__bi_encoded_pins_with_func(((BI_PINS_ENCODING_RANGE | (func << @as(c_int, 3))) | (plo << @as(c_int, 7))) | (phi << @as(c_int, 12)))) {
    return __bi_encoded_pins_with_func(((BI_PINS_ENCODING_RANGE | (func << @as(c_int, 3))) | (plo << @as(c_int, 7))) | (phi << @as(c_int, 12)));
}
pub inline fn bi_pin_mask_with_name(pmask: anytype, label: anytype) @TypeOf(__bi_pins_with_name(pmask, label)) {
    return __bi_pins_with_name(pmask, label);
}
pub inline fn bi_pin_mask_with_names(pmask: anytype, label: anytype) @TypeOf(__bi_pins_with_name(pmask, label)) {
    return __bi_pins_with_name(pmask, label);
}
pub inline fn bi_1pin_with_name(p0: anytype, name: anytype) @TypeOf(bi_pin_mask_with_name(@as(c_uint, 1) << p0, name)) {
    return bi_pin_mask_with_name(@as(c_uint, 1) << p0, name);
}
pub inline fn bi_2pins_with_names(p0: anytype, name0: anytype, p1: anytype, name1: anytype) @TypeOf(bi_pin_mask_with_names((@as(c_uint, 1) << p0) | (@as(c_uint, 1) << p1), name0 ++ "|" ++ name1)) {
    return bi_pin_mask_with_names((@as(c_uint, 1) << p0) | (@as(c_uint, 1) << p1), name0 ++ "|" ++ name1);
}
pub inline fn bi_3pins_with_names(p0: anytype, name0: anytype, p1: anytype, name1: anytype, p2: anytype, name2: anytype) @TypeOf(bi_pin_mask_with_names(((@as(c_uint, 1) << p0) | (@as(c_uint, 1) << p1)) | (@as(c_uint, 1) << p2), name0 ++ "|" ++ name1 ++ "|" ++ name2)) {
    return bi_pin_mask_with_names(((@as(c_uint, 1) << p0) | (@as(c_uint, 1) << p1)) | (@as(c_uint, 1) << p2), name0 ++ "|" ++ name1 ++ "|" ++ name2);
}
pub inline fn bi_4pins_with_names(p0: anytype, name0: anytype, p1: anytype, name1: anytype, p2: anytype, name2: anytype, p3: anytype, name3: anytype) @TypeOf(bi_pin_mask_with_names((((@as(c_uint, 1) << p0) | (@as(c_uint, 1) << p1)) | (@as(c_uint, 1) << p2)) | (@as(c_uint, 1) << p3), name0 ++ "|" ++ name1 ++ "|" ++ name2 ++ "|" ++ name3)) {
    return bi_pin_mask_with_names((((@as(c_uint, 1) << p0) | (@as(c_uint, 1) << p1)) | (@as(c_uint, 1) << p2)) | (@as(c_uint, 1) << p3), name0 ++ "|" ++ name1 ++ "|" ++ name2 ++ "|" ++ name3);
}
pub const _HARDWARE_PIO_H = "";
pub const _HARDWARE_STRUCTS_PIO_H = "";
pub const HARDWARE_REGS_PIO_DEFINED = "";
pub const PIO_CTRL_OFFSET = _u(@as(c_int, 0x00000000));
pub const PIO_CTRL_BITS = _u(@as(c_int, 0x00000fff));
pub const PIO_CTRL_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_CTRL_CLKDIV_RESTART_RESET = _u(@as(c_int, 0x0));
pub const PIO_CTRL_CLKDIV_RESTART_BITS = _u(@as(c_int, 0x00000f00));
pub const PIO_CTRL_CLKDIV_RESTART_MSB = _u(@as(c_int, 11));
pub const PIO_CTRL_CLKDIV_RESTART_LSB = _u(@as(c_int, 8));
pub const PIO_CTRL_CLKDIV_RESTART_ACCESS = "SC";
pub const PIO_CTRL_SM_RESTART_RESET = _u(@as(c_int, 0x0));
pub const PIO_CTRL_SM_RESTART_BITS = _u(@as(c_int, 0x000000f0));
pub const PIO_CTRL_SM_RESTART_MSB = _u(@as(c_int, 7));
pub const PIO_CTRL_SM_RESTART_LSB = _u(@as(c_int, 4));
pub const PIO_CTRL_SM_RESTART_ACCESS = "SC";
pub const PIO_CTRL_SM_ENABLE_RESET = _u(@as(c_int, 0x0));
pub const PIO_CTRL_SM_ENABLE_BITS = _u(@as(c_int, 0x0000000f));
pub const PIO_CTRL_SM_ENABLE_MSB = _u(@as(c_int, 3));
pub const PIO_CTRL_SM_ENABLE_LSB = _u(@as(c_int, 0));
pub const PIO_CTRL_SM_ENABLE_ACCESS = "RW";
pub const PIO_FSTAT_OFFSET = _u(@as(c_int, 0x00000004));
pub const PIO_FSTAT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f0f0f0f, .hexadecimal));
pub const PIO_FSTAT_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f000f00, .hexadecimal));
pub const PIO_FSTAT_TXEMPTY_RESET = _u(@as(c_int, 0xf));
pub const PIO_FSTAT_TXEMPTY_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f000000, .hexadecimal));
pub const PIO_FSTAT_TXEMPTY_MSB = _u(@as(c_int, 27));
pub const PIO_FSTAT_TXEMPTY_LSB = _u(@as(c_int, 24));
pub const PIO_FSTAT_TXEMPTY_ACCESS = "RO";
pub const PIO_FSTAT_TXFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_FSTAT_TXFULL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hexadecimal));
pub const PIO_FSTAT_TXFULL_MSB = _u(@as(c_int, 19));
pub const PIO_FSTAT_TXFULL_LSB = _u(@as(c_int, 16));
pub const PIO_FSTAT_TXFULL_ACCESS = "RO";
pub const PIO_FSTAT_RXEMPTY_RESET = _u(@as(c_int, 0xf));
pub const PIO_FSTAT_RXEMPTY_BITS = _u(@as(c_int, 0x00000f00));
pub const PIO_FSTAT_RXEMPTY_MSB = _u(@as(c_int, 11));
pub const PIO_FSTAT_RXEMPTY_LSB = _u(@as(c_int, 8));
pub const PIO_FSTAT_RXEMPTY_ACCESS = "RO";
pub const PIO_FSTAT_RXFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_FSTAT_RXFULL_BITS = _u(@as(c_int, 0x0000000f));
pub const PIO_FSTAT_RXFULL_MSB = _u(@as(c_int, 3));
pub const PIO_FSTAT_RXFULL_LSB = _u(@as(c_int, 0));
pub const PIO_FSTAT_RXFULL_ACCESS = "RO";
pub const PIO_FDEBUG_OFFSET = _u(@as(c_int, 0x00000008));
pub const PIO_FDEBUG_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f0f0f0f, .hexadecimal));
pub const PIO_FDEBUG_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_FDEBUG_TXSTALL_RESET = _u(@as(c_int, 0x0));
pub const PIO_FDEBUG_TXSTALL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f000000, .hexadecimal));
pub const PIO_FDEBUG_TXSTALL_MSB = _u(@as(c_int, 27));
pub const PIO_FDEBUG_TXSTALL_LSB = _u(@as(c_int, 24));
pub const PIO_FDEBUG_TXSTALL_ACCESS = "WC";
pub const PIO_FDEBUG_TXOVER_RESET = _u(@as(c_int, 0x0));
pub const PIO_FDEBUG_TXOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hexadecimal));
pub const PIO_FDEBUG_TXOVER_MSB = _u(@as(c_int, 19));
pub const PIO_FDEBUG_TXOVER_LSB = _u(@as(c_int, 16));
pub const PIO_FDEBUG_TXOVER_ACCESS = "WC";
pub const PIO_FDEBUG_RXUNDER_RESET = _u(@as(c_int, 0x0));
pub const PIO_FDEBUG_RXUNDER_BITS = _u(@as(c_int, 0x00000f00));
pub const PIO_FDEBUG_RXUNDER_MSB = _u(@as(c_int, 11));
pub const PIO_FDEBUG_RXUNDER_LSB = _u(@as(c_int, 8));
pub const PIO_FDEBUG_RXUNDER_ACCESS = "WC";
pub const PIO_FDEBUG_RXSTALL_RESET = _u(@as(c_int, 0x0));
pub const PIO_FDEBUG_RXSTALL_BITS = _u(@as(c_int, 0x0000000f));
pub const PIO_FDEBUG_RXSTALL_MSB = _u(@as(c_int, 3));
pub const PIO_FDEBUG_RXSTALL_LSB = _u(@as(c_int, 0));
pub const PIO_FDEBUG_RXSTALL_ACCESS = "WC";
pub const PIO_FLEVEL_OFFSET = _u(@as(c_int, 0x0000000c));
pub const PIO_FLEVEL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const PIO_FLEVEL_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_FLEVEL_RX3_RESET = _u(@as(c_int, 0x0));
pub const PIO_FLEVEL_RX3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hexadecimal));
pub const PIO_FLEVEL_RX3_MSB = _u(@as(c_int, 31));
pub const PIO_FLEVEL_RX3_LSB = _u(@as(c_int, 28));
pub const PIO_FLEVEL_RX3_ACCESS = "RO";
pub const PIO_FLEVEL_TX3_RESET = _u(@as(c_int, 0x0));
pub const PIO_FLEVEL_TX3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f000000, .hexadecimal));
pub const PIO_FLEVEL_TX3_MSB = _u(@as(c_int, 27));
pub const PIO_FLEVEL_TX3_LSB = _u(@as(c_int, 24));
pub const PIO_FLEVEL_TX3_ACCESS = "RO";
pub const PIO_FLEVEL_RX2_RESET = _u(@as(c_int, 0x0));
pub const PIO_FLEVEL_RX2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hexadecimal));
pub const PIO_FLEVEL_RX2_MSB = _u(@as(c_int, 23));
pub const PIO_FLEVEL_RX2_LSB = _u(@as(c_int, 20));
pub const PIO_FLEVEL_RX2_ACCESS = "RO";
pub const PIO_FLEVEL_TX2_RESET = _u(@as(c_int, 0x0));
pub const PIO_FLEVEL_TX2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hexadecimal));
pub const PIO_FLEVEL_TX2_MSB = _u(@as(c_int, 19));
pub const PIO_FLEVEL_TX2_LSB = _u(@as(c_int, 16));
pub const PIO_FLEVEL_TX2_ACCESS = "RO";
pub const PIO_FLEVEL_RX1_RESET = _u(@as(c_int, 0x0));
pub const PIO_FLEVEL_RX1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hexadecimal));
pub const PIO_FLEVEL_RX1_MSB = _u(@as(c_int, 15));
pub const PIO_FLEVEL_RX1_LSB = _u(@as(c_int, 12));
pub const PIO_FLEVEL_RX1_ACCESS = "RO";
pub const PIO_FLEVEL_TX1_RESET = _u(@as(c_int, 0x0));
pub const PIO_FLEVEL_TX1_BITS = _u(@as(c_int, 0x00000f00));
pub const PIO_FLEVEL_TX1_MSB = _u(@as(c_int, 11));
pub const PIO_FLEVEL_TX1_LSB = _u(@as(c_int, 8));
pub const PIO_FLEVEL_TX1_ACCESS = "RO";
pub const PIO_FLEVEL_RX0_RESET = _u(@as(c_int, 0x0));
pub const PIO_FLEVEL_RX0_BITS = _u(@as(c_int, 0x000000f0));
pub const PIO_FLEVEL_RX0_MSB = _u(@as(c_int, 7));
pub const PIO_FLEVEL_RX0_LSB = _u(@as(c_int, 4));
pub const PIO_FLEVEL_RX0_ACCESS = "RO";
pub const PIO_FLEVEL_TX0_RESET = _u(@as(c_int, 0x0));
pub const PIO_FLEVEL_TX0_BITS = _u(@as(c_int, 0x0000000f));
pub const PIO_FLEVEL_TX0_MSB = _u(@as(c_int, 3));
pub const PIO_FLEVEL_TX0_LSB = _u(@as(c_int, 0));
pub const PIO_FLEVEL_TX0_ACCESS = "RO";
pub const PIO_TXF0_OFFSET = _u(@as(c_int, 0x00000010));
pub const PIO_TXF0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const PIO_TXF0_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_TXF0_MSB = _u(@as(c_int, 31));
pub const PIO_TXF0_LSB = _u(@as(c_int, 0));
pub const PIO_TXF0_ACCESS = "WF";
pub const PIO_TXF1_OFFSET = _u(@as(c_int, 0x00000014));
pub const PIO_TXF1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const PIO_TXF1_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_TXF1_MSB = _u(@as(c_int, 31));
pub const PIO_TXF1_LSB = _u(@as(c_int, 0));
pub const PIO_TXF1_ACCESS = "WF";
pub const PIO_TXF2_OFFSET = _u(@as(c_int, 0x00000018));
pub const PIO_TXF2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const PIO_TXF2_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_TXF2_MSB = _u(@as(c_int, 31));
pub const PIO_TXF2_LSB = _u(@as(c_int, 0));
pub const PIO_TXF2_ACCESS = "WF";
pub const PIO_TXF3_OFFSET = _u(@as(c_int, 0x0000001c));
pub const PIO_TXF3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const PIO_TXF3_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_TXF3_MSB = _u(@as(c_int, 31));
pub const PIO_TXF3_LSB = _u(@as(c_int, 0));
pub const PIO_TXF3_ACCESS = "WF";
pub const PIO_RXF0_OFFSET = _u(@as(c_int, 0x00000020));
pub const PIO_RXF0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const PIO_RXF0_RESET = "-";
pub const PIO_RXF0_MSB = _u(@as(c_int, 31));
pub const PIO_RXF0_LSB = _u(@as(c_int, 0));
pub const PIO_RXF0_ACCESS = "RF";
pub const PIO_RXF1_OFFSET = _u(@as(c_int, 0x00000024));
pub const PIO_RXF1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const PIO_RXF1_RESET = "-";
pub const PIO_RXF1_MSB = _u(@as(c_int, 31));
pub const PIO_RXF1_LSB = _u(@as(c_int, 0));
pub const PIO_RXF1_ACCESS = "RF";
pub const PIO_RXF2_OFFSET = _u(@as(c_int, 0x00000028));
pub const PIO_RXF2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const PIO_RXF2_RESET = "-";
pub const PIO_RXF2_MSB = _u(@as(c_int, 31));
pub const PIO_RXF2_LSB = _u(@as(c_int, 0));
pub const PIO_RXF2_ACCESS = "RF";
pub const PIO_RXF3_OFFSET = _u(@as(c_int, 0x0000002c));
pub const PIO_RXF3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const PIO_RXF3_RESET = "-";
pub const PIO_RXF3_MSB = _u(@as(c_int, 31));
pub const PIO_RXF3_LSB = _u(@as(c_int, 0));
pub const PIO_RXF3_ACCESS = "RF";
pub const PIO_IRQ_OFFSET = _u(@as(c_int, 0x00000030));
pub const PIO_IRQ_BITS = _u(@as(c_int, 0x000000ff));
pub const PIO_IRQ_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_IRQ_MSB = _u(@as(c_int, 7));
pub const PIO_IRQ_LSB = _u(@as(c_int, 0));
pub const PIO_IRQ_ACCESS = "WC";
pub const PIO_IRQ_FORCE_OFFSET = _u(@as(c_int, 0x00000034));
pub const PIO_IRQ_FORCE_BITS = _u(@as(c_int, 0x000000ff));
pub const PIO_IRQ_FORCE_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_IRQ_FORCE_MSB = _u(@as(c_int, 7));
pub const PIO_IRQ_FORCE_LSB = _u(@as(c_int, 0));
pub const PIO_IRQ_FORCE_ACCESS = "WF";
pub const PIO_INPUT_SYNC_BYPASS_OFFSET = _u(@as(c_int, 0x00000038));
pub const PIO_INPUT_SYNC_BYPASS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const PIO_INPUT_SYNC_BYPASS_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INPUT_SYNC_BYPASS_MSB = _u(@as(c_int, 31));
pub const PIO_INPUT_SYNC_BYPASS_LSB = _u(@as(c_int, 0));
pub const PIO_INPUT_SYNC_BYPASS_ACCESS = "RW";
pub const PIO_DBG_PADOUT_OFFSET = _u(@as(c_int, 0x0000003c));
pub const PIO_DBG_PADOUT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const PIO_DBG_PADOUT_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_DBG_PADOUT_MSB = _u(@as(c_int, 31));
pub const PIO_DBG_PADOUT_LSB = _u(@as(c_int, 0));
pub const PIO_DBG_PADOUT_ACCESS = "RO";
pub const PIO_DBG_PADOE_OFFSET = _u(@as(c_int, 0x00000040));
pub const PIO_DBG_PADOE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const PIO_DBG_PADOE_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_DBG_PADOE_MSB = _u(@as(c_int, 31));
pub const PIO_DBG_PADOE_LSB = _u(@as(c_int, 0));
pub const PIO_DBG_PADOE_ACCESS = "RO";
pub const PIO_DBG_CFGINFO_OFFSET = _u(@as(c_int, 0x00000044));
pub const PIO_DBG_CFGINFO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x003f0f3f, .hexadecimal));
pub const PIO_DBG_CFGINFO_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_DBG_CFGINFO_IMEM_SIZE_RESET = "-";
pub const PIO_DBG_CFGINFO_IMEM_SIZE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x003f0000, .hexadecimal));
pub const PIO_DBG_CFGINFO_IMEM_SIZE_MSB = _u(@as(c_int, 21));
pub const PIO_DBG_CFGINFO_IMEM_SIZE_LSB = _u(@as(c_int, 16));
pub const PIO_DBG_CFGINFO_IMEM_SIZE_ACCESS = "RO";
pub const PIO_DBG_CFGINFO_SM_COUNT_RESET = "-";
pub const PIO_DBG_CFGINFO_SM_COUNT_BITS = _u(@as(c_int, 0x00000f00));
pub const PIO_DBG_CFGINFO_SM_COUNT_MSB = _u(@as(c_int, 11));
pub const PIO_DBG_CFGINFO_SM_COUNT_LSB = _u(@as(c_int, 8));
pub const PIO_DBG_CFGINFO_SM_COUNT_ACCESS = "RO";
pub const PIO_DBG_CFGINFO_FIFO_DEPTH_RESET = "-";
pub const PIO_DBG_CFGINFO_FIFO_DEPTH_BITS = _u(@as(c_int, 0x0000003f));
pub const PIO_DBG_CFGINFO_FIFO_DEPTH_MSB = _u(@as(c_int, 5));
pub const PIO_DBG_CFGINFO_FIFO_DEPTH_LSB = _u(@as(c_int, 0));
pub const PIO_DBG_CFGINFO_FIFO_DEPTH_ACCESS = "RO";
pub const PIO_INSTR_MEM0_OFFSET = _u(@as(c_int, 0x00000048));
pub const PIO_INSTR_MEM0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM0_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM0_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM0_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM0_ACCESS = "WO";
pub const PIO_INSTR_MEM1_OFFSET = _u(@as(c_int, 0x0000004c));
pub const PIO_INSTR_MEM1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM1_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM1_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM1_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM1_ACCESS = "WO";
pub const PIO_INSTR_MEM2_OFFSET = _u(@as(c_int, 0x00000050));
pub const PIO_INSTR_MEM2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM2_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM2_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM2_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM2_ACCESS = "WO";
pub const PIO_INSTR_MEM3_OFFSET = _u(@as(c_int, 0x00000054));
pub const PIO_INSTR_MEM3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM3_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM3_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM3_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM3_ACCESS = "WO";
pub const PIO_INSTR_MEM4_OFFSET = _u(@as(c_int, 0x00000058));
pub const PIO_INSTR_MEM4_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM4_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM4_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM4_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM4_ACCESS = "WO";
pub const PIO_INSTR_MEM5_OFFSET = _u(@as(c_int, 0x0000005c));
pub const PIO_INSTR_MEM5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM5_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM5_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM5_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM5_ACCESS = "WO";
pub const PIO_INSTR_MEM6_OFFSET = _u(@as(c_int, 0x00000060));
pub const PIO_INSTR_MEM6_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM6_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM6_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM6_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM6_ACCESS = "WO";
pub const PIO_INSTR_MEM7_OFFSET = _u(@as(c_int, 0x00000064));
pub const PIO_INSTR_MEM7_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM7_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM7_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM7_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM7_ACCESS = "WO";
pub const PIO_INSTR_MEM8_OFFSET = _u(@as(c_int, 0x00000068));
pub const PIO_INSTR_MEM8_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM8_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM8_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM8_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM8_ACCESS = "WO";
pub const PIO_INSTR_MEM9_OFFSET = _u(@as(c_int, 0x0000006c));
pub const PIO_INSTR_MEM9_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM9_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM9_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM9_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM9_ACCESS = "WO";
pub const PIO_INSTR_MEM10_OFFSET = _u(@as(c_int, 0x00000070));
pub const PIO_INSTR_MEM10_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM10_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM10_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM10_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM10_ACCESS = "WO";
pub const PIO_INSTR_MEM11_OFFSET = _u(@as(c_int, 0x00000074));
pub const PIO_INSTR_MEM11_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM11_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM11_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM11_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM11_ACCESS = "WO";
pub const PIO_INSTR_MEM12_OFFSET = _u(@as(c_int, 0x00000078));
pub const PIO_INSTR_MEM12_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM12_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM12_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM12_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM12_ACCESS = "WO";
pub const PIO_INSTR_MEM13_OFFSET = _u(@as(c_int, 0x0000007c));
pub const PIO_INSTR_MEM13_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM13_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM13_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM13_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM13_ACCESS = "WO";
pub const PIO_INSTR_MEM14_OFFSET = _u(@as(c_int, 0x00000080));
pub const PIO_INSTR_MEM14_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM14_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM14_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM14_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM14_ACCESS = "WO";
pub const PIO_INSTR_MEM15_OFFSET = _u(@as(c_int, 0x00000084));
pub const PIO_INSTR_MEM15_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM15_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM15_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM15_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM15_ACCESS = "WO";
pub const PIO_INSTR_MEM16_OFFSET = _u(@as(c_int, 0x00000088));
pub const PIO_INSTR_MEM16_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM16_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM16_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM16_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM16_ACCESS = "WO";
pub const PIO_INSTR_MEM17_OFFSET = _u(@as(c_int, 0x0000008c));
pub const PIO_INSTR_MEM17_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM17_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM17_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM17_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM17_ACCESS = "WO";
pub const PIO_INSTR_MEM18_OFFSET = _u(@as(c_int, 0x00000090));
pub const PIO_INSTR_MEM18_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM18_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM18_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM18_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM18_ACCESS = "WO";
pub const PIO_INSTR_MEM19_OFFSET = _u(@as(c_int, 0x00000094));
pub const PIO_INSTR_MEM19_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM19_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM19_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM19_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM19_ACCESS = "WO";
pub const PIO_INSTR_MEM20_OFFSET = _u(@as(c_int, 0x00000098));
pub const PIO_INSTR_MEM20_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM20_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM20_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM20_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM20_ACCESS = "WO";
pub const PIO_INSTR_MEM21_OFFSET = _u(@as(c_int, 0x0000009c));
pub const PIO_INSTR_MEM21_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM21_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM21_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM21_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM21_ACCESS = "WO";
pub const PIO_INSTR_MEM22_OFFSET = _u(@as(c_int, 0x000000a0));
pub const PIO_INSTR_MEM22_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM22_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM22_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM22_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM22_ACCESS = "WO";
pub const PIO_INSTR_MEM23_OFFSET = _u(@as(c_int, 0x000000a4));
pub const PIO_INSTR_MEM23_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM23_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM23_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM23_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM23_ACCESS = "WO";
pub const PIO_INSTR_MEM24_OFFSET = _u(@as(c_int, 0x000000a8));
pub const PIO_INSTR_MEM24_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM24_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM24_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM24_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM24_ACCESS = "WO";
pub const PIO_INSTR_MEM25_OFFSET = _u(@as(c_int, 0x000000ac));
pub const PIO_INSTR_MEM25_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM25_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM25_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM25_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM25_ACCESS = "WO";
pub const PIO_INSTR_MEM26_OFFSET = _u(@as(c_int, 0x000000b0));
pub const PIO_INSTR_MEM26_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM26_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM26_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM26_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM26_ACCESS = "WO";
pub const PIO_INSTR_MEM27_OFFSET = _u(@as(c_int, 0x000000b4));
pub const PIO_INSTR_MEM27_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM27_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM27_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM27_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM27_ACCESS = "WO";
pub const PIO_INSTR_MEM28_OFFSET = _u(@as(c_int, 0x000000b8));
pub const PIO_INSTR_MEM28_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM28_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM28_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM28_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM28_ACCESS = "WO";
pub const PIO_INSTR_MEM29_OFFSET = _u(@as(c_int, 0x000000bc));
pub const PIO_INSTR_MEM29_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM29_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM29_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM29_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM29_ACCESS = "WO";
pub const PIO_INSTR_MEM30_OFFSET = _u(@as(c_int, 0x000000c0));
pub const PIO_INSTR_MEM30_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM30_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM30_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM30_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM30_ACCESS = "WO";
pub const PIO_INSTR_MEM31_OFFSET = _u(@as(c_int, 0x000000c4));
pub const PIO_INSTR_MEM31_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_INSTR_MEM31_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INSTR_MEM31_MSB = _u(@as(c_int, 15));
pub const PIO_INSTR_MEM31_LSB = _u(@as(c_int, 0));
pub const PIO_INSTR_MEM31_ACCESS = "WO";
pub const PIO_SM0_CLKDIV_OFFSET = _u(@as(c_int, 0x000000c8));
pub const PIO_SM0_CLKDIV_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff00, .hexadecimal));
pub const PIO_SM0_CLKDIV_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const PIO_SM0_CLKDIV_INT_RESET = _u(@as(c_int, 0x0001));
pub const PIO_SM0_CLKDIV_INT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff0000, .hexadecimal));
pub const PIO_SM0_CLKDIV_INT_MSB = _u(@as(c_int, 31));
pub const PIO_SM0_CLKDIV_INT_LSB = _u(@as(c_int, 16));
pub const PIO_SM0_CLKDIV_INT_ACCESS = "RW";
pub const PIO_SM0_CLKDIV_FRAC_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM0_CLKDIV_FRAC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ff00, .hexadecimal));
pub const PIO_SM0_CLKDIV_FRAC_MSB = _u(@as(c_int, 15));
pub const PIO_SM0_CLKDIV_FRAC_LSB = _u(@as(c_int, 8));
pub const PIO_SM0_CLKDIV_FRAC_ACCESS = "RW";
pub const PIO_SM0_EXECCTRL_OFFSET = _u(@as(c_int, 0x000000cc));
pub const PIO_SM0_EXECCTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff9f, .hexadecimal));
pub const PIO_SM0_EXECCTRL_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001f000, .hexadecimal));
pub const PIO_SM0_EXECCTRL_EXEC_STALLED_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM0_EXECCTRL_EXEC_STALLED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const PIO_SM0_EXECCTRL_EXEC_STALLED_MSB = _u(@as(c_int, 31));
pub const PIO_SM0_EXECCTRL_EXEC_STALLED_LSB = _u(@as(c_int, 31));
pub const PIO_SM0_EXECCTRL_EXEC_STALLED_ACCESS = "RO";
pub const PIO_SM0_EXECCTRL_SIDE_EN_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM0_EXECCTRL_SIDE_EN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const PIO_SM0_EXECCTRL_SIDE_EN_MSB = _u(@as(c_int, 30));
pub const PIO_SM0_EXECCTRL_SIDE_EN_LSB = _u(@as(c_int, 30));
pub const PIO_SM0_EXECCTRL_SIDE_EN_ACCESS = "RW";
pub const PIO_SM0_EXECCTRL_SIDE_PINDIR_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM0_EXECCTRL_SIDE_PINDIR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const PIO_SM0_EXECCTRL_SIDE_PINDIR_MSB = _u(@as(c_int, 29));
pub const PIO_SM0_EXECCTRL_SIDE_PINDIR_LSB = _u(@as(c_int, 29));
pub const PIO_SM0_EXECCTRL_SIDE_PINDIR_ACCESS = "RW";
pub const PIO_SM0_EXECCTRL_JMP_PIN_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM0_EXECCTRL_JMP_PIN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1f000000, .hexadecimal));
pub const PIO_SM0_EXECCTRL_JMP_PIN_MSB = _u(@as(c_int, 28));
pub const PIO_SM0_EXECCTRL_JMP_PIN_LSB = _u(@as(c_int, 24));
pub const PIO_SM0_EXECCTRL_JMP_PIN_ACCESS = "RW";
pub const PIO_SM0_EXECCTRL_OUT_EN_SEL_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM0_EXECCTRL_OUT_EN_SEL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f80000, .hexadecimal));
pub const PIO_SM0_EXECCTRL_OUT_EN_SEL_MSB = _u(@as(c_int, 23));
pub const PIO_SM0_EXECCTRL_OUT_EN_SEL_LSB = _u(@as(c_int, 19));
pub const PIO_SM0_EXECCTRL_OUT_EN_SEL_ACCESS = "RW";
pub const PIO_SM0_EXECCTRL_INLINE_OUT_EN_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM0_EXECCTRL_INLINE_OUT_EN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const PIO_SM0_EXECCTRL_INLINE_OUT_EN_MSB = _u(@as(c_int, 18));
pub const PIO_SM0_EXECCTRL_INLINE_OUT_EN_LSB = _u(@as(c_int, 18));
pub const PIO_SM0_EXECCTRL_INLINE_OUT_EN_ACCESS = "RW";
pub const PIO_SM0_EXECCTRL_OUT_STICKY_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM0_EXECCTRL_OUT_STICKY_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const PIO_SM0_EXECCTRL_OUT_STICKY_MSB = _u(@as(c_int, 17));
pub const PIO_SM0_EXECCTRL_OUT_STICKY_LSB = _u(@as(c_int, 17));
pub const PIO_SM0_EXECCTRL_OUT_STICKY_ACCESS = "RW";
pub const PIO_SM0_EXECCTRL_WRAP_TOP_RESET = _u(@as(c_int, 0x1f));
pub const PIO_SM0_EXECCTRL_WRAP_TOP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001f000, .hexadecimal));
pub const PIO_SM0_EXECCTRL_WRAP_TOP_MSB = _u(@as(c_int, 16));
pub const PIO_SM0_EXECCTRL_WRAP_TOP_LSB = _u(@as(c_int, 12));
pub const PIO_SM0_EXECCTRL_WRAP_TOP_ACCESS = "RW";
pub const PIO_SM0_EXECCTRL_WRAP_BOTTOM_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM0_EXECCTRL_WRAP_BOTTOM_BITS = _u(@as(c_int, 0x00000f80));
pub const PIO_SM0_EXECCTRL_WRAP_BOTTOM_MSB = _u(@as(c_int, 11));
pub const PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB = _u(@as(c_int, 7));
pub const PIO_SM0_EXECCTRL_WRAP_BOTTOM_ACCESS = "RW";
pub const PIO_SM0_EXECCTRL_STATUS_SEL_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM0_EXECCTRL_STATUS_SEL_BITS = _u(@as(c_int, 0x00000010));
pub const PIO_SM0_EXECCTRL_STATUS_SEL_MSB = _u(@as(c_int, 4));
pub const PIO_SM0_EXECCTRL_STATUS_SEL_LSB = _u(@as(c_int, 4));
pub const PIO_SM0_EXECCTRL_STATUS_SEL_ACCESS = "RW";
pub const PIO_SM0_EXECCTRL_STATUS_SEL_VALUE_TXLEVEL = _u(@as(c_int, 0x0));
pub const PIO_SM0_EXECCTRL_STATUS_SEL_VALUE_RXLEVEL = _u(@as(c_int, 0x1));
pub const PIO_SM0_EXECCTRL_STATUS_N_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM0_EXECCTRL_STATUS_N_BITS = _u(@as(c_int, 0x0000000f));
pub const PIO_SM0_EXECCTRL_STATUS_N_MSB = _u(@as(c_int, 3));
pub const PIO_SM0_EXECCTRL_STATUS_N_LSB = _u(@as(c_int, 0));
pub const PIO_SM0_EXECCTRL_STATUS_N_ACCESS = "RW";
pub const PIO_SM0_SHIFTCTRL_OFFSET = _u(@as(c_int, 0x000000d0));
pub const PIO_SM0_SHIFTCTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff0000, .hexadecimal));
pub const PIO_SM0_SHIFTCTRL_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000c0000, .hexadecimal));
pub const PIO_SM0_SHIFTCTRL_FJOIN_RX_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM0_SHIFTCTRL_FJOIN_RX_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const PIO_SM0_SHIFTCTRL_FJOIN_RX_MSB = _u(@as(c_int, 31));
pub const PIO_SM0_SHIFTCTRL_FJOIN_RX_LSB = _u(@as(c_int, 31));
pub const PIO_SM0_SHIFTCTRL_FJOIN_RX_ACCESS = "RW";
pub const PIO_SM0_SHIFTCTRL_FJOIN_TX_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM0_SHIFTCTRL_FJOIN_TX_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const PIO_SM0_SHIFTCTRL_FJOIN_TX_MSB = _u(@as(c_int, 30));
pub const PIO_SM0_SHIFTCTRL_FJOIN_TX_LSB = _u(@as(c_int, 30));
pub const PIO_SM0_SHIFTCTRL_FJOIN_TX_ACCESS = "RW";
pub const PIO_SM0_SHIFTCTRL_PULL_THRESH_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM0_SHIFTCTRL_PULL_THRESH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3e000000, .hexadecimal));
pub const PIO_SM0_SHIFTCTRL_PULL_THRESH_MSB = _u(@as(c_int, 29));
pub const PIO_SM0_SHIFTCTRL_PULL_THRESH_LSB = _u(@as(c_int, 25));
pub const PIO_SM0_SHIFTCTRL_PULL_THRESH_ACCESS = "RW";
pub const PIO_SM0_SHIFTCTRL_PUSH_THRESH_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM0_SHIFTCTRL_PUSH_THRESH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01f00000, .hexadecimal));
pub const PIO_SM0_SHIFTCTRL_PUSH_THRESH_MSB = _u(@as(c_int, 24));
pub const PIO_SM0_SHIFTCTRL_PUSH_THRESH_LSB = _u(@as(c_int, 20));
pub const PIO_SM0_SHIFTCTRL_PUSH_THRESH_ACCESS = "RW";
pub const PIO_SM0_SHIFTCTRL_OUT_SHIFTDIR_RESET = _u(@as(c_int, 0x1));
pub const PIO_SM0_SHIFTCTRL_OUT_SHIFTDIR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const PIO_SM0_SHIFTCTRL_OUT_SHIFTDIR_MSB = _u(@as(c_int, 19));
pub const PIO_SM0_SHIFTCTRL_OUT_SHIFTDIR_LSB = _u(@as(c_int, 19));
pub const PIO_SM0_SHIFTCTRL_OUT_SHIFTDIR_ACCESS = "RW";
pub const PIO_SM0_SHIFTCTRL_IN_SHIFTDIR_RESET = _u(@as(c_int, 0x1));
pub const PIO_SM0_SHIFTCTRL_IN_SHIFTDIR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const PIO_SM0_SHIFTCTRL_IN_SHIFTDIR_MSB = _u(@as(c_int, 18));
pub const PIO_SM0_SHIFTCTRL_IN_SHIFTDIR_LSB = _u(@as(c_int, 18));
pub const PIO_SM0_SHIFTCTRL_IN_SHIFTDIR_ACCESS = "RW";
pub const PIO_SM0_SHIFTCTRL_AUTOPULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM0_SHIFTCTRL_AUTOPULL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const PIO_SM0_SHIFTCTRL_AUTOPULL_MSB = _u(@as(c_int, 17));
pub const PIO_SM0_SHIFTCTRL_AUTOPULL_LSB = _u(@as(c_int, 17));
pub const PIO_SM0_SHIFTCTRL_AUTOPULL_ACCESS = "RW";
pub const PIO_SM0_SHIFTCTRL_AUTOPUSH_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM0_SHIFTCTRL_AUTOPUSH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const PIO_SM0_SHIFTCTRL_AUTOPUSH_MSB = _u(@as(c_int, 16));
pub const PIO_SM0_SHIFTCTRL_AUTOPUSH_LSB = _u(@as(c_int, 16));
pub const PIO_SM0_SHIFTCTRL_AUTOPUSH_ACCESS = "RW";
pub const PIO_SM0_ADDR_OFFSET = _u(@as(c_int, 0x000000d4));
pub const PIO_SM0_ADDR_BITS = _u(@as(c_int, 0x0000001f));
pub const PIO_SM0_ADDR_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_SM0_ADDR_MSB = _u(@as(c_int, 4));
pub const PIO_SM0_ADDR_LSB = _u(@as(c_int, 0));
pub const PIO_SM0_ADDR_ACCESS = "RO";
pub const PIO_SM0_INSTR_OFFSET = _u(@as(c_int, 0x000000d8));
pub const PIO_SM0_INSTR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_SM0_INSTR_RESET = "-";
pub const PIO_SM0_INSTR_MSB = _u(@as(c_int, 15));
pub const PIO_SM0_INSTR_LSB = _u(@as(c_int, 0));
pub const PIO_SM0_INSTR_ACCESS = "RW";
pub const PIO_SM0_PINCTRL_OFFSET = _u(@as(c_int, 0x000000dc));
pub const PIO_SM0_PINCTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const PIO_SM0_PINCTRL_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x14000000, .hexadecimal));
pub const PIO_SM0_PINCTRL_SIDESET_COUNT_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM0_PINCTRL_SIDESET_COUNT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe0000000, .hexadecimal));
pub const PIO_SM0_PINCTRL_SIDESET_COUNT_MSB = _u(@as(c_int, 31));
pub const PIO_SM0_PINCTRL_SIDESET_COUNT_LSB = _u(@as(c_int, 29));
pub const PIO_SM0_PINCTRL_SIDESET_COUNT_ACCESS = "RW";
pub const PIO_SM0_PINCTRL_SET_COUNT_RESET = _u(@as(c_int, 0x5));
pub const PIO_SM0_PINCTRL_SET_COUNT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1c000000, .hexadecimal));
pub const PIO_SM0_PINCTRL_SET_COUNT_MSB = _u(@as(c_int, 28));
pub const PIO_SM0_PINCTRL_SET_COUNT_LSB = _u(@as(c_int, 26));
pub const PIO_SM0_PINCTRL_SET_COUNT_ACCESS = "RW";
pub const PIO_SM0_PINCTRL_OUT_COUNT_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM0_PINCTRL_OUT_COUNT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x03f00000, .hexadecimal));
pub const PIO_SM0_PINCTRL_OUT_COUNT_MSB = _u(@as(c_int, 25));
pub const PIO_SM0_PINCTRL_OUT_COUNT_LSB = _u(@as(c_int, 20));
pub const PIO_SM0_PINCTRL_OUT_COUNT_ACCESS = "RW";
pub const PIO_SM0_PINCTRL_IN_BASE_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM0_PINCTRL_IN_BASE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f8000, .hexadecimal));
pub const PIO_SM0_PINCTRL_IN_BASE_MSB = _u(@as(c_int, 19));
pub const PIO_SM0_PINCTRL_IN_BASE_LSB = _u(@as(c_int, 15));
pub const PIO_SM0_PINCTRL_IN_BASE_ACCESS = "RW";
pub const PIO_SM0_PINCTRL_SIDESET_BASE_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM0_PINCTRL_SIDESET_BASE_BITS = _u(@as(c_int, 0x00007c00));
pub const PIO_SM0_PINCTRL_SIDESET_BASE_MSB = _u(@as(c_int, 14));
pub const PIO_SM0_PINCTRL_SIDESET_BASE_LSB = _u(@as(c_int, 10));
pub const PIO_SM0_PINCTRL_SIDESET_BASE_ACCESS = "RW";
pub const PIO_SM0_PINCTRL_SET_BASE_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM0_PINCTRL_SET_BASE_BITS = _u(@as(c_int, 0x000003e0));
pub const PIO_SM0_PINCTRL_SET_BASE_MSB = _u(@as(c_int, 9));
pub const PIO_SM0_PINCTRL_SET_BASE_LSB = _u(@as(c_int, 5));
pub const PIO_SM0_PINCTRL_SET_BASE_ACCESS = "RW";
pub const PIO_SM0_PINCTRL_OUT_BASE_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM0_PINCTRL_OUT_BASE_BITS = _u(@as(c_int, 0x0000001f));
pub const PIO_SM0_PINCTRL_OUT_BASE_MSB = _u(@as(c_int, 4));
pub const PIO_SM0_PINCTRL_OUT_BASE_LSB = _u(@as(c_int, 0));
pub const PIO_SM0_PINCTRL_OUT_BASE_ACCESS = "RW";
pub const PIO_SM1_CLKDIV_OFFSET = _u(@as(c_int, 0x000000e0));
pub const PIO_SM1_CLKDIV_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff00, .hexadecimal));
pub const PIO_SM1_CLKDIV_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const PIO_SM1_CLKDIV_INT_RESET = _u(@as(c_int, 0x0001));
pub const PIO_SM1_CLKDIV_INT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff0000, .hexadecimal));
pub const PIO_SM1_CLKDIV_INT_MSB = _u(@as(c_int, 31));
pub const PIO_SM1_CLKDIV_INT_LSB = _u(@as(c_int, 16));
pub const PIO_SM1_CLKDIV_INT_ACCESS = "RW";
pub const PIO_SM1_CLKDIV_FRAC_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM1_CLKDIV_FRAC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ff00, .hexadecimal));
pub const PIO_SM1_CLKDIV_FRAC_MSB = _u(@as(c_int, 15));
pub const PIO_SM1_CLKDIV_FRAC_LSB = _u(@as(c_int, 8));
pub const PIO_SM1_CLKDIV_FRAC_ACCESS = "RW";
pub const PIO_SM1_EXECCTRL_OFFSET = _u(@as(c_int, 0x000000e4));
pub const PIO_SM1_EXECCTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff9f, .hexadecimal));
pub const PIO_SM1_EXECCTRL_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001f000, .hexadecimal));
pub const PIO_SM1_EXECCTRL_EXEC_STALLED_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM1_EXECCTRL_EXEC_STALLED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const PIO_SM1_EXECCTRL_EXEC_STALLED_MSB = _u(@as(c_int, 31));
pub const PIO_SM1_EXECCTRL_EXEC_STALLED_LSB = _u(@as(c_int, 31));
pub const PIO_SM1_EXECCTRL_EXEC_STALLED_ACCESS = "RO";
pub const PIO_SM1_EXECCTRL_SIDE_EN_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM1_EXECCTRL_SIDE_EN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const PIO_SM1_EXECCTRL_SIDE_EN_MSB = _u(@as(c_int, 30));
pub const PIO_SM1_EXECCTRL_SIDE_EN_LSB = _u(@as(c_int, 30));
pub const PIO_SM1_EXECCTRL_SIDE_EN_ACCESS = "RW";
pub const PIO_SM1_EXECCTRL_SIDE_PINDIR_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM1_EXECCTRL_SIDE_PINDIR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const PIO_SM1_EXECCTRL_SIDE_PINDIR_MSB = _u(@as(c_int, 29));
pub const PIO_SM1_EXECCTRL_SIDE_PINDIR_LSB = _u(@as(c_int, 29));
pub const PIO_SM1_EXECCTRL_SIDE_PINDIR_ACCESS = "RW";
pub const PIO_SM1_EXECCTRL_JMP_PIN_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM1_EXECCTRL_JMP_PIN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1f000000, .hexadecimal));
pub const PIO_SM1_EXECCTRL_JMP_PIN_MSB = _u(@as(c_int, 28));
pub const PIO_SM1_EXECCTRL_JMP_PIN_LSB = _u(@as(c_int, 24));
pub const PIO_SM1_EXECCTRL_JMP_PIN_ACCESS = "RW";
pub const PIO_SM1_EXECCTRL_OUT_EN_SEL_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM1_EXECCTRL_OUT_EN_SEL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f80000, .hexadecimal));
pub const PIO_SM1_EXECCTRL_OUT_EN_SEL_MSB = _u(@as(c_int, 23));
pub const PIO_SM1_EXECCTRL_OUT_EN_SEL_LSB = _u(@as(c_int, 19));
pub const PIO_SM1_EXECCTRL_OUT_EN_SEL_ACCESS = "RW";
pub const PIO_SM1_EXECCTRL_INLINE_OUT_EN_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM1_EXECCTRL_INLINE_OUT_EN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const PIO_SM1_EXECCTRL_INLINE_OUT_EN_MSB = _u(@as(c_int, 18));
pub const PIO_SM1_EXECCTRL_INLINE_OUT_EN_LSB = _u(@as(c_int, 18));
pub const PIO_SM1_EXECCTRL_INLINE_OUT_EN_ACCESS = "RW";
pub const PIO_SM1_EXECCTRL_OUT_STICKY_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM1_EXECCTRL_OUT_STICKY_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const PIO_SM1_EXECCTRL_OUT_STICKY_MSB = _u(@as(c_int, 17));
pub const PIO_SM1_EXECCTRL_OUT_STICKY_LSB = _u(@as(c_int, 17));
pub const PIO_SM1_EXECCTRL_OUT_STICKY_ACCESS = "RW";
pub const PIO_SM1_EXECCTRL_WRAP_TOP_RESET = _u(@as(c_int, 0x1f));
pub const PIO_SM1_EXECCTRL_WRAP_TOP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001f000, .hexadecimal));
pub const PIO_SM1_EXECCTRL_WRAP_TOP_MSB = _u(@as(c_int, 16));
pub const PIO_SM1_EXECCTRL_WRAP_TOP_LSB = _u(@as(c_int, 12));
pub const PIO_SM1_EXECCTRL_WRAP_TOP_ACCESS = "RW";
pub const PIO_SM1_EXECCTRL_WRAP_BOTTOM_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM1_EXECCTRL_WRAP_BOTTOM_BITS = _u(@as(c_int, 0x00000f80));
pub const PIO_SM1_EXECCTRL_WRAP_BOTTOM_MSB = _u(@as(c_int, 11));
pub const PIO_SM1_EXECCTRL_WRAP_BOTTOM_LSB = _u(@as(c_int, 7));
pub const PIO_SM1_EXECCTRL_WRAP_BOTTOM_ACCESS = "RW";
pub const PIO_SM1_EXECCTRL_STATUS_SEL_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM1_EXECCTRL_STATUS_SEL_BITS = _u(@as(c_int, 0x00000010));
pub const PIO_SM1_EXECCTRL_STATUS_SEL_MSB = _u(@as(c_int, 4));
pub const PIO_SM1_EXECCTRL_STATUS_SEL_LSB = _u(@as(c_int, 4));
pub const PIO_SM1_EXECCTRL_STATUS_SEL_ACCESS = "RW";
pub const PIO_SM1_EXECCTRL_STATUS_SEL_VALUE_TXLEVEL = _u(@as(c_int, 0x0));
pub const PIO_SM1_EXECCTRL_STATUS_SEL_VALUE_RXLEVEL = _u(@as(c_int, 0x1));
pub const PIO_SM1_EXECCTRL_STATUS_N_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM1_EXECCTRL_STATUS_N_BITS = _u(@as(c_int, 0x0000000f));
pub const PIO_SM1_EXECCTRL_STATUS_N_MSB = _u(@as(c_int, 3));
pub const PIO_SM1_EXECCTRL_STATUS_N_LSB = _u(@as(c_int, 0));
pub const PIO_SM1_EXECCTRL_STATUS_N_ACCESS = "RW";
pub const PIO_SM1_SHIFTCTRL_OFFSET = _u(@as(c_int, 0x000000e8));
pub const PIO_SM1_SHIFTCTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff0000, .hexadecimal));
pub const PIO_SM1_SHIFTCTRL_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000c0000, .hexadecimal));
pub const PIO_SM1_SHIFTCTRL_FJOIN_RX_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM1_SHIFTCTRL_FJOIN_RX_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const PIO_SM1_SHIFTCTRL_FJOIN_RX_MSB = _u(@as(c_int, 31));
pub const PIO_SM1_SHIFTCTRL_FJOIN_RX_LSB = _u(@as(c_int, 31));
pub const PIO_SM1_SHIFTCTRL_FJOIN_RX_ACCESS = "RW";
pub const PIO_SM1_SHIFTCTRL_FJOIN_TX_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM1_SHIFTCTRL_FJOIN_TX_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const PIO_SM1_SHIFTCTRL_FJOIN_TX_MSB = _u(@as(c_int, 30));
pub const PIO_SM1_SHIFTCTRL_FJOIN_TX_LSB = _u(@as(c_int, 30));
pub const PIO_SM1_SHIFTCTRL_FJOIN_TX_ACCESS = "RW";
pub const PIO_SM1_SHIFTCTRL_PULL_THRESH_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM1_SHIFTCTRL_PULL_THRESH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3e000000, .hexadecimal));
pub const PIO_SM1_SHIFTCTRL_PULL_THRESH_MSB = _u(@as(c_int, 29));
pub const PIO_SM1_SHIFTCTRL_PULL_THRESH_LSB = _u(@as(c_int, 25));
pub const PIO_SM1_SHIFTCTRL_PULL_THRESH_ACCESS = "RW";
pub const PIO_SM1_SHIFTCTRL_PUSH_THRESH_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM1_SHIFTCTRL_PUSH_THRESH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01f00000, .hexadecimal));
pub const PIO_SM1_SHIFTCTRL_PUSH_THRESH_MSB = _u(@as(c_int, 24));
pub const PIO_SM1_SHIFTCTRL_PUSH_THRESH_LSB = _u(@as(c_int, 20));
pub const PIO_SM1_SHIFTCTRL_PUSH_THRESH_ACCESS = "RW";
pub const PIO_SM1_SHIFTCTRL_OUT_SHIFTDIR_RESET = _u(@as(c_int, 0x1));
pub const PIO_SM1_SHIFTCTRL_OUT_SHIFTDIR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const PIO_SM1_SHIFTCTRL_OUT_SHIFTDIR_MSB = _u(@as(c_int, 19));
pub const PIO_SM1_SHIFTCTRL_OUT_SHIFTDIR_LSB = _u(@as(c_int, 19));
pub const PIO_SM1_SHIFTCTRL_OUT_SHIFTDIR_ACCESS = "RW";
pub const PIO_SM1_SHIFTCTRL_IN_SHIFTDIR_RESET = _u(@as(c_int, 0x1));
pub const PIO_SM1_SHIFTCTRL_IN_SHIFTDIR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const PIO_SM1_SHIFTCTRL_IN_SHIFTDIR_MSB = _u(@as(c_int, 18));
pub const PIO_SM1_SHIFTCTRL_IN_SHIFTDIR_LSB = _u(@as(c_int, 18));
pub const PIO_SM1_SHIFTCTRL_IN_SHIFTDIR_ACCESS = "RW";
pub const PIO_SM1_SHIFTCTRL_AUTOPULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM1_SHIFTCTRL_AUTOPULL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const PIO_SM1_SHIFTCTRL_AUTOPULL_MSB = _u(@as(c_int, 17));
pub const PIO_SM1_SHIFTCTRL_AUTOPULL_LSB = _u(@as(c_int, 17));
pub const PIO_SM1_SHIFTCTRL_AUTOPULL_ACCESS = "RW";
pub const PIO_SM1_SHIFTCTRL_AUTOPUSH_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM1_SHIFTCTRL_AUTOPUSH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const PIO_SM1_SHIFTCTRL_AUTOPUSH_MSB = _u(@as(c_int, 16));
pub const PIO_SM1_SHIFTCTRL_AUTOPUSH_LSB = _u(@as(c_int, 16));
pub const PIO_SM1_SHIFTCTRL_AUTOPUSH_ACCESS = "RW";
pub const PIO_SM1_ADDR_OFFSET = _u(@as(c_int, 0x000000ec));
pub const PIO_SM1_ADDR_BITS = _u(@as(c_int, 0x0000001f));
pub const PIO_SM1_ADDR_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_SM1_ADDR_MSB = _u(@as(c_int, 4));
pub const PIO_SM1_ADDR_LSB = _u(@as(c_int, 0));
pub const PIO_SM1_ADDR_ACCESS = "RO";
pub const PIO_SM1_INSTR_OFFSET = _u(@as(c_int, 0x000000f0));
pub const PIO_SM1_INSTR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_SM1_INSTR_RESET = "-";
pub const PIO_SM1_INSTR_MSB = _u(@as(c_int, 15));
pub const PIO_SM1_INSTR_LSB = _u(@as(c_int, 0));
pub const PIO_SM1_INSTR_ACCESS = "RW";
pub const PIO_SM1_PINCTRL_OFFSET = _u(@as(c_int, 0x000000f4));
pub const PIO_SM1_PINCTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const PIO_SM1_PINCTRL_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x14000000, .hexadecimal));
pub const PIO_SM1_PINCTRL_SIDESET_COUNT_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM1_PINCTRL_SIDESET_COUNT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe0000000, .hexadecimal));
pub const PIO_SM1_PINCTRL_SIDESET_COUNT_MSB = _u(@as(c_int, 31));
pub const PIO_SM1_PINCTRL_SIDESET_COUNT_LSB = _u(@as(c_int, 29));
pub const PIO_SM1_PINCTRL_SIDESET_COUNT_ACCESS = "RW";
pub const PIO_SM1_PINCTRL_SET_COUNT_RESET = _u(@as(c_int, 0x5));
pub const PIO_SM1_PINCTRL_SET_COUNT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1c000000, .hexadecimal));
pub const PIO_SM1_PINCTRL_SET_COUNT_MSB = _u(@as(c_int, 28));
pub const PIO_SM1_PINCTRL_SET_COUNT_LSB = _u(@as(c_int, 26));
pub const PIO_SM1_PINCTRL_SET_COUNT_ACCESS = "RW";
pub const PIO_SM1_PINCTRL_OUT_COUNT_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM1_PINCTRL_OUT_COUNT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x03f00000, .hexadecimal));
pub const PIO_SM1_PINCTRL_OUT_COUNT_MSB = _u(@as(c_int, 25));
pub const PIO_SM1_PINCTRL_OUT_COUNT_LSB = _u(@as(c_int, 20));
pub const PIO_SM1_PINCTRL_OUT_COUNT_ACCESS = "RW";
pub const PIO_SM1_PINCTRL_IN_BASE_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM1_PINCTRL_IN_BASE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f8000, .hexadecimal));
pub const PIO_SM1_PINCTRL_IN_BASE_MSB = _u(@as(c_int, 19));
pub const PIO_SM1_PINCTRL_IN_BASE_LSB = _u(@as(c_int, 15));
pub const PIO_SM1_PINCTRL_IN_BASE_ACCESS = "RW";
pub const PIO_SM1_PINCTRL_SIDESET_BASE_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM1_PINCTRL_SIDESET_BASE_BITS = _u(@as(c_int, 0x00007c00));
pub const PIO_SM1_PINCTRL_SIDESET_BASE_MSB = _u(@as(c_int, 14));
pub const PIO_SM1_PINCTRL_SIDESET_BASE_LSB = _u(@as(c_int, 10));
pub const PIO_SM1_PINCTRL_SIDESET_BASE_ACCESS = "RW";
pub const PIO_SM1_PINCTRL_SET_BASE_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM1_PINCTRL_SET_BASE_BITS = _u(@as(c_int, 0x000003e0));
pub const PIO_SM1_PINCTRL_SET_BASE_MSB = _u(@as(c_int, 9));
pub const PIO_SM1_PINCTRL_SET_BASE_LSB = _u(@as(c_int, 5));
pub const PIO_SM1_PINCTRL_SET_BASE_ACCESS = "RW";
pub const PIO_SM1_PINCTRL_OUT_BASE_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM1_PINCTRL_OUT_BASE_BITS = _u(@as(c_int, 0x0000001f));
pub const PIO_SM1_PINCTRL_OUT_BASE_MSB = _u(@as(c_int, 4));
pub const PIO_SM1_PINCTRL_OUT_BASE_LSB = _u(@as(c_int, 0));
pub const PIO_SM1_PINCTRL_OUT_BASE_ACCESS = "RW";
pub const PIO_SM2_CLKDIV_OFFSET = _u(@as(c_int, 0x000000f8));
pub const PIO_SM2_CLKDIV_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff00, .hexadecimal));
pub const PIO_SM2_CLKDIV_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const PIO_SM2_CLKDIV_INT_RESET = _u(@as(c_int, 0x0001));
pub const PIO_SM2_CLKDIV_INT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff0000, .hexadecimal));
pub const PIO_SM2_CLKDIV_INT_MSB = _u(@as(c_int, 31));
pub const PIO_SM2_CLKDIV_INT_LSB = _u(@as(c_int, 16));
pub const PIO_SM2_CLKDIV_INT_ACCESS = "RW";
pub const PIO_SM2_CLKDIV_FRAC_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM2_CLKDIV_FRAC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ff00, .hexadecimal));
pub const PIO_SM2_CLKDIV_FRAC_MSB = _u(@as(c_int, 15));
pub const PIO_SM2_CLKDIV_FRAC_LSB = _u(@as(c_int, 8));
pub const PIO_SM2_CLKDIV_FRAC_ACCESS = "RW";
pub const PIO_SM2_EXECCTRL_OFFSET = _u(@as(c_int, 0x000000fc));
pub const PIO_SM2_EXECCTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff9f, .hexadecimal));
pub const PIO_SM2_EXECCTRL_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001f000, .hexadecimal));
pub const PIO_SM2_EXECCTRL_EXEC_STALLED_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM2_EXECCTRL_EXEC_STALLED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const PIO_SM2_EXECCTRL_EXEC_STALLED_MSB = _u(@as(c_int, 31));
pub const PIO_SM2_EXECCTRL_EXEC_STALLED_LSB = _u(@as(c_int, 31));
pub const PIO_SM2_EXECCTRL_EXEC_STALLED_ACCESS = "RO";
pub const PIO_SM2_EXECCTRL_SIDE_EN_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM2_EXECCTRL_SIDE_EN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const PIO_SM2_EXECCTRL_SIDE_EN_MSB = _u(@as(c_int, 30));
pub const PIO_SM2_EXECCTRL_SIDE_EN_LSB = _u(@as(c_int, 30));
pub const PIO_SM2_EXECCTRL_SIDE_EN_ACCESS = "RW";
pub const PIO_SM2_EXECCTRL_SIDE_PINDIR_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM2_EXECCTRL_SIDE_PINDIR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const PIO_SM2_EXECCTRL_SIDE_PINDIR_MSB = _u(@as(c_int, 29));
pub const PIO_SM2_EXECCTRL_SIDE_PINDIR_LSB = _u(@as(c_int, 29));
pub const PIO_SM2_EXECCTRL_SIDE_PINDIR_ACCESS = "RW";
pub const PIO_SM2_EXECCTRL_JMP_PIN_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM2_EXECCTRL_JMP_PIN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1f000000, .hexadecimal));
pub const PIO_SM2_EXECCTRL_JMP_PIN_MSB = _u(@as(c_int, 28));
pub const PIO_SM2_EXECCTRL_JMP_PIN_LSB = _u(@as(c_int, 24));
pub const PIO_SM2_EXECCTRL_JMP_PIN_ACCESS = "RW";
pub const PIO_SM2_EXECCTRL_OUT_EN_SEL_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM2_EXECCTRL_OUT_EN_SEL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f80000, .hexadecimal));
pub const PIO_SM2_EXECCTRL_OUT_EN_SEL_MSB = _u(@as(c_int, 23));
pub const PIO_SM2_EXECCTRL_OUT_EN_SEL_LSB = _u(@as(c_int, 19));
pub const PIO_SM2_EXECCTRL_OUT_EN_SEL_ACCESS = "RW";
pub const PIO_SM2_EXECCTRL_INLINE_OUT_EN_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM2_EXECCTRL_INLINE_OUT_EN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const PIO_SM2_EXECCTRL_INLINE_OUT_EN_MSB = _u(@as(c_int, 18));
pub const PIO_SM2_EXECCTRL_INLINE_OUT_EN_LSB = _u(@as(c_int, 18));
pub const PIO_SM2_EXECCTRL_INLINE_OUT_EN_ACCESS = "RW";
pub const PIO_SM2_EXECCTRL_OUT_STICKY_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM2_EXECCTRL_OUT_STICKY_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const PIO_SM2_EXECCTRL_OUT_STICKY_MSB = _u(@as(c_int, 17));
pub const PIO_SM2_EXECCTRL_OUT_STICKY_LSB = _u(@as(c_int, 17));
pub const PIO_SM2_EXECCTRL_OUT_STICKY_ACCESS = "RW";
pub const PIO_SM2_EXECCTRL_WRAP_TOP_RESET = _u(@as(c_int, 0x1f));
pub const PIO_SM2_EXECCTRL_WRAP_TOP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001f000, .hexadecimal));
pub const PIO_SM2_EXECCTRL_WRAP_TOP_MSB = _u(@as(c_int, 16));
pub const PIO_SM2_EXECCTRL_WRAP_TOP_LSB = _u(@as(c_int, 12));
pub const PIO_SM2_EXECCTRL_WRAP_TOP_ACCESS = "RW";
pub const PIO_SM2_EXECCTRL_WRAP_BOTTOM_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM2_EXECCTRL_WRAP_BOTTOM_BITS = _u(@as(c_int, 0x00000f80));
pub const PIO_SM2_EXECCTRL_WRAP_BOTTOM_MSB = _u(@as(c_int, 11));
pub const PIO_SM2_EXECCTRL_WRAP_BOTTOM_LSB = _u(@as(c_int, 7));
pub const PIO_SM2_EXECCTRL_WRAP_BOTTOM_ACCESS = "RW";
pub const PIO_SM2_EXECCTRL_STATUS_SEL_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM2_EXECCTRL_STATUS_SEL_BITS = _u(@as(c_int, 0x00000010));
pub const PIO_SM2_EXECCTRL_STATUS_SEL_MSB = _u(@as(c_int, 4));
pub const PIO_SM2_EXECCTRL_STATUS_SEL_LSB = _u(@as(c_int, 4));
pub const PIO_SM2_EXECCTRL_STATUS_SEL_ACCESS = "RW";
pub const PIO_SM2_EXECCTRL_STATUS_SEL_VALUE_TXLEVEL = _u(@as(c_int, 0x0));
pub const PIO_SM2_EXECCTRL_STATUS_SEL_VALUE_RXLEVEL = _u(@as(c_int, 0x1));
pub const PIO_SM2_EXECCTRL_STATUS_N_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM2_EXECCTRL_STATUS_N_BITS = _u(@as(c_int, 0x0000000f));
pub const PIO_SM2_EXECCTRL_STATUS_N_MSB = _u(@as(c_int, 3));
pub const PIO_SM2_EXECCTRL_STATUS_N_LSB = _u(@as(c_int, 0));
pub const PIO_SM2_EXECCTRL_STATUS_N_ACCESS = "RW";
pub const PIO_SM2_SHIFTCTRL_OFFSET = _u(@as(c_int, 0x00000100));
pub const PIO_SM2_SHIFTCTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff0000, .hexadecimal));
pub const PIO_SM2_SHIFTCTRL_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000c0000, .hexadecimal));
pub const PIO_SM2_SHIFTCTRL_FJOIN_RX_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM2_SHIFTCTRL_FJOIN_RX_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const PIO_SM2_SHIFTCTRL_FJOIN_RX_MSB = _u(@as(c_int, 31));
pub const PIO_SM2_SHIFTCTRL_FJOIN_RX_LSB = _u(@as(c_int, 31));
pub const PIO_SM2_SHIFTCTRL_FJOIN_RX_ACCESS = "RW";
pub const PIO_SM2_SHIFTCTRL_FJOIN_TX_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM2_SHIFTCTRL_FJOIN_TX_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const PIO_SM2_SHIFTCTRL_FJOIN_TX_MSB = _u(@as(c_int, 30));
pub const PIO_SM2_SHIFTCTRL_FJOIN_TX_LSB = _u(@as(c_int, 30));
pub const PIO_SM2_SHIFTCTRL_FJOIN_TX_ACCESS = "RW";
pub const PIO_SM2_SHIFTCTRL_PULL_THRESH_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM2_SHIFTCTRL_PULL_THRESH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3e000000, .hexadecimal));
pub const PIO_SM2_SHIFTCTRL_PULL_THRESH_MSB = _u(@as(c_int, 29));
pub const PIO_SM2_SHIFTCTRL_PULL_THRESH_LSB = _u(@as(c_int, 25));
pub const PIO_SM2_SHIFTCTRL_PULL_THRESH_ACCESS = "RW";
pub const PIO_SM2_SHIFTCTRL_PUSH_THRESH_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM2_SHIFTCTRL_PUSH_THRESH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01f00000, .hexadecimal));
pub const PIO_SM2_SHIFTCTRL_PUSH_THRESH_MSB = _u(@as(c_int, 24));
pub const PIO_SM2_SHIFTCTRL_PUSH_THRESH_LSB = _u(@as(c_int, 20));
pub const PIO_SM2_SHIFTCTRL_PUSH_THRESH_ACCESS = "RW";
pub const PIO_SM2_SHIFTCTRL_OUT_SHIFTDIR_RESET = _u(@as(c_int, 0x1));
pub const PIO_SM2_SHIFTCTRL_OUT_SHIFTDIR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const PIO_SM2_SHIFTCTRL_OUT_SHIFTDIR_MSB = _u(@as(c_int, 19));
pub const PIO_SM2_SHIFTCTRL_OUT_SHIFTDIR_LSB = _u(@as(c_int, 19));
pub const PIO_SM2_SHIFTCTRL_OUT_SHIFTDIR_ACCESS = "RW";
pub const PIO_SM2_SHIFTCTRL_IN_SHIFTDIR_RESET = _u(@as(c_int, 0x1));
pub const PIO_SM2_SHIFTCTRL_IN_SHIFTDIR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const PIO_SM2_SHIFTCTRL_IN_SHIFTDIR_MSB = _u(@as(c_int, 18));
pub const PIO_SM2_SHIFTCTRL_IN_SHIFTDIR_LSB = _u(@as(c_int, 18));
pub const PIO_SM2_SHIFTCTRL_IN_SHIFTDIR_ACCESS = "RW";
pub const PIO_SM2_SHIFTCTRL_AUTOPULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM2_SHIFTCTRL_AUTOPULL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const PIO_SM2_SHIFTCTRL_AUTOPULL_MSB = _u(@as(c_int, 17));
pub const PIO_SM2_SHIFTCTRL_AUTOPULL_LSB = _u(@as(c_int, 17));
pub const PIO_SM2_SHIFTCTRL_AUTOPULL_ACCESS = "RW";
pub const PIO_SM2_SHIFTCTRL_AUTOPUSH_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM2_SHIFTCTRL_AUTOPUSH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const PIO_SM2_SHIFTCTRL_AUTOPUSH_MSB = _u(@as(c_int, 16));
pub const PIO_SM2_SHIFTCTRL_AUTOPUSH_LSB = _u(@as(c_int, 16));
pub const PIO_SM2_SHIFTCTRL_AUTOPUSH_ACCESS = "RW";
pub const PIO_SM2_ADDR_OFFSET = _u(@as(c_int, 0x00000104));
pub const PIO_SM2_ADDR_BITS = _u(@as(c_int, 0x0000001f));
pub const PIO_SM2_ADDR_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_SM2_ADDR_MSB = _u(@as(c_int, 4));
pub const PIO_SM2_ADDR_LSB = _u(@as(c_int, 0));
pub const PIO_SM2_ADDR_ACCESS = "RO";
pub const PIO_SM2_INSTR_OFFSET = _u(@as(c_int, 0x00000108));
pub const PIO_SM2_INSTR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_SM2_INSTR_RESET = "-";
pub const PIO_SM2_INSTR_MSB = _u(@as(c_int, 15));
pub const PIO_SM2_INSTR_LSB = _u(@as(c_int, 0));
pub const PIO_SM2_INSTR_ACCESS = "RW";
pub const PIO_SM2_PINCTRL_OFFSET = _u(@as(c_int, 0x0000010c));
pub const PIO_SM2_PINCTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const PIO_SM2_PINCTRL_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x14000000, .hexadecimal));
pub const PIO_SM2_PINCTRL_SIDESET_COUNT_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM2_PINCTRL_SIDESET_COUNT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe0000000, .hexadecimal));
pub const PIO_SM2_PINCTRL_SIDESET_COUNT_MSB = _u(@as(c_int, 31));
pub const PIO_SM2_PINCTRL_SIDESET_COUNT_LSB = _u(@as(c_int, 29));
pub const PIO_SM2_PINCTRL_SIDESET_COUNT_ACCESS = "RW";
pub const PIO_SM2_PINCTRL_SET_COUNT_RESET = _u(@as(c_int, 0x5));
pub const PIO_SM2_PINCTRL_SET_COUNT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1c000000, .hexadecimal));
pub const PIO_SM2_PINCTRL_SET_COUNT_MSB = _u(@as(c_int, 28));
pub const PIO_SM2_PINCTRL_SET_COUNT_LSB = _u(@as(c_int, 26));
pub const PIO_SM2_PINCTRL_SET_COUNT_ACCESS = "RW";
pub const PIO_SM2_PINCTRL_OUT_COUNT_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM2_PINCTRL_OUT_COUNT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x03f00000, .hexadecimal));
pub const PIO_SM2_PINCTRL_OUT_COUNT_MSB = _u(@as(c_int, 25));
pub const PIO_SM2_PINCTRL_OUT_COUNT_LSB = _u(@as(c_int, 20));
pub const PIO_SM2_PINCTRL_OUT_COUNT_ACCESS = "RW";
pub const PIO_SM2_PINCTRL_IN_BASE_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM2_PINCTRL_IN_BASE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f8000, .hexadecimal));
pub const PIO_SM2_PINCTRL_IN_BASE_MSB = _u(@as(c_int, 19));
pub const PIO_SM2_PINCTRL_IN_BASE_LSB = _u(@as(c_int, 15));
pub const PIO_SM2_PINCTRL_IN_BASE_ACCESS = "RW";
pub const PIO_SM2_PINCTRL_SIDESET_BASE_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM2_PINCTRL_SIDESET_BASE_BITS = _u(@as(c_int, 0x00007c00));
pub const PIO_SM2_PINCTRL_SIDESET_BASE_MSB = _u(@as(c_int, 14));
pub const PIO_SM2_PINCTRL_SIDESET_BASE_LSB = _u(@as(c_int, 10));
pub const PIO_SM2_PINCTRL_SIDESET_BASE_ACCESS = "RW";
pub const PIO_SM2_PINCTRL_SET_BASE_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM2_PINCTRL_SET_BASE_BITS = _u(@as(c_int, 0x000003e0));
pub const PIO_SM2_PINCTRL_SET_BASE_MSB = _u(@as(c_int, 9));
pub const PIO_SM2_PINCTRL_SET_BASE_LSB = _u(@as(c_int, 5));
pub const PIO_SM2_PINCTRL_SET_BASE_ACCESS = "RW";
pub const PIO_SM2_PINCTRL_OUT_BASE_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM2_PINCTRL_OUT_BASE_BITS = _u(@as(c_int, 0x0000001f));
pub const PIO_SM2_PINCTRL_OUT_BASE_MSB = _u(@as(c_int, 4));
pub const PIO_SM2_PINCTRL_OUT_BASE_LSB = _u(@as(c_int, 0));
pub const PIO_SM2_PINCTRL_OUT_BASE_ACCESS = "RW";
pub const PIO_SM3_CLKDIV_OFFSET = _u(@as(c_int, 0x00000110));
pub const PIO_SM3_CLKDIV_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff00, .hexadecimal));
pub const PIO_SM3_CLKDIV_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const PIO_SM3_CLKDIV_INT_RESET = _u(@as(c_int, 0x0001));
pub const PIO_SM3_CLKDIV_INT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff0000, .hexadecimal));
pub const PIO_SM3_CLKDIV_INT_MSB = _u(@as(c_int, 31));
pub const PIO_SM3_CLKDIV_INT_LSB = _u(@as(c_int, 16));
pub const PIO_SM3_CLKDIV_INT_ACCESS = "RW";
pub const PIO_SM3_CLKDIV_FRAC_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM3_CLKDIV_FRAC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ff00, .hexadecimal));
pub const PIO_SM3_CLKDIV_FRAC_MSB = _u(@as(c_int, 15));
pub const PIO_SM3_CLKDIV_FRAC_LSB = _u(@as(c_int, 8));
pub const PIO_SM3_CLKDIV_FRAC_ACCESS = "RW";
pub const PIO_SM3_EXECCTRL_OFFSET = _u(@as(c_int, 0x00000114));
pub const PIO_SM3_EXECCTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff9f, .hexadecimal));
pub const PIO_SM3_EXECCTRL_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001f000, .hexadecimal));
pub const PIO_SM3_EXECCTRL_EXEC_STALLED_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM3_EXECCTRL_EXEC_STALLED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const PIO_SM3_EXECCTRL_EXEC_STALLED_MSB = _u(@as(c_int, 31));
pub const PIO_SM3_EXECCTRL_EXEC_STALLED_LSB = _u(@as(c_int, 31));
pub const PIO_SM3_EXECCTRL_EXEC_STALLED_ACCESS = "RO";
pub const PIO_SM3_EXECCTRL_SIDE_EN_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM3_EXECCTRL_SIDE_EN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const PIO_SM3_EXECCTRL_SIDE_EN_MSB = _u(@as(c_int, 30));
pub const PIO_SM3_EXECCTRL_SIDE_EN_LSB = _u(@as(c_int, 30));
pub const PIO_SM3_EXECCTRL_SIDE_EN_ACCESS = "RW";
pub const PIO_SM3_EXECCTRL_SIDE_PINDIR_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM3_EXECCTRL_SIDE_PINDIR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const PIO_SM3_EXECCTRL_SIDE_PINDIR_MSB = _u(@as(c_int, 29));
pub const PIO_SM3_EXECCTRL_SIDE_PINDIR_LSB = _u(@as(c_int, 29));
pub const PIO_SM3_EXECCTRL_SIDE_PINDIR_ACCESS = "RW";
pub const PIO_SM3_EXECCTRL_JMP_PIN_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM3_EXECCTRL_JMP_PIN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1f000000, .hexadecimal));
pub const PIO_SM3_EXECCTRL_JMP_PIN_MSB = _u(@as(c_int, 28));
pub const PIO_SM3_EXECCTRL_JMP_PIN_LSB = _u(@as(c_int, 24));
pub const PIO_SM3_EXECCTRL_JMP_PIN_ACCESS = "RW";
pub const PIO_SM3_EXECCTRL_OUT_EN_SEL_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM3_EXECCTRL_OUT_EN_SEL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f80000, .hexadecimal));
pub const PIO_SM3_EXECCTRL_OUT_EN_SEL_MSB = _u(@as(c_int, 23));
pub const PIO_SM3_EXECCTRL_OUT_EN_SEL_LSB = _u(@as(c_int, 19));
pub const PIO_SM3_EXECCTRL_OUT_EN_SEL_ACCESS = "RW";
pub const PIO_SM3_EXECCTRL_INLINE_OUT_EN_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM3_EXECCTRL_INLINE_OUT_EN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const PIO_SM3_EXECCTRL_INLINE_OUT_EN_MSB = _u(@as(c_int, 18));
pub const PIO_SM3_EXECCTRL_INLINE_OUT_EN_LSB = _u(@as(c_int, 18));
pub const PIO_SM3_EXECCTRL_INLINE_OUT_EN_ACCESS = "RW";
pub const PIO_SM3_EXECCTRL_OUT_STICKY_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM3_EXECCTRL_OUT_STICKY_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const PIO_SM3_EXECCTRL_OUT_STICKY_MSB = _u(@as(c_int, 17));
pub const PIO_SM3_EXECCTRL_OUT_STICKY_LSB = _u(@as(c_int, 17));
pub const PIO_SM3_EXECCTRL_OUT_STICKY_ACCESS = "RW";
pub const PIO_SM3_EXECCTRL_WRAP_TOP_RESET = _u(@as(c_int, 0x1f));
pub const PIO_SM3_EXECCTRL_WRAP_TOP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001f000, .hexadecimal));
pub const PIO_SM3_EXECCTRL_WRAP_TOP_MSB = _u(@as(c_int, 16));
pub const PIO_SM3_EXECCTRL_WRAP_TOP_LSB = _u(@as(c_int, 12));
pub const PIO_SM3_EXECCTRL_WRAP_TOP_ACCESS = "RW";
pub const PIO_SM3_EXECCTRL_WRAP_BOTTOM_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM3_EXECCTRL_WRAP_BOTTOM_BITS = _u(@as(c_int, 0x00000f80));
pub const PIO_SM3_EXECCTRL_WRAP_BOTTOM_MSB = _u(@as(c_int, 11));
pub const PIO_SM3_EXECCTRL_WRAP_BOTTOM_LSB = _u(@as(c_int, 7));
pub const PIO_SM3_EXECCTRL_WRAP_BOTTOM_ACCESS = "RW";
pub const PIO_SM3_EXECCTRL_STATUS_SEL_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM3_EXECCTRL_STATUS_SEL_BITS = _u(@as(c_int, 0x00000010));
pub const PIO_SM3_EXECCTRL_STATUS_SEL_MSB = _u(@as(c_int, 4));
pub const PIO_SM3_EXECCTRL_STATUS_SEL_LSB = _u(@as(c_int, 4));
pub const PIO_SM3_EXECCTRL_STATUS_SEL_ACCESS = "RW";
pub const PIO_SM3_EXECCTRL_STATUS_SEL_VALUE_TXLEVEL = _u(@as(c_int, 0x0));
pub const PIO_SM3_EXECCTRL_STATUS_SEL_VALUE_RXLEVEL = _u(@as(c_int, 0x1));
pub const PIO_SM3_EXECCTRL_STATUS_N_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM3_EXECCTRL_STATUS_N_BITS = _u(@as(c_int, 0x0000000f));
pub const PIO_SM3_EXECCTRL_STATUS_N_MSB = _u(@as(c_int, 3));
pub const PIO_SM3_EXECCTRL_STATUS_N_LSB = _u(@as(c_int, 0));
pub const PIO_SM3_EXECCTRL_STATUS_N_ACCESS = "RW";
pub const PIO_SM3_SHIFTCTRL_OFFSET = _u(@as(c_int, 0x00000118));
pub const PIO_SM3_SHIFTCTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff0000, .hexadecimal));
pub const PIO_SM3_SHIFTCTRL_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000c0000, .hexadecimal));
pub const PIO_SM3_SHIFTCTRL_FJOIN_RX_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM3_SHIFTCTRL_FJOIN_RX_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const PIO_SM3_SHIFTCTRL_FJOIN_RX_MSB = _u(@as(c_int, 31));
pub const PIO_SM3_SHIFTCTRL_FJOIN_RX_LSB = _u(@as(c_int, 31));
pub const PIO_SM3_SHIFTCTRL_FJOIN_RX_ACCESS = "RW";
pub const PIO_SM3_SHIFTCTRL_FJOIN_TX_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM3_SHIFTCTRL_FJOIN_TX_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const PIO_SM3_SHIFTCTRL_FJOIN_TX_MSB = _u(@as(c_int, 30));
pub const PIO_SM3_SHIFTCTRL_FJOIN_TX_LSB = _u(@as(c_int, 30));
pub const PIO_SM3_SHIFTCTRL_FJOIN_TX_ACCESS = "RW";
pub const PIO_SM3_SHIFTCTRL_PULL_THRESH_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM3_SHIFTCTRL_PULL_THRESH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3e000000, .hexadecimal));
pub const PIO_SM3_SHIFTCTRL_PULL_THRESH_MSB = _u(@as(c_int, 29));
pub const PIO_SM3_SHIFTCTRL_PULL_THRESH_LSB = _u(@as(c_int, 25));
pub const PIO_SM3_SHIFTCTRL_PULL_THRESH_ACCESS = "RW";
pub const PIO_SM3_SHIFTCTRL_PUSH_THRESH_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM3_SHIFTCTRL_PUSH_THRESH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01f00000, .hexadecimal));
pub const PIO_SM3_SHIFTCTRL_PUSH_THRESH_MSB = _u(@as(c_int, 24));
pub const PIO_SM3_SHIFTCTRL_PUSH_THRESH_LSB = _u(@as(c_int, 20));
pub const PIO_SM3_SHIFTCTRL_PUSH_THRESH_ACCESS = "RW";
pub const PIO_SM3_SHIFTCTRL_OUT_SHIFTDIR_RESET = _u(@as(c_int, 0x1));
pub const PIO_SM3_SHIFTCTRL_OUT_SHIFTDIR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const PIO_SM3_SHIFTCTRL_OUT_SHIFTDIR_MSB = _u(@as(c_int, 19));
pub const PIO_SM3_SHIFTCTRL_OUT_SHIFTDIR_LSB = _u(@as(c_int, 19));
pub const PIO_SM3_SHIFTCTRL_OUT_SHIFTDIR_ACCESS = "RW";
pub const PIO_SM3_SHIFTCTRL_IN_SHIFTDIR_RESET = _u(@as(c_int, 0x1));
pub const PIO_SM3_SHIFTCTRL_IN_SHIFTDIR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const PIO_SM3_SHIFTCTRL_IN_SHIFTDIR_MSB = _u(@as(c_int, 18));
pub const PIO_SM3_SHIFTCTRL_IN_SHIFTDIR_LSB = _u(@as(c_int, 18));
pub const PIO_SM3_SHIFTCTRL_IN_SHIFTDIR_ACCESS = "RW";
pub const PIO_SM3_SHIFTCTRL_AUTOPULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM3_SHIFTCTRL_AUTOPULL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const PIO_SM3_SHIFTCTRL_AUTOPULL_MSB = _u(@as(c_int, 17));
pub const PIO_SM3_SHIFTCTRL_AUTOPULL_LSB = _u(@as(c_int, 17));
pub const PIO_SM3_SHIFTCTRL_AUTOPULL_ACCESS = "RW";
pub const PIO_SM3_SHIFTCTRL_AUTOPUSH_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM3_SHIFTCTRL_AUTOPUSH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const PIO_SM3_SHIFTCTRL_AUTOPUSH_MSB = _u(@as(c_int, 16));
pub const PIO_SM3_SHIFTCTRL_AUTOPUSH_LSB = _u(@as(c_int, 16));
pub const PIO_SM3_SHIFTCTRL_AUTOPUSH_ACCESS = "RW";
pub const PIO_SM3_ADDR_OFFSET = _u(@as(c_int, 0x0000011c));
pub const PIO_SM3_ADDR_BITS = _u(@as(c_int, 0x0000001f));
pub const PIO_SM3_ADDR_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_SM3_ADDR_MSB = _u(@as(c_int, 4));
pub const PIO_SM3_ADDR_LSB = _u(@as(c_int, 0));
pub const PIO_SM3_ADDR_ACCESS = "RO";
pub const PIO_SM3_INSTR_OFFSET = _u(@as(c_int, 0x00000120));
pub const PIO_SM3_INSTR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hexadecimal));
pub const PIO_SM3_INSTR_RESET = "-";
pub const PIO_SM3_INSTR_MSB = _u(@as(c_int, 15));
pub const PIO_SM3_INSTR_LSB = _u(@as(c_int, 0));
pub const PIO_SM3_INSTR_ACCESS = "RW";
pub const PIO_SM3_PINCTRL_OFFSET = _u(@as(c_int, 0x00000124));
pub const PIO_SM3_PINCTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const PIO_SM3_PINCTRL_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x14000000, .hexadecimal));
pub const PIO_SM3_PINCTRL_SIDESET_COUNT_RESET = _u(@as(c_int, 0x0));
pub const PIO_SM3_PINCTRL_SIDESET_COUNT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe0000000, .hexadecimal));
pub const PIO_SM3_PINCTRL_SIDESET_COUNT_MSB = _u(@as(c_int, 31));
pub const PIO_SM3_PINCTRL_SIDESET_COUNT_LSB = _u(@as(c_int, 29));
pub const PIO_SM3_PINCTRL_SIDESET_COUNT_ACCESS = "RW";
pub const PIO_SM3_PINCTRL_SET_COUNT_RESET = _u(@as(c_int, 0x5));
pub const PIO_SM3_PINCTRL_SET_COUNT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1c000000, .hexadecimal));
pub const PIO_SM3_PINCTRL_SET_COUNT_MSB = _u(@as(c_int, 28));
pub const PIO_SM3_PINCTRL_SET_COUNT_LSB = _u(@as(c_int, 26));
pub const PIO_SM3_PINCTRL_SET_COUNT_ACCESS = "RW";
pub const PIO_SM3_PINCTRL_OUT_COUNT_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM3_PINCTRL_OUT_COUNT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x03f00000, .hexadecimal));
pub const PIO_SM3_PINCTRL_OUT_COUNT_MSB = _u(@as(c_int, 25));
pub const PIO_SM3_PINCTRL_OUT_COUNT_LSB = _u(@as(c_int, 20));
pub const PIO_SM3_PINCTRL_OUT_COUNT_ACCESS = "RW";
pub const PIO_SM3_PINCTRL_IN_BASE_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM3_PINCTRL_IN_BASE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f8000, .hexadecimal));
pub const PIO_SM3_PINCTRL_IN_BASE_MSB = _u(@as(c_int, 19));
pub const PIO_SM3_PINCTRL_IN_BASE_LSB = _u(@as(c_int, 15));
pub const PIO_SM3_PINCTRL_IN_BASE_ACCESS = "RW";
pub const PIO_SM3_PINCTRL_SIDESET_BASE_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM3_PINCTRL_SIDESET_BASE_BITS = _u(@as(c_int, 0x00007c00));
pub const PIO_SM3_PINCTRL_SIDESET_BASE_MSB = _u(@as(c_int, 14));
pub const PIO_SM3_PINCTRL_SIDESET_BASE_LSB = _u(@as(c_int, 10));
pub const PIO_SM3_PINCTRL_SIDESET_BASE_ACCESS = "RW";
pub const PIO_SM3_PINCTRL_SET_BASE_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM3_PINCTRL_SET_BASE_BITS = _u(@as(c_int, 0x000003e0));
pub const PIO_SM3_PINCTRL_SET_BASE_MSB = _u(@as(c_int, 9));
pub const PIO_SM3_PINCTRL_SET_BASE_LSB = _u(@as(c_int, 5));
pub const PIO_SM3_PINCTRL_SET_BASE_ACCESS = "RW";
pub const PIO_SM3_PINCTRL_OUT_BASE_RESET = _u(@as(c_int, 0x00));
pub const PIO_SM3_PINCTRL_OUT_BASE_BITS = _u(@as(c_int, 0x0000001f));
pub const PIO_SM3_PINCTRL_OUT_BASE_MSB = _u(@as(c_int, 4));
pub const PIO_SM3_PINCTRL_OUT_BASE_LSB = _u(@as(c_int, 0));
pub const PIO_SM3_PINCTRL_OUT_BASE_ACCESS = "RW";
pub const PIO_INTR_OFFSET = _u(@as(c_int, 0x00000128));
pub const PIO_INTR_BITS = _u(@as(c_int, 0x00000fff));
pub const PIO_INTR_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_INTR_SM3_RESET = _u(@as(c_int, 0x0));
pub const PIO_INTR_SM3_BITS = _u(@as(c_int, 0x00000800));
pub const PIO_INTR_SM3_MSB = _u(@as(c_int, 11));
pub const PIO_INTR_SM3_LSB = _u(@as(c_int, 11));
pub const PIO_INTR_SM3_ACCESS = "RO";
pub const PIO_INTR_SM2_RESET = _u(@as(c_int, 0x0));
pub const PIO_INTR_SM2_BITS = _u(@as(c_int, 0x00000400));
pub const PIO_INTR_SM2_MSB = _u(@as(c_int, 10));
pub const PIO_INTR_SM2_LSB = _u(@as(c_int, 10));
pub const PIO_INTR_SM2_ACCESS = "RO";
pub const PIO_INTR_SM1_RESET = _u(@as(c_int, 0x0));
pub const PIO_INTR_SM1_BITS = _u(@as(c_int, 0x00000200));
pub const PIO_INTR_SM1_MSB = _u(@as(c_int, 9));
pub const PIO_INTR_SM1_LSB = _u(@as(c_int, 9));
pub const PIO_INTR_SM1_ACCESS = "RO";
pub const PIO_INTR_SM0_RESET = _u(@as(c_int, 0x0));
pub const PIO_INTR_SM0_BITS = _u(@as(c_int, 0x00000100));
pub const PIO_INTR_SM0_MSB = _u(@as(c_int, 8));
pub const PIO_INTR_SM0_LSB = _u(@as(c_int, 8));
pub const PIO_INTR_SM0_ACCESS = "RO";
pub const PIO_INTR_SM3_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_INTR_SM3_TXNFULL_BITS = _u(@as(c_int, 0x00000080));
pub const PIO_INTR_SM3_TXNFULL_MSB = _u(@as(c_int, 7));
pub const PIO_INTR_SM3_TXNFULL_LSB = _u(@as(c_int, 7));
pub const PIO_INTR_SM3_TXNFULL_ACCESS = "RO";
pub const PIO_INTR_SM2_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_INTR_SM2_TXNFULL_BITS = _u(@as(c_int, 0x00000040));
pub const PIO_INTR_SM2_TXNFULL_MSB = _u(@as(c_int, 6));
pub const PIO_INTR_SM2_TXNFULL_LSB = _u(@as(c_int, 6));
pub const PIO_INTR_SM2_TXNFULL_ACCESS = "RO";
pub const PIO_INTR_SM1_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_INTR_SM1_TXNFULL_BITS = _u(@as(c_int, 0x00000020));
pub const PIO_INTR_SM1_TXNFULL_MSB = _u(@as(c_int, 5));
pub const PIO_INTR_SM1_TXNFULL_LSB = _u(@as(c_int, 5));
pub const PIO_INTR_SM1_TXNFULL_ACCESS = "RO";
pub const PIO_INTR_SM0_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_INTR_SM0_TXNFULL_BITS = _u(@as(c_int, 0x00000010));
pub const PIO_INTR_SM0_TXNFULL_MSB = _u(@as(c_int, 4));
pub const PIO_INTR_SM0_TXNFULL_LSB = _u(@as(c_int, 4));
pub const PIO_INTR_SM0_TXNFULL_ACCESS = "RO";
pub const PIO_INTR_SM3_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_INTR_SM3_RXNEMPTY_BITS = _u(@as(c_int, 0x00000008));
pub const PIO_INTR_SM3_RXNEMPTY_MSB = _u(@as(c_int, 3));
pub const PIO_INTR_SM3_RXNEMPTY_LSB = _u(@as(c_int, 3));
pub const PIO_INTR_SM3_RXNEMPTY_ACCESS = "RO";
pub const PIO_INTR_SM2_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_INTR_SM2_RXNEMPTY_BITS = _u(@as(c_int, 0x00000004));
pub const PIO_INTR_SM2_RXNEMPTY_MSB = _u(@as(c_int, 2));
pub const PIO_INTR_SM2_RXNEMPTY_LSB = _u(@as(c_int, 2));
pub const PIO_INTR_SM2_RXNEMPTY_ACCESS = "RO";
pub const PIO_INTR_SM1_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_INTR_SM1_RXNEMPTY_BITS = _u(@as(c_int, 0x00000002));
pub const PIO_INTR_SM1_RXNEMPTY_MSB = _u(@as(c_int, 1));
pub const PIO_INTR_SM1_RXNEMPTY_LSB = _u(@as(c_int, 1));
pub const PIO_INTR_SM1_RXNEMPTY_ACCESS = "RO";
pub const PIO_INTR_SM0_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_INTR_SM0_RXNEMPTY_BITS = _u(@as(c_int, 0x00000001));
pub const PIO_INTR_SM0_RXNEMPTY_MSB = _u(@as(c_int, 0));
pub const PIO_INTR_SM0_RXNEMPTY_LSB = _u(@as(c_int, 0));
pub const PIO_INTR_SM0_RXNEMPTY_ACCESS = "RO";
pub const PIO_IRQ0_INTE_OFFSET = _u(@as(c_int, 0x0000012c));
pub const PIO_IRQ0_INTE_BITS = _u(@as(c_int, 0x00000fff));
pub const PIO_IRQ0_INTE_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_IRQ0_INTE_SM3_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTE_SM3_BITS = _u(@as(c_int, 0x00000800));
pub const PIO_IRQ0_INTE_SM3_MSB = _u(@as(c_int, 11));
pub const PIO_IRQ0_INTE_SM3_LSB = _u(@as(c_int, 11));
pub const PIO_IRQ0_INTE_SM3_ACCESS = "RW";
pub const PIO_IRQ0_INTE_SM2_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTE_SM2_BITS = _u(@as(c_int, 0x00000400));
pub const PIO_IRQ0_INTE_SM2_MSB = _u(@as(c_int, 10));
pub const PIO_IRQ0_INTE_SM2_LSB = _u(@as(c_int, 10));
pub const PIO_IRQ0_INTE_SM2_ACCESS = "RW";
pub const PIO_IRQ0_INTE_SM1_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTE_SM1_BITS = _u(@as(c_int, 0x00000200));
pub const PIO_IRQ0_INTE_SM1_MSB = _u(@as(c_int, 9));
pub const PIO_IRQ0_INTE_SM1_LSB = _u(@as(c_int, 9));
pub const PIO_IRQ0_INTE_SM1_ACCESS = "RW";
pub const PIO_IRQ0_INTE_SM0_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTE_SM0_BITS = _u(@as(c_int, 0x00000100));
pub const PIO_IRQ0_INTE_SM0_MSB = _u(@as(c_int, 8));
pub const PIO_IRQ0_INTE_SM0_LSB = _u(@as(c_int, 8));
pub const PIO_IRQ0_INTE_SM0_ACCESS = "RW";
pub const PIO_IRQ0_INTE_SM3_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTE_SM3_TXNFULL_BITS = _u(@as(c_int, 0x00000080));
pub const PIO_IRQ0_INTE_SM3_TXNFULL_MSB = _u(@as(c_int, 7));
pub const PIO_IRQ0_INTE_SM3_TXNFULL_LSB = _u(@as(c_int, 7));
pub const PIO_IRQ0_INTE_SM3_TXNFULL_ACCESS = "RW";
pub const PIO_IRQ0_INTE_SM2_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTE_SM2_TXNFULL_BITS = _u(@as(c_int, 0x00000040));
pub const PIO_IRQ0_INTE_SM2_TXNFULL_MSB = _u(@as(c_int, 6));
pub const PIO_IRQ0_INTE_SM2_TXNFULL_LSB = _u(@as(c_int, 6));
pub const PIO_IRQ0_INTE_SM2_TXNFULL_ACCESS = "RW";
pub const PIO_IRQ0_INTE_SM1_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTE_SM1_TXNFULL_BITS = _u(@as(c_int, 0x00000020));
pub const PIO_IRQ0_INTE_SM1_TXNFULL_MSB = _u(@as(c_int, 5));
pub const PIO_IRQ0_INTE_SM1_TXNFULL_LSB = _u(@as(c_int, 5));
pub const PIO_IRQ0_INTE_SM1_TXNFULL_ACCESS = "RW";
pub const PIO_IRQ0_INTE_SM0_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTE_SM0_TXNFULL_BITS = _u(@as(c_int, 0x00000010));
pub const PIO_IRQ0_INTE_SM0_TXNFULL_MSB = _u(@as(c_int, 4));
pub const PIO_IRQ0_INTE_SM0_TXNFULL_LSB = _u(@as(c_int, 4));
pub const PIO_IRQ0_INTE_SM0_TXNFULL_ACCESS = "RW";
pub const PIO_IRQ0_INTE_SM3_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTE_SM3_RXNEMPTY_BITS = _u(@as(c_int, 0x00000008));
pub const PIO_IRQ0_INTE_SM3_RXNEMPTY_MSB = _u(@as(c_int, 3));
pub const PIO_IRQ0_INTE_SM3_RXNEMPTY_LSB = _u(@as(c_int, 3));
pub const PIO_IRQ0_INTE_SM3_RXNEMPTY_ACCESS = "RW";
pub const PIO_IRQ0_INTE_SM2_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTE_SM2_RXNEMPTY_BITS = _u(@as(c_int, 0x00000004));
pub const PIO_IRQ0_INTE_SM2_RXNEMPTY_MSB = _u(@as(c_int, 2));
pub const PIO_IRQ0_INTE_SM2_RXNEMPTY_LSB = _u(@as(c_int, 2));
pub const PIO_IRQ0_INTE_SM2_RXNEMPTY_ACCESS = "RW";
pub const PIO_IRQ0_INTE_SM1_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTE_SM1_RXNEMPTY_BITS = _u(@as(c_int, 0x00000002));
pub const PIO_IRQ0_INTE_SM1_RXNEMPTY_MSB = _u(@as(c_int, 1));
pub const PIO_IRQ0_INTE_SM1_RXNEMPTY_LSB = _u(@as(c_int, 1));
pub const PIO_IRQ0_INTE_SM1_RXNEMPTY_ACCESS = "RW";
pub const PIO_IRQ0_INTE_SM0_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTE_SM0_RXNEMPTY_BITS = _u(@as(c_int, 0x00000001));
pub const PIO_IRQ0_INTE_SM0_RXNEMPTY_MSB = _u(@as(c_int, 0));
pub const PIO_IRQ0_INTE_SM0_RXNEMPTY_LSB = _u(@as(c_int, 0));
pub const PIO_IRQ0_INTE_SM0_RXNEMPTY_ACCESS = "RW";
pub const PIO_IRQ0_INTF_OFFSET = _u(@as(c_int, 0x00000130));
pub const PIO_IRQ0_INTF_BITS = _u(@as(c_int, 0x00000fff));
pub const PIO_IRQ0_INTF_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_IRQ0_INTF_SM3_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTF_SM3_BITS = _u(@as(c_int, 0x00000800));
pub const PIO_IRQ0_INTF_SM3_MSB = _u(@as(c_int, 11));
pub const PIO_IRQ0_INTF_SM3_LSB = _u(@as(c_int, 11));
pub const PIO_IRQ0_INTF_SM3_ACCESS = "RW";
pub const PIO_IRQ0_INTF_SM2_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTF_SM2_BITS = _u(@as(c_int, 0x00000400));
pub const PIO_IRQ0_INTF_SM2_MSB = _u(@as(c_int, 10));
pub const PIO_IRQ0_INTF_SM2_LSB = _u(@as(c_int, 10));
pub const PIO_IRQ0_INTF_SM2_ACCESS = "RW";
pub const PIO_IRQ0_INTF_SM1_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTF_SM1_BITS = _u(@as(c_int, 0x00000200));
pub const PIO_IRQ0_INTF_SM1_MSB = _u(@as(c_int, 9));
pub const PIO_IRQ0_INTF_SM1_LSB = _u(@as(c_int, 9));
pub const PIO_IRQ0_INTF_SM1_ACCESS = "RW";
pub const PIO_IRQ0_INTF_SM0_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTF_SM0_BITS = _u(@as(c_int, 0x00000100));
pub const PIO_IRQ0_INTF_SM0_MSB = _u(@as(c_int, 8));
pub const PIO_IRQ0_INTF_SM0_LSB = _u(@as(c_int, 8));
pub const PIO_IRQ0_INTF_SM0_ACCESS = "RW";
pub const PIO_IRQ0_INTF_SM3_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTF_SM3_TXNFULL_BITS = _u(@as(c_int, 0x00000080));
pub const PIO_IRQ0_INTF_SM3_TXNFULL_MSB = _u(@as(c_int, 7));
pub const PIO_IRQ0_INTF_SM3_TXNFULL_LSB = _u(@as(c_int, 7));
pub const PIO_IRQ0_INTF_SM3_TXNFULL_ACCESS = "RW";
pub const PIO_IRQ0_INTF_SM2_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTF_SM2_TXNFULL_BITS = _u(@as(c_int, 0x00000040));
pub const PIO_IRQ0_INTF_SM2_TXNFULL_MSB = _u(@as(c_int, 6));
pub const PIO_IRQ0_INTF_SM2_TXNFULL_LSB = _u(@as(c_int, 6));
pub const PIO_IRQ0_INTF_SM2_TXNFULL_ACCESS = "RW";
pub const PIO_IRQ0_INTF_SM1_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTF_SM1_TXNFULL_BITS = _u(@as(c_int, 0x00000020));
pub const PIO_IRQ0_INTF_SM1_TXNFULL_MSB = _u(@as(c_int, 5));
pub const PIO_IRQ0_INTF_SM1_TXNFULL_LSB = _u(@as(c_int, 5));
pub const PIO_IRQ0_INTF_SM1_TXNFULL_ACCESS = "RW";
pub const PIO_IRQ0_INTF_SM0_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTF_SM0_TXNFULL_BITS = _u(@as(c_int, 0x00000010));
pub const PIO_IRQ0_INTF_SM0_TXNFULL_MSB = _u(@as(c_int, 4));
pub const PIO_IRQ0_INTF_SM0_TXNFULL_LSB = _u(@as(c_int, 4));
pub const PIO_IRQ0_INTF_SM0_TXNFULL_ACCESS = "RW";
pub const PIO_IRQ0_INTF_SM3_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTF_SM3_RXNEMPTY_BITS = _u(@as(c_int, 0x00000008));
pub const PIO_IRQ0_INTF_SM3_RXNEMPTY_MSB = _u(@as(c_int, 3));
pub const PIO_IRQ0_INTF_SM3_RXNEMPTY_LSB = _u(@as(c_int, 3));
pub const PIO_IRQ0_INTF_SM3_RXNEMPTY_ACCESS = "RW";
pub const PIO_IRQ0_INTF_SM2_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTF_SM2_RXNEMPTY_BITS = _u(@as(c_int, 0x00000004));
pub const PIO_IRQ0_INTF_SM2_RXNEMPTY_MSB = _u(@as(c_int, 2));
pub const PIO_IRQ0_INTF_SM2_RXNEMPTY_LSB = _u(@as(c_int, 2));
pub const PIO_IRQ0_INTF_SM2_RXNEMPTY_ACCESS = "RW";
pub const PIO_IRQ0_INTF_SM1_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTF_SM1_RXNEMPTY_BITS = _u(@as(c_int, 0x00000002));
pub const PIO_IRQ0_INTF_SM1_RXNEMPTY_MSB = _u(@as(c_int, 1));
pub const PIO_IRQ0_INTF_SM1_RXNEMPTY_LSB = _u(@as(c_int, 1));
pub const PIO_IRQ0_INTF_SM1_RXNEMPTY_ACCESS = "RW";
pub const PIO_IRQ0_INTF_SM0_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTF_SM0_RXNEMPTY_BITS = _u(@as(c_int, 0x00000001));
pub const PIO_IRQ0_INTF_SM0_RXNEMPTY_MSB = _u(@as(c_int, 0));
pub const PIO_IRQ0_INTF_SM0_RXNEMPTY_LSB = _u(@as(c_int, 0));
pub const PIO_IRQ0_INTF_SM0_RXNEMPTY_ACCESS = "RW";
pub const PIO_IRQ0_INTS_OFFSET = _u(@as(c_int, 0x00000134));
pub const PIO_IRQ0_INTS_BITS = _u(@as(c_int, 0x00000fff));
pub const PIO_IRQ0_INTS_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_IRQ0_INTS_SM3_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTS_SM3_BITS = _u(@as(c_int, 0x00000800));
pub const PIO_IRQ0_INTS_SM3_MSB = _u(@as(c_int, 11));
pub const PIO_IRQ0_INTS_SM3_LSB = _u(@as(c_int, 11));
pub const PIO_IRQ0_INTS_SM3_ACCESS = "RO";
pub const PIO_IRQ0_INTS_SM2_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTS_SM2_BITS = _u(@as(c_int, 0x00000400));
pub const PIO_IRQ0_INTS_SM2_MSB = _u(@as(c_int, 10));
pub const PIO_IRQ0_INTS_SM2_LSB = _u(@as(c_int, 10));
pub const PIO_IRQ0_INTS_SM2_ACCESS = "RO";
pub const PIO_IRQ0_INTS_SM1_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTS_SM1_BITS = _u(@as(c_int, 0x00000200));
pub const PIO_IRQ0_INTS_SM1_MSB = _u(@as(c_int, 9));
pub const PIO_IRQ0_INTS_SM1_LSB = _u(@as(c_int, 9));
pub const PIO_IRQ0_INTS_SM1_ACCESS = "RO";
pub const PIO_IRQ0_INTS_SM0_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTS_SM0_BITS = _u(@as(c_int, 0x00000100));
pub const PIO_IRQ0_INTS_SM0_MSB = _u(@as(c_int, 8));
pub const PIO_IRQ0_INTS_SM0_LSB = _u(@as(c_int, 8));
pub const PIO_IRQ0_INTS_SM0_ACCESS = "RO";
pub const PIO_IRQ0_INTS_SM3_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTS_SM3_TXNFULL_BITS = _u(@as(c_int, 0x00000080));
pub const PIO_IRQ0_INTS_SM3_TXNFULL_MSB = _u(@as(c_int, 7));
pub const PIO_IRQ0_INTS_SM3_TXNFULL_LSB = _u(@as(c_int, 7));
pub const PIO_IRQ0_INTS_SM3_TXNFULL_ACCESS = "RO";
pub const PIO_IRQ0_INTS_SM2_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTS_SM2_TXNFULL_BITS = _u(@as(c_int, 0x00000040));
pub const PIO_IRQ0_INTS_SM2_TXNFULL_MSB = _u(@as(c_int, 6));
pub const PIO_IRQ0_INTS_SM2_TXNFULL_LSB = _u(@as(c_int, 6));
pub const PIO_IRQ0_INTS_SM2_TXNFULL_ACCESS = "RO";
pub const PIO_IRQ0_INTS_SM1_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTS_SM1_TXNFULL_BITS = _u(@as(c_int, 0x00000020));
pub const PIO_IRQ0_INTS_SM1_TXNFULL_MSB = _u(@as(c_int, 5));
pub const PIO_IRQ0_INTS_SM1_TXNFULL_LSB = _u(@as(c_int, 5));
pub const PIO_IRQ0_INTS_SM1_TXNFULL_ACCESS = "RO";
pub const PIO_IRQ0_INTS_SM0_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTS_SM0_TXNFULL_BITS = _u(@as(c_int, 0x00000010));
pub const PIO_IRQ0_INTS_SM0_TXNFULL_MSB = _u(@as(c_int, 4));
pub const PIO_IRQ0_INTS_SM0_TXNFULL_LSB = _u(@as(c_int, 4));
pub const PIO_IRQ0_INTS_SM0_TXNFULL_ACCESS = "RO";
pub const PIO_IRQ0_INTS_SM3_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTS_SM3_RXNEMPTY_BITS = _u(@as(c_int, 0x00000008));
pub const PIO_IRQ0_INTS_SM3_RXNEMPTY_MSB = _u(@as(c_int, 3));
pub const PIO_IRQ0_INTS_SM3_RXNEMPTY_LSB = _u(@as(c_int, 3));
pub const PIO_IRQ0_INTS_SM3_RXNEMPTY_ACCESS = "RO";
pub const PIO_IRQ0_INTS_SM2_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTS_SM2_RXNEMPTY_BITS = _u(@as(c_int, 0x00000004));
pub const PIO_IRQ0_INTS_SM2_RXNEMPTY_MSB = _u(@as(c_int, 2));
pub const PIO_IRQ0_INTS_SM2_RXNEMPTY_LSB = _u(@as(c_int, 2));
pub const PIO_IRQ0_INTS_SM2_RXNEMPTY_ACCESS = "RO";
pub const PIO_IRQ0_INTS_SM1_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTS_SM1_RXNEMPTY_BITS = _u(@as(c_int, 0x00000002));
pub const PIO_IRQ0_INTS_SM1_RXNEMPTY_MSB = _u(@as(c_int, 1));
pub const PIO_IRQ0_INTS_SM1_RXNEMPTY_LSB = _u(@as(c_int, 1));
pub const PIO_IRQ0_INTS_SM1_RXNEMPTY_ACCESS = "RO";
pub const PIO_IRQ0_INTS_SM0_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ0_INTS_SM0_RXNEMPTY_BITS = _u(@as(c_int, 0x00000001));
pub const PIO_IRQ0_INTS_SM0_RXNEMPTY_MSB = _u(@as(c_int, 0));
pub const PIO_IRQ0_INTS_SM0_RXNEMPTY_LSB = _u(@as(c_int, 0));
pub const PIO_IRQ0_INTS_SM0_RXNEMPTY_ACCESS = "RO";
pub const PIO_IRQ1_INTE_OFFSET = _u(@as(c_int, 0x00000138));
pub const PIO_IRQ1_INTE_BITS = _u(@as(c_int, 0x00000fff));
pub const PIO_IRQ1_INTE_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_IRQ1_INTE_SM3_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTE_SM3_BITS = _u(@as(c_int, 0x00000800));
pub const PIO_IRQ1_INTE_SM3_MSB = _u(@as(c_int, 11));
pub const PIO_IRQ1_INTE_SM3_LSB = _u(@as(c_int, 11));
pub const PIO_IRQ1_INTE_SM3_ACCESS = "RW";
pub const PIO_IRQ1_INTE_SM2_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTE_SM2_BITS = _u(@as(c_int, 0x00000400));
pub const PIO_IRQ1_INTE_SM2_MSB = _u(@as(c_int, 10));
pub const PIO_IRQ1_INTE_SM2_LSB = _u(@as(c_int, 10));
pub const PIO_IRQ1_INTE_SM2_ACCESS = "RW";
pub const PIO_IRQ1_INTE_SM1_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTE_SM1_BITS = _u(@as(c_int, 0x00000200));
pub const PIO_IRQ1_INTE_SM1_MSB = _u(@as(c_int, 9));
pub const PIO_IRQ1_INTE_SM1_LSB = _u(@as(c_int, 9));
pub const PIO_IRQ1_INTE_SM1_ACCESS = "RW";
pub const PIO_IRQ1_INTE_SM0_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTE_SM0_BITS = _u(@as(c_int, 0x00000100));
pub const PIO_IRQ1_INTE_SM0_MSB = _u(@as(c_int, 8));
pub const PIO_IRQ1_INTE_SM0_LSB = _u(@as(c_int, 8));
pub const PIO_IRQ1_INTE_SM0_ACCESS = "RW";
pub const PIO_IRQ1_INTE_SM3_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTE_SM3_TXNFULL_BITS = _u(@as(c_int, 0x00000080));
pub const PIO_IRQ1_INTE_SM3_TXNFULL_MSB = _u(@as(c_int, 7));
pub const PIO_IRQ1_INTE_SM3_TXNFULL_LSB = _u(@as(c_int, 7));
pub const PIO_IRQ1_INTE_SM3_TXNFULL_ACCESS = "RW";
pub const PIO_IRQ1_INTE_SM2_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTE_SM2_TXNFULL_BITS = _u(@as(c_int, 0x00000040));
pub const PIO_IRQ1_INTE_SM2_TXNFULL_MSB = _u(@as(c_int, 6));
pub const PIO_IRQ1_INTE_SM2_TXNFULL_LSB = _u(@as(c_int, 6));
pub const PIO_IRQ1_INTE_SM2_TXNFULL_ACCESS = "RW";
pub const PIO_IRQ1_INTE_SM1_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTE_SM1_TXNFULL_BITS = _u(@as(c_int, 0x00000020));
pub const PIO_IRQ1_INTE_SM1_TXNFULL_MSB = _u(@as(c_int, 5));
pub const PIO_IRQ1_INTE_SM1_TXNFULL_LSB = _u(@as(c_int, 5));
pub const PIO_IRQ1_INTE_SM1_TXNFULL_ACCESS = "RW";
pub const PIO_IRQ1_INTE_SM0_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTE_SM0_TXNFULL_BITS = _u(@as(c_int, 0x00000010));
pub const PIO_IRQ1_INTE_SM0_TXNFULL_MSB = _u(@as(c_int, 4));
pub const PIO_IRQ1_INTE_SM0_TXNFULL_LSB = _u(@as(c_int, 4));
pub const PIO_IRQ1_INTE_SM0_TXNFULL_ACCESS = "RW";
pub const PIO_IRQ1_INTE_SM3_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTE_SM3_RXNEMPTY_BITS = _u(@as(c_int, 0x00000008));
pub const PIO_IRQ1_INTE_SM3_RXNEMPTY_MSB = _u(@as(c_int, 3));
pub const PIO_IRQ1_INTE_SM3_RXNEMPTY_LSB = _u(@as(c_int, 3));
pub const PIO_IRQ1_INTE_SM3_RXNEMPTY_ACCESS = "RW";
pub const PIO_IRQ1_INTE_SM2_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTE_SM2_RXNEMPTY_BITS = _u(@as(c_int, 0x00000004));
pub const PIO_IRQ1_INTE_SM2_RXNEMPTY_MSB = _u(@as(c_int, 2));
pub const PIO_IRQ1_INTE_SM2_RXNEMPTY_LSB = _u(@as(c_int, 2));
pub const PIO_IRQ1_INTE_SM2_RXNEMPTY_ACCESS = "RW";
pub const PIO_IRQ1_INTE_SM1_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTE_SM1_RXNEMPTY_BITS = _u(@as(c_int, 0x00000002));
pub const PIO_IRQ1_INTE_SM1_RXNEMPTY_MSB = _u(@as(c_int, 1));
pub const PIO_IRQ1_INTE_SM1_RXNEMPTY_LSB = _u(@as(c_int, 1));
pub const PIO_IRQ1_INTE_SM1_RXNEMPTY_ACCESS = "RW";
pub const PIO_IRQ1_INTE_SM0_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTE_SM0_RXNEMPTY_BITS = _u(@as(c_int, 0x00000001));
pub const PIO_IRQ1_INTE_SM0_RXNEMPTY_MSB = _u(@as(c_int, 0));
pub const PIO_IRQ1_INTE_SM0_RXNEMPTY_LSB = _u(@as(c_int, 0));
pub const PIO_IRQ1_INTE_SM0_RXNEMPTY_ACCESS = "RW";
pub const PIO_IRQ1_INTF_OFFSET = _u(@as(c_int, 0x0000013c));
pub const PIO_IRQ1_INTF_BITS = _u(@as(c_int, 0x00000fff));
pub const PIO_IRQ1_INTF_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_IRQ1_INTF_SM3_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTF_SM3_BITS = _u(@as(c_int, 0x00000800));
pub const PIO_IRQ1_INTF_SM3_MSB = _u(@as(c_int, 11));
pub const PIO_IRQ1_INTF_SM3_LSB = _u(@as(c_int, 11));
pub const PIO_IRQ1_INTF_SM3_ACCESS = "RW";
pub const PIO_IRQ1_INTF_SM2_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTF_SM2_BITS = _u(@as(c_int, 0x00000400));
pub const PIO_IRQ1_INTF_SM2_MSB = _u(@as(c_int, 10));
pub const PIO_IRQ1_INTF_SM2_LSB = _u(@as(c_int, 10));
pub const PIO_IRQ1_INTF_SM2_ACCESS = "RW";
pub const PIO_IRQ1_INTF_SM1_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTF_SM1_BITS = _u(@as(c_int, 0x00000200));
pub const PIO_IRQ1_INTF_SM1_MSB = _u(@as(c_int, 9));
pub const PIO_IRQ1_INTF_SM1_LSB = _u(@as(c_int, 9));
pub const PIO_IRQ1_INTF_SM1_ACCESS = "RW";
pub const PIO_IRQ1_INTF_SM0_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTF_SM0_BITS = _u(@as(c_int, 0x00000100));
pub const PIO_IRQ1_INTF_SM0_MSB = _u(@as(c_int, 8));
pub const PIO_IRQ1_INTF_SM0_LSB = _u(@as(c_int, 8));
pub const PIO_IRQ1_INTF_SM0_ACCESS = "RW";
pub const PIO_IRQ1_INTF_SM3_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTF_SM3_TXNFULL_BITS = _u(@as(c_int, 0x00000080));
pub const PIO_IRQ1_INTF_SM3_TXNFULL_MSB = _u(@as(c_int, 7));
pub const PIO_IRQ1_INTF_SM3_TXNFULL_LSB = _u(@as(c_int, 7));
pub const PIO_IRQ1_INTF_SM3_TXNFULL_ACCESS = "RW";
pub const PIO_IRQ1_INTF_SM2_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTF_SM2_TXNFULL_BITS = _u(@as(c_int, 0x00000040));
pub const PIO_IRQ1_INTF_SM2_TXNFULL_MSB = _u(@as(c_int, 6));
pub const PIO_IRQ1_INTF_SM2_TXNFULL_LSB = _u(@as(c_int, 6));
pub const PIO_IRQ1_INTF_SM2_TXNFULL_ACCESS = "RW";
pub const PIO_IRQ1_INTF_SM1_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTF_SM1_TXNFULL_BITS = _u(@as(c_int, 0x00000020));
pub const PIO_IRQ1_INTF_SM1_TXNFULL_MSB = _u(@as(c_int, 5));
pub const PIO_IRQ1_INTF_SM1_TXNFULL_LSB = _u(@as(c_int, 5));
pub const PIO_IRQ1_INTF_SM1_TXNFULL_ACCESS = "RW";
pub const PIO_IRQ1_INTF_SM0_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTF_SM0_TXNFULL_BITS = _u(@as(c_int, 0x00000010));
pub const PIO_IRQ1_INTF_SM0_TXNFULL_MSB = _u(@as(c_int, 4));
pub const PIO_IRQ1_INTF_SM0_TXNFULL_LSB = _u(@as(c_int, 4));
pub const PIO_IRQ1_INTF_SM0_TXNFULL_ACCESS = "RW";
pub const PIO_IRQ1_INTF_SM3_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTF_SM3_RXNEMPTY_BITS = _u(@as(c_int, 0x00000008));
pub const PIO_IRQ1_INTF_SM3_RXNEMPTY_MSB = _u(@as(c_int, 3));
pub const PIO_IRQ1_INTF_SM3_RXNEMPTY_LSB = _u(@as(c_int, 3));
pub const PIO_IRQ1_INTF_SM3_RXNEMPTY_ACCESS = "RW";
pub const PIO_IRQ1_INTF_SM2_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTF_SM2_RXNEMPTY_BITS = _u(@as(c_int, 0x00000004));
pub const PIO_IRQ1_INTF_SM2_RXNEMPTY_MSB = _u(@as(c_int, 2));
pub const PIO_IRQ1_INTF_SM2_RXNEMPTY_LSB = _u(@as(c_int, 2));
pub const PIO_IRQ1_INTF_SM2_RXNEMPTY_ACCESS = "RW";
pub const PIO_IRQ1_INTF_SM1_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTF_SM1_RXNEMPTY_BITS = _u(@as(c_int, 0x00000002));
pub const PIO_IRQ1_INTF_SM1_RXNEMPTY_MSB = _u(@as(c_int, 1));
pub const PIO_IRQ1_INTF_SM1_RXNEMPTY_LSB = _u(@as(c_int, 1));
pub const PIO_IRQ1_INTF_SM1_RXNEMPTY_ACCESS = "RW";
pub const PIO_IRQ1_INTF_SM0_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTF_SM0_RXNEMPTY_BITS = _u(@as(c_int, 0x00000001));
pub const PIO_IRQ1_INTF_SM0_RXNEMPTY_MSB = _u(@as(c_int, 0));
pub const PIO_IRQ1_INTF_SM0_RXNEMPTY_LSB = _u(@as(c_int, 0));
pub const PIO_IRQ1_INTF_SM0_RXNEMPTY_ACCESS = "RW";
pub const PIO_IRQ1_INTS_OFFSET = _u(@as(c_int, 0x00000140));
pub const PIO_IRQ1_INTS_BITS = _u(@as(c_int, 0x00000fff));
pub const PIO_IRQ1_INTS_RESET = _u(@as(c_int, 0x00000000));
pub const PIO_IRQ1_INTS_SM3_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTS_SM3_BITS = _u(@as(c_int, 0x00000800));
pub const PIO_IRQ1_INTS_SM3_MSB = _u(@as(c_int, 11));
pub const PIO_IRQ1_INTS_SM3_LSB = _u(@as(c_int, 11));
pub const PIO_IRQ1_INTS_SM3_ACCESS = "RO";
pub const PIO_IRQ1_INTS_SM2_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTS_SM2_BITS = _u(@as(c_int, 0x00000400));
pub const PIO_IRQ1_INTS_SM2_MSB = _u(@as(c_int, 10));
pub const PIO_IRQ1_INTS_SM2_LSB = _u(@as(c_int, 10));
pub const PIO_IRQ1_INTS_SM2_ACCESS = "RO";
pub const PIO_IRQ1_INTS_SM1_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTS_SM1_BITS = _u(@as(c_int, 0x00000200));
pub const PIO_IRQ1_INTS_SM1_MSB = _u(@as(c_int, 9));
pub const PIO_IRQ1_INTS_SM1_LSB = _u(@as(c_int, 9));
pub const PIO_IRQ1_INTS_SM1_ACCESS = "RO";
pub const PIO_IRQ1_INTS_SM0_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTS_SM0_BITS = _u(@as(c_int, 0x00000100));
pub const PIO_IRQ1_INTS_SM0_MSB = _u(@as(c_int, 8));
pub const PIO_IRQ1_INTS_SM0_LSB = _u(@as(c_int, 8));
pub const PIO_IRQ1_INTS_SM0_ACCESS = "RO";
pub const PIO_IRQ1_INTS_SM3_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTS_SM3_TXNFULL_BITS = _u(@as(c_int, 0x00000080));
pub const PIO_IRQ1_INTS_SM3_TXNFULL_MSB = _u(@as(c_int, 7));
pub const PIO_IRQ1_INTS_SM3_TXNFULL_LSB = _u(@as(c_int, 7));
pub const PIO_IRQ1_INTS_SM3_TXNFULL_ACCESS = "RO";
pub const PIO_IRQ1_INTS_SM2_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTS_SM2_TXNFULL_BITS = _u(@as(c_int, 0x00000040));
pub const PIO_IRQ1_INTS_SM2_TXNFULL_MSB = _u(@as(c_int, 6));
pub const PIO_IRQ1_INTS_SM2_TXNFULL_LSB = _u(@as(c_int, 6));
pub const PIO_IRQ1_INTS_SM2_TXNFULL_ACCESS = "RO";
pub const PIO_IRQ1_INTS_SM1_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTS_SM1_TXNFULL_BITS = _u(@as(c_int, 0x00000020));
pub const PIO_IRQ1_INTS_SM1_TXNFULL_MSB = _u(@as(c_int, 5));
pub const PIO_IRQ1_INTS_SM1_TXNFULL_LSB = _u(@as(c_int, 5));
pub const PIO_IRQ1_INTS_SM1_TXNFULL_ACCESS = "RO";
pub const PIO_IRQ1_INTS_SM0_TXNFULL_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTS_SM0_TXNFULL_BITS = _u(@as(c_int, 0x00000010));
pub const PIO_IRQ1_INTS_SM0_TXNFULL_MSB = _u(@as(c_int, 4));
pub const PIO_IRQ1_INTS_SM0_TXNFULL_LSB = _u(@as(c_int, 4));
pub const PIO_IRQ1_INTS_SM0_TXNFULL_ACCESS = "RO";
pub const PIO_IRQ1_INTS_SM3_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTS_SM3_RXNEMPTY_BITS = _u(@as(c_int, 0x00000008));
pub const PIO_IRQ1_INTS_SM3_RXNEMPTY_MSB = _u(@as(c_int, 3));
pub const PIO_IRQ1_INTS_SM3_RXNEMPTY_LSB = _u(@as(c_int, 3));
pub const PIO_IRQ1_INTS_SM3_RXNEMPTY_ACCESS = "RO";
pub const PIO_IRQ1_INTS_SM2_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTS_SM2_RXNEMPTY_BITS = _u(@as(c_int, 0x00000004));
pub const PIO_IRQ1_INTS_SM2_RXNEMPTY_MSB = _u(@as(c_int, 2));
pub const PIO_IRQ1_INTS_SM2_RXNEMPTY_LSB = _u(@as(c_int, 2));
pub const PIO_IRQ1_INTS_SM2_RXNEMPTY_ACCESS = "RO";
pub const PIO_IRQ1_INTS_SM1_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTS_SM1_RXNEMPTY_BITS = _u(@as(c_int, 0x00000002));
pub const PIO_IRQ1_INTS_SM1_RXNEMPTY_MSB = _u(@as(c_int, 1));
pub const PIO_IRQ1_INTS_SM1_RXNEMPTY_LSB = _u(@as(c_int, 1));
pub const PIO_IRQ1_INTS_SM1_RXNEMPTY_ACCESS = "RO";
pub const PIO_IRQ1_INTS_SM0_RXNEMPTY_RESET = _u(@as(c_int, 0x0));
pub const PIO_IRQ1_INTS_SM0_RXNEMPTY_BITS = _u(@as(c_int, 0x00000001));
pub const PIO_IRQ1_INTS_SM0_RXNEMPTY_MSB = _u(@as(c_int, 0));
pub const PIO_IRQ1_INTS_SM0_RXNEMPTY_LSB = _u(@as(c_int, 0));
pub const PIO_IRQ1_INTS_SM0_RXNEMPTY_ACCESS = "RO";
pub const pio0_hw = @import("std").zig.c_translation.cast([*c]pio_hw_t, PIO0_BASE);
pub const pio1_hw = @import("std").zig.c_translation.cast([*c]pio_hw_t, PIO1_BASE);
pub const _HARDWARE_PIO_INSTRUCTIONS_H = "";
pub const PARAM_ASSERTIONS_ENABLED_PIO_INSTRUCTIONS = @as(c_int, 0);
pub const _PIO_INVALID_IN_SRC = @as(c_uint, 0x08);
pub const _PIO_INVALID_OUT_DEST = @as(c_uint, 0x10);
pub const _PIO_INVALID_SET_DEST = @as(c_uint, 0x20);
pub const _PIO_INVALID_MOV_SRC = @as(c_uint, 0x40);
pub const _PIO_INVALID_MOV_DEST = @as(c_uint, 0x80);
pub const PARAM_ASSERTIONS_ENABLED_PIO = @as(c_int, 0);
pub const pio0 = pio0_hw;
pub const pio1 = pio1_hw;
pub const ws2812_wrap_target = @as(c_int, 0);
pub const ws2812_wrap = @as(c_int, 3);
pub const ws2812_T1 = @as(c_int, 2);
pub const ws2812_T2 = @as(c_int, 5);
pub const ws2812_T3 = @as(c_int, 3);
pub const _HARDWARE_CLOCKS_H = "";
pub const _HARDWARE_STRUCTS_CLOCKS_H = "";
pub const HARDWARE_REGS_CLOCKS_DEFINED = "";
pub const CLOCKS_CLK_GPOUT0_CTRL_OFFSET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_CLK_GPOUT0_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00131de0, .hexadecimal));
pub const CLOCKS_CLK_GPOUT0_CTRL_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_CLK_GPOUT0_CTRL_NUDGE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT0_CTRL_NUDGE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const CLOCKS_CLK_GPOUT0_CTRL_NUDGE_MSB = _u(@as(c_int, 20));
pub const CLOCKS_CLK_GPOUT0_CTRL_NUDGE_LSB = _u(@as(c_int, 20));
pub const CLOCKS_CLK_GPOUT0_CTRL_NUDGE_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT0_CTRL_PHASE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT0_CTRL_PHASE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const CLOCKS_CLK_GPOUT0_CTRL_PHASE_MSB = _u(@as(c_int, 17));
pub const CLOCKS_CLK_GPOUT0_CTRL_PHASE_LSB = _u(@as(c_int, 16));
pub const CLOCKS_CLK_GPOUT0_CTRL_PHASE_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT0_CTRL_DC50_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT0_CTRL_DC50_BITS = _u(@as(c_int, 0x00001000));
pub const CLOCKS_CLK_GPOUT0_CTRL_DC50_MSB = _u(@as(c_int, 12));
pub const CLOCKS_CLK_GPOUT0_CTRL_DC50_LSB = _u(@as(c_int, 12));
pub const CLOCKS_CLK_GPOUT0_CTRL_DC50_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT0_CTRL_ENABLE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS = _u(@as(c_int, 0x00000800));
pub const CLOCKS_CLK_GPOUT0_CTRL_ENABLE_MSB = _u(@as(c_int, 11));
pub const CLOCKS_CLK_GPOUT0_CTRL_ENABLE_LSB = _u(@as(c_int, 11));
pub const CLOCKS_CLK_GPOUT0_CTRL_ENABLE_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT0_CTRL_KILL_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT0_CTRL_KILL_BITS = _u(@as(c_int, 0x00000400));
pub const CLOCKS_CLK_GPOUT0_CTRL_KILL_MSB = _u(@as(c_int, 10));
pub const CLOCKS_CLK_GPOUT0_CTRL_KILL_LSB = _u(@as(c_int, 10));
pub const CLOCKS_CLK_GPOUT0_CTRL_KILL_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT0_CTRL_AUXSRC_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT0_CTRL_AUXSRC_BITS = _u(@as(c_int, 0x000001e0));
pub const CLOCKS_CLK_GPOUT0_CTRL_AUXSRC_MSB = _u(@as(c_int, 8));
pub const CLOCKS_CLK_GPOUT0_CTRL_AUXSRC_LSB = _u(@as(c_int, 5));
pub const CLOCKS_CLK_GPOUT0_CTRL_AUXSRC_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT0_CTRL_AUXSRC_VALUE_CLKSRC_PLL_SYS = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT0_CTRL_AUXSRC_VALUE_CLKSRC_GPIN0 = _u(@as(c_int, 0x1));
pub const CLOCKS_CLK_GPOUT0_CTRL_AUXSRC_VALUE_CLKSRC_GPIN1 = _u(@as(c_int, 0x2));
pub const CLOCKS_CLK_GPOUT0_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB = _u(@as(c_int, 0x3));
pub const CLOCKS_CLK_GPOUT0_CTRL_AUXSRC_VALUE_ROSC_CLKSRC = _u(@as(c_int, 0x4));
pub const CLOCKS_CLK_GPOUT0_CTRL_AUXSRC_VALUE_XOSC_CLKSRC = _u(@as(c_int, 0x5));
pub const CLOCKS_CLK_GPOUT0_CTRL_AUXSRC_VALUE_CLK_SYS = _u(@as(c_int, 0x6));
pub const CLOCKS_CLK_GPOUT0_CTRL_AUXSRC_VALUE_CLK_USB = _u(@as(c_int, 0x7));
pub const CLOCKS_CLK_GPOUT0_CTRL_AUXSRC_VALUE_CLK_ADC = _u(@as(c_int, 0x8));
pub const CLOCKS_CLK_GPOUT0_CTRL_AUXSRC_VALUE_CLK_RTC = _u(@as(c_int, 0x9));
pub const CLOCKS_CLK_GPOUT0_CTRL_AUXSRC_VALUE_CLK_REF = _u(@as(c_int, 0xa));
pub const CLOCKS_CLK_GPOUT0_DIV_OFFSET = _u(@as(c_int, 0x00000004));
pub const CLOCKS_CLK_GPOUT0_DIV_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_CLK_GPOUT0_DIV_RESET = _u(@as(c_int, 0x00000100));
pub const CLOCKS_CLK_GPOUT0_DIV_INT_RESET = _u(@as(c_int, 0x000001));
pub const CLOCKS_CLK_GPOUT0_DIV_INT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff00, .hexadecimal));
pub const CLOCKS_CLK_GPOUT0_DIV_INT_MSB = _u(@as(c_int, 31));
pub const CLOCKS_CLK_GPOUT0_DIV_INT_LSB = _u(@as(c_int, 8));
pub const CLOCKS_CLK_GPOUT0_DIV_INT_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT0_DIV_FRAC_RESET = _u(@as(c_int, 0x00));
pub const CLOCKS_CLK_GPOUT0_DIV_FRAC_BITS = _u(@as(c_int, 0x000000ff));
pub const CLOCKS_CLK_GPOUT0_DIV_FRAC_MSB = _u(@as(c_int, 7));
pub const CLOCKS_CLK_GPOUT0_DIV_FRAC_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_GPOUT0_DIV_FRAC_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT0_SELECTED_OFFSET = _u(@as(c_int, 0x00000008));
pub const CLOCKS_CLK_GPOUT0_SELECTED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_CLK_GPOUT0_SELECTED_RESET = _u(@as(c_int, 0x00000001));
pub const CLOCKS_CLK_GPOUT0_SELECTED_MSB = _u(@as(c_int, 31));
pub const CLOCKS_CLK_GPOUT0_SELECTED_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_GPOUT0_SELECTED_ACCESS = "RO";
pub const CLOCKS_CLK_GPOUT1_CTRL_OFFSET = _u(@as(c_int, 0x0000000c));
pub const CLOCKS_CLK_GPOUT1_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00131de0, .hexadecimal));
pub const CLOCKS_CLK_GPOUT1_CTRL_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_CLK_GPOUT1_CTRL_NUDGE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT1_CTRL_NUDGE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const CLOCKS_CLK_GPOUT1_CTRL_NUDGE_MSB = _u(@as(c_int, 20));
pub const CLOCKS_CLK_GPOUT1_CTRL_NUDGE_LSB = _u(@as(c_int, 20));
pub const CLOCKS_CLK_GPOUT1_CTRL_NUDGE_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT1_CTRL_PHASE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT1_CTRL_PHASE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const CLOCKS_CLK_GPOUT1_CTRL_PHASE_MSB = _u(@as(c_int, 17));
pub const CLOCKS_CLK_GPOUT1_CTRL_PHASE_LSB = _u(@as(c_int, 16));
pub const CLOCKS_CLK_GPOUT1_CTRL_PHASE_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT1_CTRL_DC50_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT1_CTRL_DC50_BITS = _u(@as(c_int, 0x00001000));
pub const CLOCKS_CLK_GPOUT1_CTRL_DC50_MSB = _u(@as(c_int, 12));
pub const CLOCKS_CLK_GPOUT1_CTRL_DC50_LSB = _u(@as(c_int, 12));
pub const CLOCKS_CLK_GPOUT1_CTRL_DC50_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT1_CTRL_ENABLE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT1_CTRL_ENABLE_BITS = _u(@as(c_int, 0x00000800));
pub const CLOCKS_CLK_GPOUT1_CTRL_ENABLE_MSB = _u(@as(c_int, 11));
pub const CLOCKS_CLK_GPOUT1_CTRL_ENABLE_LSB = _u(@as(c_int, 11));
pub const CLOCKS_CLK_GPOUT1_CTRL_ENABLE_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT1_CTRL_KILL_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT1_CTRL_KILL_BITS = _u(@as(c_int, 0x00000400));
pub const CLOCKS_CLK_GPOUT1_CTRL_KILL_MSB = _u(@as(c_int, 10));
pub const CLOCKS_CLK_GPOUT1_CTRL_KILL_LSB = _u(@as(c_int, 10));
pub const CLOCKS_CLK_GPOUT1_CTRL_KILL_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT1_CTRL_AUXSRC_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT1_CTRL_AUXSRC_BITS = _u(@as(c_int, 0x000001e0));
pub const CLOCKS_CLK_GPOUT1_CTRL_AUXSRC_MSB = _u(@as(c_int, 8));
pub const CLOCKS_CLK_GPOUT1_CTRL_AUXSRC_LSB = _u(@as(c_int, 5));
pub const CLOCKS_CLK_GPOUT1_CTRL_AUXSRC_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT1_CTRL_AUXSRC_VALUE_CLKSRC_PLL_SYS = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT1_CTRL_AUXSRC_VALUE_CLKSRC_GPIN0 = _u(@as(c_int, 0x1));
pub const CLOCKS_CLK_GPOUT1_CTRL_AUXSRC_VALUE_CLKSRC_GPIN1 = _u(@as(c_int, 0x2));
pub const CLOCKS_CLK_GPOUT1_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB = _u(@as(c_int, 0x3));
pub const CLOCKS_CLK_GPOUT1_CTRL_AUXSRC_VALUE_ROSC_CLKSRC = _u(@as(c_int, 0x4));
pub const CLOCKS_CLK_GPOUT1_CTRL_AUXSRC_VALUE_XOSC_CLKSRC = _u(@as(c_int, 0x5));
pub const CLOCKS_CLK_GPOUT1_CTRL_AUXSRC_VALUE_CLK_SYS = _u(@as(c_int, 0x6));
pub const CLOCKS_CLK_GPOUT1_CTRL_AUXSRC_VALUE_CLK_USB = _u(@as(c_int, 0x7));
pub const CLOCKS_CLK_GPOUT1_CTRL_AUXSRC_VALUE_CLK_ADC = _u(@as(c_int, 0x8));
pub const CLOCKS_CLK_GPOUT1_CTRL_AUXSRC_VALUE_CLK_RTC = _u(@as(c_int, 0x9));
pub const CLOCKS_CLK_GPOUT1_CTRL_AUXSRC_VALUE_CLK_REF = _u(@as(c_int, 0xa));
pub const CLOCKS_CLK_GPOUT1_DIV_OFFSET = _u(@as(c_int, 0x00000010));
pub const CLOCKS_CLK_GPOUT1_DIV_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_CLK_GPOUT1_DIV_RESET = _u(@as(c_int, 0x00000100));
pub const CLOCKS_CLK_GPOUT1_DIV_INT_RESET = _u(@as(c_int, 0x000001));
pub const CLOCKS_CLK_GPOUT1_DIV_INT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff00, .hexadecimal));
pub const CLOCKS_CLK_GPOUT1_DIV_INT_MSB = _u(@as(c_int, 31));
pub const CLOCKS_CLK_GPOUT1_DIV_INT_LSB = _u(@as(c_int, 8));
pub const CLOCKS_CLK_GPOUT1_DIV_INT_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT1_DIV_FRAC_RESET = _u(@as(c_int, 0x00));
pub const CLOCKS_CLK_GPOUT1_DIV_FRAC_BITS = _u(@as(c_int, 0x000000ff));
pub const CLOCKS_CLK_GPOUT1_DIV_FRAC_MSB = _u(@as(c_int, 7));
pub const CLOCKS_CLK_GPOUT1_DIV_FRAC_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_GPOUT1_DIV_FRAC_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT1_SELECTED_OFFSET = _u(@as(c_int, 0x00000014));
pub const CLOCKS_CLK_GPOUT1_SELECTED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_CLK_GPOUT1_SELECTED_RESET = _u(@as(c_int, 0x00000001));
pub const CLOCKS_CLK_GPOUT1_SELECTED_MSB = _u(@as(c_int, 31));
pub const CLOCKS_CLK_GPOUT1_SELECTED_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_GPOUT1_SELECTED_ACCESS = "RO";
pub const CLOCKS_CLK_GPOUT2_CTRL_OFFSET = _u(@as(c_int, 0x00000018));
pub const CLOCKS_CLK_GPOUT2_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00131de0, .hexadecimal));
pub const CLOCKS_CLK_GPOUT2_CTRL_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_CLK_GPOUT2_CTRL_NUDGE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT2_CTRL_NUDGE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const CLOCKS_CLK_GPOUT2_CTRL_NUDGE_MSB = _u(@as(c_int, 20));
pub const CLOCKS_CLK_GPOUT2_CTRL_NUDGE_LSB = _u(@as(c_int, 20));
pub const CLOCKS_CLK_GPOUT2_CTRL_NUDGE_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT2_CTRL_PHASE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT2_CTRL_PHASE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const CLOCKS_CLK_GPOUT2_CTRL_PHASE_MSB = _u(@as(c_int, 17));
pub const CLOCKS_CLK_GPOUT2_CTRL_PHASE_LSB = _u(@as(c_int, 16));
pub const CLOCKS_CLK_GPOUT2_CTRL_PHASE_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT2_CTRL_DC50_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT2_CTRL_DC50_BITS = _u(@as(c_int, 0x00001000));
pub const CLOCKS_CLK_GPOUT2_CTRL_DC50_MSB = _u(@as(c_int, 12));
pub const CLOCKS_CLK_GPOUT2_CTRL_DC50_LSB = _u(@as(c_int, 12));
pub const CLOCKS_CLK_GPOUT2_CTRL_DC50_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT2_CTRL_ENABLE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT2_CTRL_ENABLE_BITS = _u(@as(c_int, 0x00000800));
pub const CLOCKS_CLK_GPOUT2_CTRL_ENABLE_MSB = _u(@as(c_int, 11));
pub const CLOCKS_CLK_GPOUT2_CTRL_ENABLE_LSB = _u(@as(c_int, 11));
pub const CLOCKS_CLK_GPOUT2_CTRL_ENABLE_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT2_CTRL_KILL_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT2_CTRL_KILL_BITS = _u(@as(c_int, 0x00000400));
pub const CLOCKS_CLK_GPOUT2_CTRL_KILL_MSB = _u(@as(c_int, 10));
pub const CLOCKS_CLK_GPOUT2_CTRL_KILL_LSB = _u(@as(c_int, 10));
pub const CLOCKS_CLK_GPOUT2_CTRL_KILL_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT2_CTRL_AUXSRC_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT2_CTRL_AUXSRC_BITS = _u(@as(c_int, 0x000001e0));
pub const CLOCKS_CLK_GPOUT2_CTRL_AUXSRC_MSB = _u(@as(c_int, 8));
pub const CLOCKS_CLK_GPOUT2_CTRL_AUXSRC_LSB = _u(@as(c_int, 5));
pub const CLOCKS_CLK_GPOUT2_CTRL_AUXSRC_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT2_CTRL_AUXSRC_VALUE_CLKSRC_PLL_SYS = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT2_CTRL_AUXSRC_VALUE_CLKSRC_GPIN0 = _u(@as(c_int, 0x1));
pub const CLOCKS_CLK_GPOUT2_CTRL_AUXSRC_VALUE_CLKSRC_GPIN1 = _u(@as(c_int, 0x2));
pub const CLOCKS_CLK_GPOUT2_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB = _u(@as(c_int, 0x3));
pub const CLOCKS_CLK_GPOUT2_CTRL_AUXSRC_VALUE_ROSC_CLKSRC_PH = _u(@as(c_int, 0x4));
pub const CLOCKS_CLK_GPOUT2_CTRL_AUXSRC_VALUE_XOSC_CLKSRC = _u(@as(c_int, 0x5));
pub const CLOCKS_CLK_GPOUT2_CTRL_AUXSRC_VALUE_CLK_SYS = _u(@as(c_int, 0x6));
pub const CLOCKS_CLK_GPOUT2_CTRL_AUXSRC_VALUE_CLK_USB = _u(@as(c_int, 0x7));
pub const CLOCKS_CLK_GPOUT2_CTRL_AUXSRC_VALUE_CLK_ADC = _u(@as(c_int, 0x8));
pub const CLOCKS_CLK_GPOUT2_CTRL_AUXSRC_VALUE_CLK_RTC = _u(@as(c_int, 0x9));
pub const CLOCKS_CLK_GPOUT2_CTRL_AUXSRC_VALUE_CLK_REF = _u(@as(c_int, 0xa));
pub const CLOCKS_CLK_GPOUT2_DIV_OFFSET = _u(@as(c_int, 0x0000001c));
pub const CLOCKS_CLK_GPOUT2_DIV_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_CLK_GPOUT2_DIV_RESET = _u(@as(c_int, 0x00000100));
pub const CLOCKS_CLK_GPOUT2_DIV_INT_RESET = _u(@as(c_int, 0x000001));
pub const CLOCKS_CLK_GPOUT2_DIV_INT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff00, .hexadecimal));
pub const CLOCKS_CLK_GPOUT2_DIV_INT_MSB = _u(@as(c_int, 31));
pub const CLOCKS_CLK_GPOUT2_DIV_INT_LSB = _u(@as(c_int, 8));
pub const CLOCKS_CLK_GPOUT2_DIV_INT_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT2_DIV_FRAC_RESET = _u(@as(c_int, 0x00));
pub const CLOCKS_CLK_GPOUT2_DIV_FRAC_BITS = _u(@as(c_int, 0x000000ff));
pub const CLOCKS_CLK_GPOUT2_DIV_FRAC_MSB = _u(@as(c_int, 7));
pub const CLOCKS_CLK_GPOUT2_DIV_FRAC_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_GPOUT2_DIV_FRAC_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT2_SELECTED_OFFSET = _u(@as(c_int, 0x00000020));
pub const CLOCKS_CLK_GPOUT2_SELECTED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_CLK_GPOUT2_SELECTED_RESET = _u(@as(c_int, 0x00000001));
pub const CLOCKS_CLK_GPOUT2_SELECTED_MSB = _u(@as(c_int, 31));
pub const CLOCKS_CLK_GPOUT2_SELECTED_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_GPOUT2_SELECTED_ACCESS = "RO";
pub const CLOCKS_CLK_GPOUT3_CTRL_OFFSET = _u(@as(c_int, 0x00000024));
pub const CLOCKS_CLK_GPOUT3_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00131de0, .hexadecimal));
pub const CLOCKS_CLK_GPOUT3_CTRL_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_CLK_GPOUT3_CTRL_NUDGE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT3_CTRL_NUDGE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const CLOCKS_CLK_GPOUT3_CTRL_NUDGE_MSB = _u(@as(c_int, 20));
pub const CLOCKS_CLK_GPOUT3_CTRL_NUDGE_LSB = _u(@as(c_int, 20));
pub const CLOCKS_CLK_GPOUT3_CTRL_NUDGE_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT3_CTRL_PHASE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT3_CTRL_PHASE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const CLOCKS_CLK_GPOUT3_CTRL_PHASE_MSB = _u(@as(c_int, 17));
pub const CLOCKS_CLK_GPOUT3_CTRL_PHASE_LSB = _u(@as(c_int, 16));
pub const CLOCKS_CLK_GPOUT3_CTRL_PHASE_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT3_CTRL_DC50_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT3_CTRL_DC50_BITS = _u(@as(c_int, 0x00001000));
pub const CLOCKS_CLK_GPOUT3_CTRL_DC50_MSB = _u(@as(c_int, 12));
pub const CLOCKS_CLK_GPOUT3_CTRL_DC50_LSB = _u(@as(c_int, 12));
pub const CLOCKS_CLK_GPOUT3_CTRL_DC50_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT3_CTRL_ENABLE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT3_CTRL_ENABLE_BITS = _u(@as(c_int, 0x00000800));
pub const CLOCKS_CLK_GPOUT3_CTRL_ENABLE_MSB = _u(@as(c_int, 11));
pub const CLOCKS_CLK_GPOUT3_CTRL_ENABLE_LSB = _u(@as(c_int, 11));
pub const CLOCKS_CLK_GPOUT3_CTRL_ENABLE_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT3_CTRL_KILL_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT3_CTRL_KILL_BITS = _u(@as(c_int, 0x00000400));
pub const CLOCKS_CLK_GPOUT3_CTRL_KILL_MSB = _u(@as(c_int, 10));
pub const CLOCKS_CLK_GPOUT3_CTRL_KILL_LSB = _u(@as(c_int, 10));
pub const CLOCKS_CLK_GPOUT3_CTRL_KILL_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT3_CTRL_AUXSRC_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT3_CTRL_AUXSRC_BITS = _u(@as(c_int, 0x000001e0));
pub const CLOCKS_CLK_GPOUT3_CTRL_AUXSRC_MSB = _u(@as(c_int, 8));
pub const CLOCKS_CLK_GPOUT3_CTRL_AUXSRC_LSB = _u(@as(c_int, 5));
pub const CLOCKS_CLK_GPOUT3_CTRL_AUXSRC_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT3_CTRL_AUXSRC_VALUE_CLKSRC_PLL_SYS = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_GPOUT3_CTRL_AUXSRC_VALUE_CLKSRC_GPIN0 = _u(@as(c_int, 0x1));
pub const CLOCKS_CLK_GPOUT3_CTRL_AUXSRC_VALUE_CLKSRC_GPIN1 = _u(@as(c_int, 0x2));
pub const CLOCKS_CLK_GPOUT3_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB = _u(@as(c_int, 0x3));
pub const CLOCKS_CLK_GPOUT3_CTRL_AUXSRC_VALUE_ROSC_CLKSRC_PH = _u(@as(c_int, 0x4));
pub const CLOCKS_CLK_GPOUT3_CTRL_AUXSRC_VALUE_XOSC_CLKSRC = _u(@as(c_int, 0x5));
pub const CLOCKS_CLK_GPOUT3_CTRL_AUXSRC_VALUE_CLK_SYS = _u(@as(c_int, 0x6));
pub const CLOCKS_CLK_GPOUT3_CTRL_AUXSRC_VALUE_CLK_USB = _u(@as(c_int, 0x7));
pub const CLOCKS_CLK_GPOUT3_CTRL_AUXSRC_VALUE_CLK_ADC = _u(@as(c_int, 0x8));
pub const CLOCKS_CLK_GPOUT3_CTRL_AUXSRC_VALUE_CLK_RTC = _u(@as(c_int, 0x9));
pub const CLOCKS_CLK_GPOUT3_CTRL_AUXSRC_VALUE_CLK_REF = _u(@as(c_int, 0xa));
pub const CLOCKS_CLK_GPOUT3_DIV_OFFSET = _u(@as(c_int, 0x00000028));
pub const CLOCKS_CLK_GPOUT3_DIV_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_CLK_GPOUT3_DIV_RESET = _u(@as(c_int, 0x00000100));
pub const CLOCKS_CLK_GPOUT3_DIV_INT_RESET = _u(@as(c_int, 0x000001));
pub const CLOCKS_CLK_GPOUT3_DIV_INT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff00, .hexadecimal));
pub const CLOCKS_CLK_GPOUT3_DIV_INT_MSB = _u(@as(c_int, 31));
pub const CLOCKS_CLK_GPOUT3_DIV_INT_LSB = _u(@as(c_int, 8));
pub const CLOCKS_CLK_GPOUT3_DIV_INT_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT3_DIV_FRAC_RESET = _u(@as(c_int, 0x00));
pub const CLOCKS_CLK_GPOUT3_DIV_FRAC_BITS = _u(@as(c_int, 0x000000ff));
pub const CLOCKS_CLK_GPOUT3_DIV_FRAC_MSB = _u(@as(c_int, 7));
pub const CLOCKS_CLK_GPOUT3_DIV_FRAC_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_GPOUT3_DIV_FRAC_ACCESS = "RW";
pub const CLOCKS_CLK_GPOUT3_SELECTED_OFFSET = _u(@as(c_int, 0x0000002c));
pub const CLOCKS_CLK_GPOUT3_SELECTED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_CLK_GPOUT3_SELECTED_RESET = _u(@as(c_int, 0x00000001));
pub const CLOCKS_CLK_GPOUT3_SELECTED_MSB = _u(@as(c_int, 31));
pub const CLOCKS_CLK_GPOUT3_SELECTED_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_GPOUT3_SELECTED_ACCESS = "RO";
pub const CLOCKS_CLK_REF_CTRL_OFFSET = _u(@as(c_int, 0x00000030));
pub const CLOCKS_CLK_REF_CTRL_BITS = _u(@as(c_int, 0x00000063));
pub const CLOCKS_CLK_REF_CTRL_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_CLK_REF_CTRL_AUXSRC_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_REF_CTRL_AUXSRC_BITS = _u(@as(c_int, 0x00000060));
pub const CLOCKS_CLK_REF_CTRL_AUXSRC_MSB = _u(@as(c_int, 6));
pub const CLOCKS_CLK_REF_CTRL_AUXSRC_LSB = _u(@as(c_int, 5));
pub const CLOCKS_CLK_REF_CTRL_AUXSRC_ACCESS = "RW";
pub const CLOCKS_CLK_REF_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_REF_CTRL_AUXSRC_VALUE_CLKSRC_GPIN0 = _u(@as(c_int, 0x1));
pub const CLOCKS_CLK_REF_CTRL_AUXSRC_VALUE_CLKSRC_GPIN1 = _u(@as(c_int, 0x2));
pub const CLOCKS_CLK_REF_CTRL_SRC_RESET = "-";
pub const CLOCKS_CLK_REF_CTRL_SRC_BITS = _u(@as(c_int, 0x00000003));
pub const CLOCKS_CLK_REF_CTRL_SRC_MSB = _u(@as(c_int, 1));
pub const CLOCKS_CLK_REF_CTRL_SRC_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_REF_CTRL_SRC_ACCESS = "RW";
pub const CLOCKS_CLK_REF_CTRL_SRC_VALUE_ROSC_CLKSRC_PH = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_REF_CTRL_SRC_VALUE_CLKSRC_CLK_REF_AUX = _u(@as(c_int, 0x1));
pub const CLOCKS_CLK_REF_CTRL_SRC_VALUE_XOSC_CLKSRC = _u(@as(c_int, 0x2));
pub const CLOCKS_CLK_REF_DIV_OFFSET = _u(@as(c_int, 0x00000034));
pub const CLOCKS_CLK_REF_DIV_BITS = _u(@as(c_int, 0x00000300));
pub const CLOCKS_CLK_REF_DIV_RESET = _u(@as(c_int, 0x00000100));
pub const CLOCKS_CLK_REF_DIV_INT_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_CLK_REF_DIV_INT_BITS = _u(@as(c_int, 0x00000300));
pub const CLOCKS_CLK_REF_DIV_INT_MSB = _u(@as(c_int, 9));
pub const CLOCKS_CLK_REF_DIV_INT_LSB = _u(@as(c_int, 8));
pub const CLOCKS_CLK_REF_DIV_INT_ACCESS = "RW";
pub const CLOCKS_CLK_REF_SELECTED_OFFSET = _u(@as(c_int, 0x00000038));
pub const CLOCKS_CLK_REF_SELECTED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_CLK_REF_SELECTED_RESET = _u(@as(c_int, 0x00000001));
pub const CLOCKS_CLK_REF_SELECTED_MSB = _u(@as(c_int, 31));
pub const CLOCKS_CLK_REF_SELECTED_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_REF_SELECTED_ACCESS = "RO";
pub const CLOCKS_CLK_SYS_CTRL_OFFSET = _u(@as(c_int, 0x0000003c));
pub const CLOCKS_CLK_SYS_CTRL_BITS = _u(@as(c_int, 0x000000e1));
pub const CLOCKS_CLK_SYS_CTRL_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_CLK_SYS_CTRL_AUXSRC_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS = _u(@as(c_int, 0x000000e0));
pub const CLOCKS_CLK_SYS_CTRL_AUXSRC_MSB = _u(@as(c_int, 7));
pub const CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB = _u(@as(c_int, 5));
pub const CLOCKS_CLK_SYS_CTRL_AUXSRC_ACCESS = "RW";
pub const CLOCKS_CLK_SYS_CTRL_AUXSRC_VALUE_CLKSRC_PLL_SYS = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_SYS_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB = _u(@as(c_int, 0x1));
pub const CLOCKS_CLK_SYS_CTRL_AUXSRC_VALUE_ROSC_CLKSRC = _u(@as(c_int, 0x2));
pub const CLOCKS_CLK_SYS_CTRL_AUXSRC_VALUE_XOSC_CLKSRC = _u(@as(c_int, 0x3));
pub const CLOCKS_CLK_SYS_CTRL_AUXSRC_VALUE_CLKSRC_GPIN0 = _u(@as(c_int, 0x4));
pub const CLOCKS_CLK_SYS_CTRL_AUXSRC_VALUE_CLKSRC_GPIN1 = _u(@as(c_int, 0x5));
pub const CLOCKS_CLK_SYS_CTRL_SRC_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_SYS_CTRL_SRC_BITS = _u(@as(c_int, 0x00000001));
pub const CLOCKS_CLK_SYS_CTRL_SRC_MSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_SYS_CTRL_SRC_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_SYS_CTRL_SRC_ACCESS = "RW";
pub const CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLK_REF = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX = _u(@as(c_int, 0x1));
pub const CLOCKS_CLK_SYS_DIV_OFFSET = _u(@as(c_int, 0x00000040));
pub const CLOCKS_CLK_SYS_DIV_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_CLK_SYS_DIV_RESET = _u(@as(c_int, 0x00000100));
pub const CLOCKS_CLK_SYS_DIV_INT_RESET = _u(@as(c_int, 0x000001));
pub const CLOCKS_CLK_SYS_DIV_INT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff00, .hexadecimal));
pub const CLOCKS_CLK_SYS_DIV_INT_MSB = _u(@as(c_int, 31));
pub const CLOCKS_CLK_SYS_DIV_INT_LSB = _u(@as(c_int, 8));
pub const CLOCKS_CLK_SYS_DIV_INT_ACCESS = "RW";
pub const CLOCKS_CLK_SYS_DIV_FRAC_RESET = _u(@as(c_int, 0x00));
pub const CLOCKS_CLK_SYS_DIV_FRAC_BITS = _u(@as(c_int, 0x000000ff));
pub const CLOCKS_CLK_SYS_DIV_FRAC_MSB = _u(@as(c_int, 7));
pub const CLOCKS_CLK_SYS_DIV_FRAC_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_SYS_DIV_FRAC_ACCESS = "RW";
pub const CLOCKS_CLK_SYS_SELECTED_OFFSET = _u(@as(c_int, 0x00000044));
pub const CLOCKS_CLK_SYS_SELECTED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_CLK_SYS_SELECTED_RESET = _u(@as(c_int, 0x00000001));
pub const CLOCKS_CLK_SYS_SELECTED_MSB = _u(@as(c_int, 31));
pub const CLOCKS_CLK_SYS_SELECTED_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_SYS_SELECTED_ACCESS = "RO";
pub const CLOCKS_CLK_PERI_CTRL_OFFSET = _u(@as(c_int, 0x00000048));
pub const CLOCKS_CLK_PERI_CTRL_BITS = _u(@as(c_int, 0x00000ce0));
pub const CLOCKS_CLK_PERI_CTRL_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_CLK_PERI_CTRL_ENABLE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_PERI_CTRL_ENABLE_BITS = _u(@as(c_int, 0x00000800));
pub const CLOCKS_CLK_PERI_CTRL_ENABLE_MSB = _u(@as(c_int, 11));
pub const CLOCKS_CLK_PERI_CTRL_ENABLE_LSB = _u(@as(c_int, 11));
pub const CLOCKS_CLK_PERI_CTRL_ENABLE_ACCESS = "RW";
pub const CLOCKS_CLK_PERI_CTRL_KILL_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_PERI_CTRL_KILL_BITS = _u(@as(c_int, 0x00000400));
pub const CLOCKS_CLK_PERI_CTRL_KILL_MSB = _u(@as(c_int, 10));
pub const CLOCKS_CLK_PERI_CTRL_KILL_LSB = _u(@as(c_int, 10));
pub const CLOCKS_CLK_PERI_CTRL_KILL_ACCESS = "RW";
pub const CLOCKS_CLK_PERI_CTRL_AUXSRC_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_PERI_CTRL_AUXSRC_BITS = _u(@as(c_int, 0x000000e0));
pub const CLOCKS_CLK_PERI_CTRL_AUXSRC_MSB = _u(@as(c_int, 7));
pub const CLOCKS_CLK_PERI_CTRL_AUXSRC_LSB = _u(@as(c_int, 5));
pub const CLOCKS_CLK_PERI_CTRL_AUXSRC_ACCESS = "RW";
pub const CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLKSRC_PLL_SYS = _u(@as(c_int, 0x1));
pub const CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB = _u(@as(c_int, 0x2));
pub const CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_ROSC_CLKSRC_PH = _u(@as(c_int, 0x3));
pub const CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_XOSC_CLKSRC = _u(@as(c_int, 0x4));
pub const CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLKSRC_GPIN0 = _u(@as(c_int, 0x5));
pub const CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLKSRC_GPIN1 = _u(@as(c_int, 0x6));
pub const CLOCKS_CLK_PERI_SELECTED_OFFSET = _u(@as(c_int, 0x00000050));
pub const CLOCKS_CLK_PERI_SELECTED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_CLK_PERI_SELECTED_RESET = _u(@as(c_int, 0x00000001));
pub const CLOCKS_CLK_PERI_SELECTED_MSB = _u(@as(c_int, 31));
pub const CLOCKS_CLK_PERI_SELECTED_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_PERI_SELECTED_ACCESS = "RO";
pub const CLOCKS_CLK_USB_CTRL_OFFSET = _u(@as(c_int, 0x00000054));
pub const CLOCKS_CLK_USB_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00130ce0, .hexadecimal));
pub const CLOCKS_CLK_USB_CTRL_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_CLK_USB_CTRL_NUDGE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_USB_CTRL_NUDGE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const CLOCKS_CLK_USB_CTRL_NUDGE_MSB = _u(@as(c_int, 20));
pub const CLOCKS_CLK_USB_CTRL_NUDGE_LSB = _u(@as(c_int, 20));
pub const CLOCKS_CLK_USB_CTRL_NUDGE_ACCESS = "RW";
pub const CLOCKS_CLK_USB_CTRL_PHASE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_USB_CTRL_PHASE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const CLOCKS_CLK_USB_CTRL_PHASE_MSB = _u(@as(c_int, 17));
pub const CLOCKS_CLK_USB_CTRL_PHASE_LSB = _u(@as(c_int, 16));
pub const CLOCKS_CLK_USB_CTRL_PHASE_ACCESS = "RW";
pub const CLOCKS_CLK_USB_CTRL_ENABLE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_USB_CTRL_ENABLE_BITS = _u(@as(c_int, 0x00000800));
pub const CLOCKS_CLK_USB_CTRL_ENABLE_MSB = _u(@as(c_int, 11));
pub const CLOCKS_CLK_USB_CTRL_ENABLE_LSB = _u(@as(c_int, 11));
pub const CLOCKS_CLK_USB_CTRL_ENABLE_ACCESS = "RW";
pub const CLOCKS_CLK_USB_CTRL_KILL_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_USB_CTRL_KILL_BITS = _u(@as(c_int, 0x00000400));
pub const CLOCKS_CLK_USB_CTRL_KILL_MSB = _u(@as(c_int, 10));
pub const CLOCKS_CLK_USB_CTRL_KILL_LSB = _u(@as(c_int, 10));
pub const CLOCKS_CLK_USB_CTRL_KILL_ACCESS = "RW";
pub const CLOCKS_CLK_USB_CTRL_AUXSRC_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_USB_CTRL_AUXSRC_BITS = _u(@as(c_int, 0x000000e0));
pub const CLOCKS_CLK_USB_CTRL_AUXSRC_MSB = _u(@as(c_int, 7));
pub const CLOCKS_CLK_USB_CTRL_AUXSRC_LSB = _u(@as(c_int, 5));
pub const CLOCKS_CLK_USB_CTRL_AUXSRC_ACCESS = "RW";
pub const CLOCKS_CLK_USB_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_USB_CTRL_AUXSRC_VALUE_CLKSRC_PLL_SYS = _u(@as(c_int, 0x1));
pub const CLOCKS_CLK_USB_CTRL_AUXSRC_VALUE_ROSC_CLKSRC_PH = _u(@as(c_int, 0x2));
pub const CLOCKS_CLK_USB_CTRL_AUXSRC_VALUE_XOSC_CLKSRC = _u(@as(c_int, 0x3));
pub const CLOCKS_CLK_USB_CTRL_AUXSRC_VALUE_CLKSRC_GPIN0 = _u(@as(c_int, 0x4));
pub const CLOCKS_CLK_USB_CTRL_AUXSRC_VALUE_CLKSRC_GPIN1 = _u(@as(c_int, 0x5));
pub const CLOCKS_CLK_USB_DIV_OFFSET = _u(@as(c_int, 0x00000058));
pub const CLOCKS_CLK_USB_DIV_BITS = _u(@as(c_int, 0x00000300));
pub const CLOCKS_CLK_USB_DIV_RESET = _u(@as(c_int, 0x00000100));
pub const CLOCKS_CLK_USB_DIV_INT_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_CLK_USB_DIV_INT_BITS = _u(@as(c_int, 0x00000300));
pub const CLOCKS_CLK_USB_DIV_INT_MSB = _u(@as(c_int, 9));
pub const CLOCKS_CLK_USB_DIV_INT_LSB = _u(@as(c_int, 8));
pub const CLOCKS_CLK_USB_DIV_INT_ACCESS = "RW";
pub const CLOCKS_CLK_USB_SELECTED_OFFSET = _u(@as(c_int, 0x0000005c));
pub const CLOCKS_CLK_USB_SELECTED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_CLK_USB_SELECTED_RESET = _u(@as(c_int, 0x00000001));
pub const CLOCKS_CLK_USB_SELECTED_MSB = _u(@as(c_int, 31));
pub const CLOCKS_CLK_USB_SELECTED_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_USB_SELECTED_ACCESS = "RO";
pub const CLOCKS_CLK_ADC_CTRL_OFFSET = _u(@as(c_int, 0x00000060));
pub const CLOCKS_CLK_ADC_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00130ce0, .hexadecimal));
pub const CLOCKS_CLK_ADC_CTRL_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_CLK_ADC_CTRL_NUDGE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_ADC_CTRL_NUDGE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const CLOCKS_CLK_ADC_CTRL_NUDGE_MSB = _u(@as(c_int, 20));
pub const CLOCKS_CLK_ADC_CTRL_NUDGE_LSB = _u(@as(c_int, 20));
pub const CLOCKS_CLK_ADC_CTRL_NUDGE_ACCESS = "RW";
pub const CLOCKS_CLK_ADC_CTRL_PHASE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_ADC_CTRL_PHASE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const CLOCKS_CLK_ADC_CTRL_PHASE_MSB = _u(@as(c_int, 17));
pub const CLOCKS_CLK_ADC_CTRL_PHASE_LSB = _u(@as(c_int, 16));
pub const CLOCKS_CLK_ADC_CTRL_PHASE_ACCESS = "RW";
pub const CLOCKS_CLK_ADC_CTRL_ENABLE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_ADC_CTRL_ENABLE_BITS = _u(@as(c_int, 0x00000800));
pub const CLOCKS_CLK_ADC_CTRL_ENABLE_MSB = _u(@as(c_int, 11));
pub const CLOCKS_CLK_ADC_CTRL_ENABLE_LSB = _u(@as(c_int, 11));
pub const CLOCKS_CLK_ADC_CTRL_ENABLE_ACCESS = "RW";
pub const CLOCKS_CLK_ADC_CTRL_KILL_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_ADC_CTRL_KILL_BITS = _u(@as(c_int, 0x00000400));
pub const CLOCKS_CLK_ADC_CTRL_KILL_MSB = _u(@as(c_int, 10));
pub const CLOCKS_CLK_ADC_CTRL_KILL_LSB = _u(@as(c_int, 10));
pub const CLOCKS_CLK_ADC_CTRL_KILL_ACCESS = "RW";
pub const CLOCKS_CLK_ADC_CTRL_AUXSRC_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_ADC_CTRL_AUXSRC_BITS = _u(@as(c_int, 0x000000e0));
pub const CLOCKS_CLK_ADC_CTRL_AUXSRC_MSB = _u(@as(c_int, 7));
pub const CLOCKS_CLK_ADC_CTRL_AUXSRC_LSB = _u(@as(c_int, 5));
pub const CLOCKS_CLK_ADC_CTRL_AUXSRC_ACCESS = "RW";
pub const CLOCKS_CLK_ADC_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_ADC_CTRL_AUXSRC_VALUE_CLKSRC_PLL_SYS = _u(@as(c_int, 0x1));
pub const CLOCKS_CLK_ADC_CTRL_AUXSRC_VALUE_ROSC_CLKSRC_PH = _u(@as(c_int, 0x2));
pub const CLOCKS_CLK_ADC_CTRL_AUXSRC_VALUE_XOSC_CLKSRC = _u(@as(c_int, 0x3));
pub const CLOCKS_CLK_ADC_CTRL_AUXSRC_VALUE_CLKSRC_GPIN0 = _u(@as(c_int, 0x4));
pub const CLOCKS_CLK_ADC_CTRL_AUXSRC_VALUE_CLKSRC_GPIN1 = _u(@as(c_int, 0x5));
pub const CLOCKS_CLK_ADC_DIV_OFFSET = _u(@as(c_int, 0x00000064));
pub const CLOCKS_CLK_ADC_DIV_BITS = _u(@as(c_int, 0x00000300));
pub const CLOCKS_CLK_ADC_DIV_RESET = _u(@as(c_int, 0x00000100));
pub const CLOCKS_CLK_ADC_DIV_INT_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_CLK_ADC_DIV_INT_BITS = _u(@as(c_int, 0x00000300));
pub const CLOCKS_CLK_ADC_DIV_INT_MSB = _u(@as(c_int, 9));
pub const CLOCKS_CLK_ADC_DIV_INT_LSB = _u(@as(c_int, 8));
pub const CLOCKS_CLK_ADC_DIV_INT_ACCESS = "RW";
pub const CLOCKS_CLK_ADC_SELECTED_OFFSET = _u(@as(c_int, 0x00000068));
pub const CLOCKS_CLK_ADC_SELECTED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_CLK_ADC_SELECTED_RESET = _u(@as(c_int, 0x00000001));
pub const CLOCKS_CLK_ADC_SELECTED_MSB = _u(@as(c_int, 31));
pub const CLOCKS_CLK_ADC_SELECTED_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_ADC_SELECTED_ACCESS = "RO";
pub const CLOCKS_CLK_RTC_CTRL_OFFSET = _u(@as(c_int, 0x0000006c));
pub const CLOCKS_CLK_RTC_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00130ce0, .hexadecimal));
pub const CLOCKS_CLK_RTC_CTRL_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_CLK_RTC_CTRL_NUDGE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_RTC_CTRL_NUDGE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const CLOCKS_CLK_RTC_CTRL_NUDGE_MSB = _u(@as(c_int, 20));
pub const CLOCKS_CLK_RTC_CTRL_NUDGE_LSB = _u(@as(c_int, 20));
pub const CLOCKS_CLK_RTC_CTRL_NUDGE_ACCESS = "RW";
pub const CLOCKS_CLK_RTC_CTRL_PHASE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_RTC_CTRL_PHASE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal));
pub const CLOCKS_CLK_RTC_CTRL_PHASE_MSB = _u(@as(c_int, 17));
pub const CLOCKS_CLK_RTC_CTRL_PHASE_LSB = _u(@as(c_int, 16));
pub const CLOCKS_CLK_RTC_CTRL_PHASE_ACCESS = "RW";
pub const CLOCKS_CLK_RTC_CTRL_ENABLE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_RTC_CTRL_ENABLE_BITS = _u(@as(c_int, 0x00000800));
pub const CLOCKS_CLK_RTC_CTRL_ENABLE_MSB = _u(@as(c_int, 11));
pub const CLOCKS_CLK_RTC_CTRL_ENABLE_LSB = _u(@as(c_int, 11));
pub const CLOCKS_CLK_RTC_CTRL_ENABLE_ACCESS = "RW";
pub const CLOCKS_CLK_RTC_CTRL_KILL_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_RTC_CTRL_KILL_BITS = _u(@as(c_int, 0x00000400));
pub const CLOCKS_CLK_RTC_CTRL_KILL_MSB = _u(@as(c_int, 10));
pub const CLOCKS_CLK_RTC_CTRL_KILL_LSB = _u(@as(c_int, 10));
pub const CLOCKS_CLK_RTC_CTRL_KILL_ACCESS = "RW";
pub const CLOCKS_CLK_RTC_CTRL_AUXSRC_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_RTC_CTRL_AUXSRC_BITS = _u(@as(c_int, 0x000000e0));
pub const CLOCKS_CLK_RTC_CTRL_AUXSRC_MSB = _u(@as(c_int, 7));
pub const CLOCKS_CLK_RTC_CTRL_AUXSRC_LSB = _u(@as(c_int, 5));
pub const CLOCKS_CLK_RTC_CTRL_AUXSRC_ACCESS = "RW";
pub const CLOCKS_CLK_RTC_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_RTC_CTRL_AUXSRC_VALUE_CLKSRC_PLL_SYS = _u(@as(c_int, 0x1));
pub const CLOCKS_CLK_RTC_CTRL_AUXSRC_VALUE_ROSC_CLKSRC_PH = _u(@as(c_int, 0x2));
pub const CLOCKS_CLK_RTC_CTRL_AUXSRC_VALUE_XOSC_CLKSRC = _u(@as(c_int, 0x3));
pub const CLOCKS_CLK_RTC_CTRL_AUXSRC_VALUE_CLKSRC_GPIN0 = _u(@as(c_int, 0x4));
pub const CLOCKS_CLK_RTC_CTRL_AUXSRC_VALUE_CLKSRC_GPIN1 = _u(@as(c_int, 0x5));
pub const CLOCKS_CLK_RTC_DIV_OFFSET = _u(@as(c_int, 0x00000070));
pub const CLOCKS_CLK_RTC_DIV_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_CLK_RTC_DIV_RESET = _u(@as(c_int, 0x00000100));
pub const CLOCKS_CLK_RTC_DIV_INT_RESET = _u(@as(c_int, 0x000001));
pub const CLOCKS_CLK_RTC_DIV_INT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff00, .hexadecimal));
pub const CLOCKS_CLK_RTC_DIV_INT_MSB = _u(@as(c_int, 31));
pub const CLOCKS_CLK_RTC_DIV_INT_LSB = _u(@as(c_int, 8));
pub const CLOCKS_CLK_RTC_DIV_INT_ACCESS = "RW";
pub const CLOCKS_CLK_RTC_DIV_FRAC_RESET = _u(@as(c_int, 0x00));
pub const CLOCKS_CLK_RTC_DIV_FRAC_BITS = _u(@as(c_int, 0x000000ff));
pub const CLOCKS_CLK_RTC_DIV_FRAC_MSB = _u(@as(c_int, 7));
pub const CLOCKS_CLK_RTC_DIV_FRAC_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_RTC_DIV_FRAC_ACCESS = "RW";
pub const CLOCKS_CLK_RTC_SELECTED_OFFSET = _u(@as(c_int, 0x00000074));
pub const CLOCKS_CLK_RTC_SELECTED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_CLK_RTC_SELECTED_RESET = _u(@as(c_int, 0x00000001));
pub const CLOCKS_CLK_RTC_SELECTED_MSB = _u(@as(c_int, 31));
pub const CLOCKS_CLK_RTC_SELECTED_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_RTC_SELECTED_ACCESS = "RO";
pub const CLOCKS_CLK_SYS_RESUS_CTRL_OFFSET = _u(@as(c_int, 0x00000078));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000111ff, .hexadecimal));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_RESET = _u(@as(c_int, 0x000000ff));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_CLEAR_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_CLEAR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_CLEAR_MSB = _u(@as(c_int, 16));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_CLEAR_LSB = _u(@as(c_int, 16));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_CLEAR_ACCESS = "RW";
pub const CLOCKS_CLK_SYS_RESUS_CTRL_FRCE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_FRCE_BITS = _u(@as(c_int, 0x00001000));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_FRCE_MSB = _u(@as(c_int, 12));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_FRCE_LSB = _u(@as(c_int, 12));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_FRCE_ACCESS = "RW";
pub const CLOCKS_CLK_SYS_RESUS_CTRL_ENABLE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_ENABLE_BITS = _u(@as(c_int, 0x00000100));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_ENABLE_MSB = _u(@as(c_int, 8));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_ENABLE_LSB = _u(@as(c_int, 8));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_ENABLE_ACCESS = "RW";
pub const CLOCKS_CLK_SYS_RESUS_CTRL_TIMEOUT_RESET = _u(@as(c_int, 0xff));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_TIMEOUT_BITS = _u(@as(c_int, 0x000000ff));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_TIMEOUT_MSB = _u(@as(c_int, 7));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_TIMEOUT_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_SYS_RESUS_CTRL_TIMEOUT_ACCESS = "RW";
pub const CLOCKS_CLK_SYS_RESUS_STATUS_OFFSET = _u(@as(c_int, 0x0000007c));
pub const CLOCKS_CLK_SYS_RESUS_STATUS_BITS = _u(@as(c_int, 0x00000001));
pub const CLOCKS_CLK_SYS_RESUS_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_CLK_SYS_RESUS_STATUS_RESUSSED_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_CLK_SYS_RESUS_STATUS_RESUSSED_BITS = _u(@as(c_int, 0x00000001));
pub const CLOCKS_CLK_SYS_RESUS_STATUS_RESUSSED_MSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_SYS_RESUS_STATUS_RESUSSED_LSB = _u(@as(c_int, 0));
pub const CLOCKS_CLK_SYS_RESUS_STATUS_RESUSSED_ACCESS = "RO";
pub const CLOCKS_FC0_REF_KHZ_OFFSET = _u(@as(c_int, 0x00000080));
pub const CLOCKS_FC0_REF_KHZ_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000fffff, .hexadecimal));
pub const CLOCKS_FC0_REF_KHZ_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_FC0_REF_KHZ_MSB = _u(@as(c_int, 19));
pub const CLOCKS_FC0_REF_KHZ_LSB = _u(@as(c_int, 0));
pub const CLOCKS_FC0_REF_KHZ_ACCESS = "RW";
pub const CLOCKS_FC0_MIN_KHZ_OFFSET = _u(@as(c_int, 0x00000084));
pub const CLOCKS_FC0_MIN_KHZ_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01ffffff, .hexadecimal));
pub const CLOCKS_FC0_MIN_KHZ_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_FC0_MIN_KHZ_MSB = _u(@as(c_int, 24));
pub const CLOCKS_FC0_MIN_KHZ_LSB = _u(@as(c_int, 0));
pub const CLOCKS_FC0_MIN_KHZ_ACCESS = "RW";
pub const CLOCKS_FC0_MAX_KHZ_OFFSET = _u(@as(c_int, 0x00000088));
pub const CLOCKS_FC0_MAX_KHZ_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01ffffff, .hexadecimal));
pub const CLOCKS_FC0_MAX_KHZ_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01ffffff, .hexadecimal));
pub const CLOCKS_FC0_MAX_KHZ_MSB = _u(@as(c_int, 24));
pub const CLOCKS_FC0_MAX_KHZ_LSB = _u(@as(c_int, 0));
pub const CLOCKS_FC0_MAX_KHZ_ACCESS = "RW";
pub const CLOCKS_FC0_DELAY_OFFSET = _u(@as(c_int, 0x0000008c));
pub const CLOCKS_FC0_DELAY_BITS = _u(@as(c_int, 0x00000007));
pub const CLOCKS_FC0_DELAY_RESET = _u(@as(c_int, 0x00000001));
pub const CLOCKS_FC0_DELAY_MSB = _u(@as(c_int, 2));
pub const CLOCKS_FC0_DELAY_LSB = _u(@as(c_int, 0));
pub const CLOCKS_FC0_DELAY_ACCESS = "RW";
pub const CLOCKS_FC0_INTERVAL_OFFSET = _u(@as(c_int, 0x00000090));
pub const CLOCKS_FC0_INTERVAL_BITS = _u(@as(c_int, 0x0000000f));
pub const CLOCKS_FC0_INTERVAL_RESET = _u(@as(c_int, 0x00000008));
pub const CLOCKS_FC0_INTERVAL_MSB = _u(@as(c_int, 3));
pub const CLOCKS_FC0_INTERVAL_LSB = _u(@as(c_int, 0));
pub const CLOCKS_FC0_INTERVAL_ACCESS = "RW";
pub const CLOCKS_FC0_SRC_OFFSET = _u(@as(c_int, 0x00000094));
pub const CLOCKS_FC0_SRC_BITS = _u(@as(c_int, 0x000000ff));
pub const CLOCKS_FC0_SRC_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_FC0_SRC_MSB = _u(@as(c_int, 7));
pub const CLOCKS_FC0_SRC_LSB = _u(@as(c_int, 0));
pub const CLOCKS_FC0_SRC_ACCESS = "RW";
pub const CLOCKS_FC0_SRC_VALUE_NULL = _u(@as(c_int, 0x00));
pub const CLOCKS_FC0_SRC_VALUE_PLL_SYS_CLKSRC_PRIMARY = _u(@as(c_int, 0x01));
pub const CLOCKS_FC0_SRC_VALUE_PLL_USB_CLKSRC_PRIMARY = _u(@as(c_int, 0x02));
pub const CLOCKS_FC0_SRC_VALUE_ROSC_CLKSRC = _u(@as(c_int, 0x03));
pub const CLOCKS_FC0_SRC_VALUE_ROSC_CLKSRC_PH = _u(@as(c_int, 0x04));
pub const CLOCKS_FC0_SRC_VALUE_XOSC_CLKSRC = _u(@as(c_int, 0x05));
pub const CLOCKS_FC0_SRC_VALUE_CLKSRC_GPIN0 = _u(@as(c_int, 0x06));
pub const CLOCKS_FC0_SRC_VALUE_CLKSRC_GPIN1 = _u(@as(c_int, 0x07));
pub const CLOCKS_FC0_SRC_VALUE_CLK_REF = _u(@as(c_int, 0x08));
pub const CLOCKS_FC0_SRC_VALUE_CLK_SYS = _u(@as(c_int, 0x09));
pub const CLOCKS_FC0_SRC_VALUE_CLK_PERI = _u(@as(c_int, 0x0a));
pub const CLOCKS_FC0_SRC_VALUE_CLK_USB = _u(@as(c_int, 0x0b));
pub const CLOCKS_FC0_SRC_VALUE_CLK_ADC = _u(@as(c_int, 0x0c));
pub const CLOCKS_FC0_SRC_VALUE_CLK_RTC = _u(@as(c_int, 0x0d));
pub const CLOCKS_FC0_STATUS_OFFSET = _u(@as(c_int, 0x00000098));
pub const CLOCKS_FC0_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x11111111, .hexadecimal));
pub const CLOCKS_FC0_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_FC0_STATUS_DIED_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_FC0_STATUS_DIED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const CLOCKS_FC0_STATUS_DIED_MSB = _u(@as(c_int, 28));
pub const CLOCKS_FC0_STATUS_DIED_LSB = _u(@as(c_int, 28));
pub const CLOCKS_FC0_STATUS_DIED_ACCESS = "RO";
pub const CLOCKS_FC0_STATUS_FAST_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_FC0_STATUS_FAST_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const CLOCKS_FC0_STATUS_FAST_MSB = _u(@as(c_int, 24));
pub const CLOCKS_FC0_STATUS_FAST_LSB = _u(@as(c_int, 24));
pub const CLOCKS_FC0_STATUS_FAST_ACCESS = "RO";
pub const CLOCKS_FC0_STATUS_SLOW_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_FC0_STATUS_SLOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const CLOCKS_FC0_STATUS_SLOW_MSB = _u(@as(c_int, 20));
pub const CLOCKS_FC0_STATUS_SLOW_LSB = _u(@as(c_int, 20));
pub const CLOCKS_FC0_STATUS_SLOW_ACCESS = "RO";
pub const CLOCKS_FC0_STATUS_FAIL_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_FC0_STATUS_FAIL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const CLOCKS_FC0_STATUS_FAIL_MSB = _u(@as(c_int, 16));
pub const CLOCKS_FC0_STATUS_FAIL_LSB = _u(@as(c_int, 16));
pub const CLOCKS_FC0_STATUS_FAIL_ACCESS = "RO";
pub const CLOCKS_FC0_STATUS_WAITING_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_FC0_STATUS_WAITING_BITS = _u(@as(c_int, 0x00001000));
pub const CLOCKS_FC0_STATUS_WAITING_MSB = _u(@as(c_int, 12));
pub const CLOCKS_FC0_STATUS_WAITING_LSB = _u(@as(c_int, 12));
pub const CLOCKS_FC0_STATUS_WAITING_ACCESS = "RO";
pub const CLOCKS_FC0_STATUS_RUNNING_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_FC0_STATUS_RUNNING_BITS = _u(@as(c_int, 0x00000100));
pub const CLOCKS_FC0_STATUS_RUNNING_MSB = _u(@as(c_int, 8));
pub const CLOCKS_FC0_STATUS_RUNNING_LSB = _u(@as(c_int, 8));
pub const CLOCKS_FC0_STATUS_RUNNING_ACCESS = "RO";
pub const CLOCKS_FC0_STATUS_DONE_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_FC0_STATUS_DONE_BITS = _u(@as(c_int, 0x00000010));
pub const CLOCKS_FC0_STATUS_DONE_MSB = _u(@as(c_int, 4));
pub const CLOCKS_FC0_STATUS_DONE_LSB = _u(@as(c_int, 4));
pub const CLOCKS_FC0_STATUS_DONE_ACCESS = "RO";
pub const CLOCKS_FC0_STATUS_PASS_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_FC0_STATUS_PASS_BITS = _u(@as(c_int, 0x00000001));
pub const CLOCKS_FC0_STATUS_PASS_MSB = _u(@as(c_int, 0));
pub const CLOCKS_FC0_STATUS_PASS_LSB = _u(@as(c_int, 0));
pub const CLOCKS_FC0_STATUS_PASS_ACCESS = "RO";
pub const CLOCKS_FC0_RESULT_OFFSET = _u(@as(c_int, 0x0000009c));
pub const CLOCKS_FC0_RESULT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3fffffff, .hexadecimal));
pub const CLOCKS_FC0_RESULT_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_FC0_RESULT_KHZ_RESET = _u(@as(c_int, 0x0000000));
pub const CLOCKS_FC0_RESULT_KHZ_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3fffffe0, .hexadecimal));
pub const CLOCKS_FC0_RESULT_KHZ_MSB = _u(@as(c_int, 29));
pub const CLOCKS_FC0_RESULT_KHZ_LSB = _u(@as(c_int, 5));
pub const CLOCKS_FC0_RESULT_KHZ_ACCESS = "RO";
pub const CLOCKS_FC0_RESULT_FRAC_RESET = _u(@as(c_int, 0x00));
pub const CLOCKS_FC0_RESULT_FRAC_BITS = _u(@as(c_int, 0x0000001f));
pub const CLOCKS_FC0_RESULT_FRAC_MSB = _u(@as(c_int, 4));
pub const CLOCKS_FC0_RESULT_FRAC_LSB = _u(@as(c_int, 0));
pub const CLOCKS_FC0_RESULT_FRAC_ACCESS = "RO";
pub const CLOCKS_WAKE_EN0_OFFSET = _u(@as(c_int, 0x000000a0));
pub const CLOCKS_WAKE_EN0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_WAKE_EN0_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM3_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM3_MSB = _u(@as(c_int, 31));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM3_LSB = _u(@as(c_int, 31));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM3_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM2_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM2_MSB = _u(@as(c_int, 30));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM2_LSB = _u(@as(c_int, 30));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM2_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM1_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM1_MSB = _u(@as(c_int, 29));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM1_LSB = _u(@as(c_int, 29));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM1_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM0_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM0_MSB = _u(@as(c_int, 28));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM0_LSB = _u(@as(c_int, 28));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SRAM0_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_SPI1_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SPI1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SPI1_MSB = _u(@as(c_int, 27));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SPI1_LSB = _u(@as(c_int, 27));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SPI1_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_PERI_SPI1_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_PERI_SPI1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const CLOCKS_WAKE_EN0_CLK_PERI_SPI1_MSB = _u(@as(c_int, 26));
pub const CLOCKS_WAKE_EN0_CLK_PERI_SPI1_LSB = _u(@as(c_int, 26));
pub const CLOCKS_WAKE_EN0_CLK_PERI_SPI1_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_SPI0_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SPI0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SPI0_MSB = _u(@as(c_int, 25));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SPI0_LSB = _u(@as(c_int, 25));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SPI0_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_PERI_SPI0_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_PERI_SPI0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const CLOCKS_WAKE_EN0_CLK_PERI_SPI0_MSB = _u(@as(c_int, 24));
pub const CLOCKS_WAKE_EN0_CLK_PERI_SPI0_LSB = _u(@as(c_int, 24));
pub const CLOCKS_WAKE_EN0_CLK_PERI_SPI0_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_SIO_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SIO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SIO_MSB = _u(@as(c_int, 23));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SIO_LSB = _u(@as(c_int, 23));
pub const CLOCKS_WAKE_EN0_CLK_SYS_SIO_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_RTC_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_RTC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const CLOCKS_WAKE_EN0_CLK_SYS_RTC_MSB = _u(@as(c_int, 22));
pub const CLOCKS_WAKE_EN0_CLK_SYS_RTC_LSB = _u(@as(c_int, 22));
pub const CLOCKS_WAKE_EN0_CLK_SYS_RTC_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_RTC_RTC_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_RTC_RTC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const CLOCKS_WAKE_EN0_CLK_RTC_RTC_MSB = _u(@as(c_int, 21));
pub const CLOCKS_WAKE_EN0_CLK_RTC_RTC_LSB = _u(@as(c_int, 21));
pub const CLOCKS_WAKE_EN0_CLK_RTC_RTC_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_ROSC_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_ROSC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const CLOCKS_WAKE_EN0_CLK_SYS_ROSC_MSB = _u(@as(c_int, 20));
pub const CLOCKS_WAKE_EN0_CLK_SYS_ROSC_LSB = _u(@as(c_int, 20));
pub const CLOCKS_WAKE_EN0_CLK_SYS_ROSC_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_ROM_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_ROM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const CLOCKS_WAKE_EN0_CLK_SYS_ROM_MSB = _u(@as(c_int, 19));
pub const CLOCKS_WAKE_EN0_CLK_SYS_ROM_LSB = _u(@as(c_int, 19));
pub const CLOCKS_WAKE_EN0_CLK_SYS_ROM_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_RESETS_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_RESETS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const CLOCKS_WAKE_EN0_CLK_SYS_RESETS_MSB = _u(@as(c_int, 18));
pub const CLOCKS_WAKE_EN0_CLK_SYS_RESETS_LSB = _u(@as(c_int, 18));
pub const CLOCKS_WAKE_EN0_CLK_SYS_RESETS_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_PWM_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PWM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PWM_MSB = _u(@as(c_int, 17));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PWM_LSB = _u(@as(c_int, 17));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PWM_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_PSM_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PSM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PSM_MSB = _u(@as(c_int, 16));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PSM_LSB = _u(@as(c_int, 16));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PSM_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_PLL_USB_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PLL_USB_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PLL_USB_MSB = _u(@as(c_int, 15));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PLL_USB_LSB = _u(@as(c_int, 15));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PLL_USB_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_PLL_SYS_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PLL_SYS_BITS = _u(@as(c_int, 0x00004000));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PLL_SYS_MSB = _u(@as(c_int, 14));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PLL_SYS_LSB = _u(@as(c_int, 14));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PLL_SYS_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_PIO1_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PIO1_BITS = _u(@as(c_int, 0x00002000));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PIO1_MSB = _u(@as(c_int, 13));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PIO1_LSB = _u(@as(c_int, 13));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PIO1_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_PIO0_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PIO0_BITS = _u(@as(c_int, 0x00001000));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PIO0_MSB = _u(@as(c_int, 12));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PIO0_LSB = _u(@as(c_int, 12));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PIO0_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_PADS_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PADS_BITS = _u(@as(c_int, 0x00000800));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PADS_MSB = _u(@as(c_int, 11));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PADS_LSB = _u(@as(c_int, 11));
pub const CLOCKS_WAKE_EN0_CLK_SYS_PADS_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_VREG_AND_CHIP_RESET_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_VREG_AND_CHIP_RESET_BITS = _u(@as(c_int, 0x00000400));
pub const CLOCKS_WAKE_EN0_CLK_SYS_VREG_AND_CHIP_RESET_MSB = _u(@as(c_int, 10));
pub const CLOCKS_WAKE_EN0_CLK_SYS_VREG_AND_CHIP_RESET_LSB = _u(@as(c_int, 10));
pub const CLOCKS_WAKE_EN0_CLK_SYS_VREG_AND_CHIP_RESET_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_JTAG_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_JTAG_BITS = _u(@as(c_int, 0x00000200));
pub const CLOCKS_WAKE_EN0_CLK_SYS_JTAG_MSB = _u(@as(c_int, 9));
pub const CLOCKS_WAKE_EN0_CLK_SYS_JTAG_LSB = _u(@as(c_int, 9));
pub const CLOCKS_WAKE_EN0_CLK_SYS_JTAG_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_IO_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_IO_BITS = _u(@as(c_int, 0x00000100));
pub const CLOCKS_WAKE_EN0_CLK_SYS_IO_MSB = _u(@as(c_int, 8));
pub const CLOCKS_WAKE_EN0_CLK_SYS_IO_LSB = _u(@as(c_int, 8));
pub const CLOCKS_WAKE_EN0_CLK_SYS_IO_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_I2C1_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_I2C1_BITS = _u(@as(c_int, 0x00000080));
pub const CLOCKS_WAKE_EN0_CLK_SYS_I2C1_MSB = _u(@as(c_int, 7));
pub const CLOCKS_WAKE_EN0_CLK_SYS_I2C1_LSB = _u(@as(c_int, 7));
pub const CLOCKS_WAKE_EN0_CLK_SYS_I2C1_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_I2C0_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_I2C0_BITS = _u(@as(c_int, 0x00000040));
pub const CLOCKS_WAKE_EN0_CLK_SYS_I2C0_MSB = _u(@as(c_int, 6));
pub const CLOCKS_WAKE_EN0_CLK_SYS_I2C0_LSB = _u(@as(c_int, 6));
pub const CLOCKS_WAKE_EN0_CLK_SYS_I2C0_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_DMA_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_DMA_BITS = _u(@as(c_int, 0x00000020));
pub const CLOCKS_WAKE_EN0_CLK_SYS_DMA_MSB = _u(@as(c_int, 5));
pub const CLOCKS_WAKE_EN0_CLK_SYS_DMA_LSB = _u(@as(c_int, 5));
pub const CLOCKS_WAKE_EN0_CLK_SYS_DMA_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_BUSFABRIC_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_BUSFABRIC_BITS = _u(@as(c_int, 0x00000010));
pub const CLOCKS_WAKE_EN0_CLK_SYS_BUSFABRIC_MSB = _u(@as(c_int, 4));
pub const CLOCKS_WAKE_EN0_CLK_SYS_BUSFABRIC_LSB = _u(@as(c_int, 4));
pub const CLOCKS_WAKE_EN0_CLK_SYS_BUSFABRIC_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_BUSCTRL_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_BUSCTRL_BITS = _u(@as(c_int, 0x00000008));
pub const CLOCKS_WAKE_EN0_CLK_SYS_BUSCTRL_MSB = _u(@as(c_int, 3));
pub const CLOCKS_WAKE_EN0_CLK_SYS_BUSCTRL_LSB = _u(@as(c_int, 3));
pub const CLOCKS_WAKE_EN0_CLK_SYS_BUSCTRL_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_ADC_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_ADC_BITS = _u(@as(c_int, 0x00000004));
pub const CLOCKS_WAKE_EN0_CLK_SYS_ADC_MSB = _u(@as(c_int, 2));
pub const CLOCKS_WAKE_EN0_CLK_SYS_ADC_LSB = _u(@as(c_int, 2));
pub const CLOCKS_WAKE_EN0_CLK_SYS_ADC_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_ADC_ADC_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_ADC_ADC_BITS = _u(@as(c_int, 0x00000002));
pub const CLOCKS_WAKE_EN0_CLK_ADC_ADC_MSB = _u(@as(c_int, 1));
pub const CLOCKS_WAKE_EN0_CLK_ADC_ADC_LSB = _u(@as(c_int, 1));
pub const CLOCKS_WAKE_EN0_CLK_ADC_ADC_ACCESS = "RW";
pub const CLOCKS_WAKE_EN0_CLK_SYS_CLOCKS_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN0_CLK_SYS_CLOCKS_BITS = _u(@as(c_int, 0x00000001));
pub const CLOCKS_WAKE_EN0_CLK_SYS_CLOCKS_MSB = _u(@as(c_int, 0));
pub const CLOCKS_WAKE_EN0_CLK_SYS_CLOCKS_LSB = _u(@as(c_int, 0));
pub const CLOCKS_WAKE_EN0_CLK_SYS_CLOCKS_ACCESS = "RW";
pub const CLOCKS_WAKE_EN1_OFFSET = _u(@as(c_int, 0x000000a4));
pub const CLOCKS_WAKE_EN1_BITS = _u(@as(c_int, 0x00007fff));
pub const CLOCKS_WAKE_EN1_RESET = _u(@as(c_int, 0x00007fff));
pub const CLOCKS_WAKE_EN1_CLK_SYS_XOSC_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN1_CLK_SYS_XOSC_BITS = _u(@as(c_int, 0x00004000));
pub const CLOCKS_WAKE_EN1_CLK_SYS_XOSC_MSB = _u(@as(c_int, 14));
pub const CLOCKS_WAKE_EN1_CLK_SYS_XOSC_LSB = _u(@as(c_int, 14));
pub const CLOCKS_WAKE_EN1_CLK_SYS_XOSC_ACCESS = "RW";
pub const CLOCKS_WAKE_EN1_CLK_SYS_XIP_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN1_CLK_SYS_XIP_BITS = _u(@as(c_int, 0x00002000));
pub const CLOCKS_WAKE_EN1_CLK_SYS_XIP_MSB = _u(@as(c_int, 13));
pub const CLOCKS_WAKE_EN1_CLK_SYS_XIP_LSB = _u(@as(c_int, 13));
pub const CLOCKS_WAKE_EN1_CLK_SYS_XIP_ACCESS = "RW";
pub const CLOCKS_WAKE_EN1_CLK_SYS_WATCHDOG_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN1_CLK_SYS_WATCHDOG_BITS = _u(@as(c_int, 0x00001000));
pub const CLOCKS_WAKE_EN1_CLK_SYS_WATCHDOG_MSB = _u(@as(c_int, 12));
pub const CLOCKS_WAKE_EN1_CLK_SYS_WATCHDOG_LSB = _u(@as(c_int, 12));
pub const CLOCKS_WAKE_EN1_CLK_SYS_WATCHDOG_ACCESS = "RW";
pub const CLOCKS_WAKE_EN1_CLK_USB_USBCTRL_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN1_CLK_USB_USBCTRL_BITS = _u(@as(c_int, 0x00000800));
pub const CLOCKS_WAKE_EN1_CLK_USB_USBCTRL_MSB = _u(@as(c_int, 11));
pub const CLOCKS_WAKE_EN1_CLK_USB_USBCTRL_LSB = _u(@as(c_int, 11));
pub const CLOCKS_WAKE_EN1_CLK_USB_USBCTRL_ACCESS = "RW";
pub const CLOCKS_WAKE_EN1_CLK_SYS_USBCTRL_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN1_CLK_SYS_USBCTRL_BITS = _u(@as(c_int, 0x00000400));
pub const CLOCKS_WAKE_EN1_CLK_SYS_USBCTRL_MSB = _u(@as(c_int, 10));
pub const CLOCKS_WAKE_EN1_CLK_SYS_USBCTRL_LSB = _u(@as(c_int, 10));
pub const CLOCKS_WAKE_EN1_CLK_SYS_USBCTRL_ACCESS = "RW";
pub const CLOCKS_WAKE_EN1_CLK_SYS_UART1_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN1_CLK_SYS_UART1_BITS = _u(@as(c_int, 0x00000200));
pub const CLOCKS_WAKE_EN1_CLK_SYS_UART1_MSB = _u(@as(c_int, 9));
pub const CLOCKS_WAKE_EN1_CLK_SYS_UART1_LSB = _u(@as(c_int, 9));
pub const CLOCKS_WAKE_EN1_CLK_SYS_UART1_ACCESS = "RW";
pub const CLOCKS_WAKE_EN1_CLK_PERI_UART1_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN1_CLK_PERI_UART1_BITS = _u(@as(c_int, 0x00000100));
pub const CLOCKS_WAKE_EN1_CLK_PERI_UART1_MSB = _u(@as(c_int, 8));
pub const CLOCKS_WAKE_EN1_CLK_PERI_UART1_LSB = _u(@as(c_int, 8));
pub const CLOCKS_WAKE_EN1_CLK_PERI_UART1_ACCESS = "RW";
pub const CLOCKS_WAKE_EN1_CLK_SYS_UART0_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN1_CLK_SYS_UART0_BITS = _u(@as(c_int, 0x00000080));
pub const CLOCKS_WAKE_EN1_CLK_SYS_UART0_MSB = _u(@as(c_int, 7));
pub const CLOCKS_WAKE_EN1_CLK_SYS_UART0_LSB = _u(@as(c_int, 7));
pub const CLOCKS_WAKE_EN1_CLK_SYS_UART0_ACCESS = "RW";
pub const CLOCKS_WAKE_EN1_CLK_PERI_UART0_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN1_CLK_PERI_UART0_BITS = _u(@as(c_int, 0x00000040));
pub const CLOCKS_WAKE_EN1_CLK_PERI_UART0_MSB = _u(@as(c_int, 6));
pub const CLOCKS_WAKE_EN1_CLK_PERI_UART0_LSB = _u(@as(c_int, 6));
pub const CLOCKS_WAKE_EN1_CLK_PERI_UART0_ACCESS = "RW";
pub const CLOCKS_WAKE_EN1_CLK_SYS_TIMER_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN1_CLK_SYS_TIMER_BITS = _u(@as(c_int, 0x00000020));
pub const CLOCKS_WAKE_EN1_CLK_SYS_TIMER_MSB = _u(@as(c_int, 5));
pub const CLOCKS_WAKE_EN1_CLK_SYS_TIMER_LSB = _u(@as(c_int, 5));
pub const CLOCKS_WAKE_EN1_CLK_SYS_TIMER_ACCESS = "RW";
pub const CLOCKS_WAKE_EN1_CLK_SYS_TBMAN_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN1_CLK_SYS_TBMAN_BITS = _u(@as(c_int, 0x00000010));
pub const CLOCKS_WAKE_EN1_CLK_SYS_TBMAN_MSB = _u(@as(c_int, 4));
pub const CLOCKS_WAKE_EN1_CLK_SYS_TBMAN_LSB = _u(@as(c_int, 4));
pub const CLOCKS_WAKE_EN1_CLK_SYS_TBMAN_ACCESS = "RW";
pub const CLOCKS_WAKE_EN1_CLK_SYS_SYSINFO_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN1_CLK_SYS_SYSINFO_BITS = _u(@as(c_int, 0x00000008));
pub const CLOCKS_WAKE_EN1_CLK_SYS_SYSINFO_MSB = _u(@as(c_int, 3));
pub const CLOCKS_WAKE_EN1_CLK_SYS_SYSINFO_LSB = _u(@as(c_int, 3));
pub const CLOCKS_WAKE_EN1_CLK_SYS_SYSINFO_ACCESS = "RW";
pub const CLOCKS_WAKE_EN1_CLK_SYS_SYSCFG_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN1_CLK_SYS_SYSCFG_BITS = _u(@as(c_int, 0x00000004));
pub const CLOCKS_WAKE_EN1_CLK_SYS_SYSCFG_MSB = _u(@as(c_int, 2));
pub const CLOCKS_WAKE_EN1_CLK_SYS_SYSCFG_LSB = _u(@as(c_int, 2));
pub const CLOCKS_WAKE_EN1_CLK_SYS_SYSCFG_ACCESS = "RW";
pub const CLOCKS_WAKE_EN1_CLK_SYS_SRAM5_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN1_CLK_SYS_SRAM5_BITS = _u(@as(c_int, 0x00000002));
pub const CLOCKS_WAKE_EN1_CLK_SYS_SRAM5_MSB = _u(@as(c_int, 1));
pub const CLOCKS_WAKE_EN1_CLK_SYS_SRAM5_LSB = _u(@as(c_int, 1));
pub const CLOCKS_WAKE_EN1_CLK_SYS_SRAM5_ACCESS = "RW";
pub const CLOCKS_WAKE_EN1_CLK_SYS_SRAM4_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_WAKE_EN1_CLK_SYS_SRAM4_BITS = _u(@as(c_int, 0x00000001));
pub const CLOCKS_WAKE_EN1_CLK_SYS_SRAM4_MSB = _u(@as(c_int, 0));
pub const CLOCKS_WAKE_EN1_CLK_SYS_SRAM4_LSB = _u(@as(c_int, 0));
pub const CLOCKS_WAKE_EN1_CLK_SYS_SRAM4_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_OFFSET = _u(@as(c_int, 0x000000a8));
pub const CLOCKS_SLEEP_EN0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM3_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM3_MSB = _u(@as(c_int, 31));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM3_LSB = _u(@as(c_int, 31));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM3_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM2_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM2_MSB = _u(@as(c_int, 30));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM2_LSB = _u(@as(c_int, 30));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM2_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM1_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM1_MSB = _u(@as(c_int, 29));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM1_LSB = _u(@as(c_int, 29));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM1_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM0_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM0_MSB = _u(@as(c_int, 28));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM0_LSB = _u(@as(c_int, 28));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SRAM0_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SPI1_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SPI1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SPI1_MSB = _u(@as(c_int, 27));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SPI1_LSB = _u(@as(c_int, 27));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SPI1_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_PERI_SPI1_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_PERI_SPI1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_CLK_PERI_SPI1_MSB = _u(@as(c_int, 26));
pub const CLOCKS_SLEEP_EN0_CLK_PERI_SPI1_LSB = _u(@as(c_int, 26));
pub const CLOCKS_SLEEP_EN0_CLK_PERI_SPI1_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SPI0_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SPI0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SPI0_MSB = _u(@as(c_int, 25));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SPI0_LSB = _u(@as(c_int, 25));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SPI0_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_PERI_SPI0_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_PERI_SPI0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_CLK_PERI_SPI0_MSB = _u(@as(c_int, 24));
pub const CLOCKS_SLEEP_EN0_CLK_PERI_SPI0_LSB = _u(@as(c_int, 24));
pub const CLOCKS_SLEEP_EN0_CLK_PERI_SPI0_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SIO_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SIO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SIO_MSB = _u(@as(c_int, 23));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SIO_LSB = _u(@as(c_int, 23));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_SIO_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_RTC_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_RTC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_RTC_MSB = _u(@as(c_int, 22));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_RTC_LSB = _u(@as(c_int, 22));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_RTC_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_RTC_RTC_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_RTC_RTC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_CLK_RTC_RTC_MSB = _u(@as(c_int, 21));
pub const CLOCKS_SLEEP_EN0_CLK_RTC_RTC_LSB = _u(@as(c_int, 21));
pub const CLOCKS_SLEEP_EN0_CLK_RTC_RTC_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_ROSC_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_ROSC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_ROSC_MSB = _u(@as(c_int, 20));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_ROSC_LSB = _u(@as(c_int, 20));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_ROSC_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_ROM_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_ROM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_ROM_MSB = _u(@as(c_int, 19));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_ROM_LSB = _u(@as(c_int, 19));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_ROM_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_RESETS_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_RESETS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_RESETS_MSB = _u(@as(c_int, 18));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_RESETS_LSB = _u(@as(c_int, 18));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_RESETS_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PWM_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PWM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PWM_MSB = _u(@as(c_int, 17));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PWM_LSB = _u(@as(c_int, 17));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PWM_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PSM_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PSM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PSM_MSB = _u(@as(c_int, 16));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PSM_LSB = _u(@as(c_int, 16));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PSM_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PLL_USB_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PLL_USB_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PLL_USB_MSB = _u(@as(c_int, 15));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PLL_USB_LSB = _u(@as(c_int, 15));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PLL_USB_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PLL_SYS_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PLL_SYS_BITS = _u(@as(c_int, 0x00004000));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PLL_SYS_MSB = _u(@as(c_int, 14));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PLL_SYS_LSB = _u(@as(c_int, 14));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PLL_SYS_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PIO1_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PIO1_BITS = _u(@as(c_int, 0x00002000));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PIO1_MSB = _u(@as(c_int, 13));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PIO1_LSB = _u(@as(c_int, 13));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PIO1_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PIO0_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PIO0_BITS = _u(@as(c_int, 0x00001000));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PIO0_MSB = _u(@as(c_int, 12));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PIO0_LSB = _u(@as(c_int, 12));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PIO0_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PADS_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PADS_BITS = _u(@as(c_int, 0x00000800));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PADS_MSB = _u(@as(c_int, 11));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PADS_LSB = _u(@as(c_int, 11));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_PADS_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_VREG_AND_CHIP_RESET_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_VREG_AND_CHIP_RESET_BITS = _u(@as(c_int, 0x00000400));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_VREG_AND_CHIP_RESET_MSB = _u(@as(c_int, 10));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_VREG_AND_CHIP_RESET_LSB = _u(@as(c_int, 10));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_VREG_AND_CHIP_RESET_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_JTAG_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_JTAG_BITS = _u(@as(c_int, 0x00000200));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_JTAG_MSB = _u(@as(c_int, 9));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_JTAG_LSB = _u(@as(c_int, 9));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_JTAG_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_IO_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_IO_BITS = _u(@as(c_int, 0x00000100));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_IO_MSB = _u(@as(c_int, 8));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_IO_LSB = _u(@as(c_int, 8));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_IO_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_I2C1_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_I2C1_BITS = _u(@as(c_int, 0x00000080));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_I2C1_MSB = _u(@as(c_int, 7));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_I2C1_LSB = _u(@as(c_int, 7));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_I2C1_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_I2C0_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_I2C0_BITS = _u(@as(c_int, 0x00000040));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_I2C0_MSB = _u(@as(c_int, 6));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_I2C0_LSB = _u(@as(c_int, 6));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_I2C0_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_DMA_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_DMA_BITS = _u(@as(c_int, 0x00000020));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_DMA_MSB = _u(@as(c_int, 5));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_DMA_LSB = _u(@as(c_int, 5));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_DMA_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_BUSFABRIC_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_BUSFABRIC_BITS = _u(@as(c_int, 0x00000010));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_BUSFABRIC_MSB = _u(@as(c_int, 4));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_BUSFABRIC_LSB = _u(@as(c_int, 4));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_BUSFABRIC_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_BUSCTRL_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_BUSCTRL_BITS = _u(@as(c_int, 0x00000008));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_BUSCTRL_MSB = _u(@as(c_int, 3));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_BUSCTRL_LSB = _u(@as(c_int, 3));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_BUSCTRL_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_ADC_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_ADC_BITS = _u(@as(c_int, 0x00000004));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_ADC_MSB = _u(@as(c_int, 2));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_ADC_LSB = _u(@as(c_int, 2));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_ADC_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_ADC_ADC_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_ADC_ADC_BITS = _u(@as(c_int, 0x00000002));
pub const CLOCKS_SLEEP_EN0_CLK_ADC_ADC_MSB = _u(@as(c_int, 1));
pub const CLOCKS_SLEEP_EN0_CLK_ADC_ADC_LSB = _u(@as(c_int, 1));
pub const CLOCKS_SLEEP_EN0_CLK_ADC_ADC_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN0_CLK_SYS_CLOCKS_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_CLOCKS_BITS = _u(@as(c_int, 0x00000001));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_CLOCKS_MSB = _u(@as(c_int, 0));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_CLOCKS_LSB = _u(@as(c_int, 0));
pub const CLOCKS_SLEEP_EN0_CLK_SYS_CLOCKS_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN1_OFFSET = _u(@as(c_int, 0x000000ac));
pub const CLOCKS_SLEEP_EN1_BITS = _u(@as(c_int, 0x00007fff));
pub const CLOCKS_SLEEP_EN1_RESET = _u(@as(c_int, 0x00007fff));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_XOSC_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_XOSC_BITS = _u(@as(c_int, 0x00004000));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_XOSC_MSB = _u(@as(c_int, 14));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_XOSC_LSB = _u(@as(c_int, 14));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_XOSC_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN1_CLK_SYS_XIP_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_XIP_BITS = _u(@as(c_int, 0x00002000));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_XIP_MSB = _u(@as(c_int, 13));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_XIP_LSB = _u(@as(c_int, 13));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_XIP_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN1_CLK_SYS_WATCHDOG_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_WATCHDOG_BITS = _u(@as(c_int, 0x00001000));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_WATCHDOG_MSB = _u(@as(c_int, 12));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_WATCHDOG_LSB = _u(@as(c_int, 12));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_WATCHDOG_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN1_CLK_USB_USBCTRL_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN1_CLK_USB_USBCTRL_BITS = _u(@as(c_int, 0x00000800));
pub const CLOCKS_SLEEP_EN1_CLK_USB_USBCTRL_MSB = _u(@as(c_int, 11));
pub const CLOCKS_SLEEP_EN1_CLK_USB_USBCTRL_LSB = _u(@as(c_int, 11));
pub const CLOCKS_SLEEP_EN1_CLK_USB_USBCTRL_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN1_CLK_SYS_USBCTRL_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_USBCTRL_BITS = _u(@as(c_int, 0x00000400));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_USBCTRL_MSB = _u(@as(c_int, 10));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_USBCTRL_LSB = _u(@as(c_int, 10));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_USBCTRL_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN1_CLK_SYS_UART1_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_UART1_BITS = _u(@as(c_int, 0x00000200));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_UART1_MSB = _u(@as(c_int, 9));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_UART1_LSB = _u(@as(c_int, 9));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_UART1_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN1_CLK_PERI_UART1_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN1_CLK_PERI_UART1_BITS = _u(@as(c_int, 0x00000100));
pub const CLOCKS_SLEEP_EN1_CLK_PERI_UART1_MSB = _u(@as(c_int, 8));
pub const CLOCKS_SLEEP_EN1_CLK_PERI_UART1_LSB = _u(@as(c_int, 8));
pub const CLOCKS_SLEEP_EN1_CLK_PERI_UART1_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN1_CLK_SYS_UART0_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_UART0_BITS = _u(@as(c_int, 0x00000080));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_UART0_MSB = _u(@as(c_int, 7));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_UART0_LSB = _u(@as(c_int, 7));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_UART0_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN1_CLK_PERI_UART0_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN1_CLK_PERI_UART0_BITS = _u(@as(c_int, 0x00000040));
pub const CLOCKS_SLEEP_EN1_CLK_PERI_UART0_MSB = _u(@as(c_int, 6));
pub const CLOCKS_SLEEP_EN1_CLK_PERI_UART0_LSB = _u(@as(c_int, 6));
pub const CLOCKS_SLEEP_EN1_CLK_PERI_UART0_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN1_CLK_SYS_TIMER_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_TIMER_BITS = _u(@as(c_int, 0x00000020));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_TIMER_MSB = _u(@as(c_int, 5));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_TIMER_LSB = _u(@as(c_int, 5));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_TIMER_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN1_CLK_SYS_TBMAN_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_TBMAN_BITS = _u(@as(c_int, 0x00000010));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_TBMAN_MSB = _u(@as(c_int, 4));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_TBMAN_LSB = _u(@as(c_int, 4));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_TBMAN_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SYSINFO_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SYSINFO_BITS = _u(@as(c_int, 0x00000008));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SYSINFO_MSB = _u(@as(c_int, 3));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SYSINFO_LSB = _u(@as(c_int, 3));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SYSINFO_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SYSCFG_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SYSCFG_BITS = _u(@as(c_int, 0x00000004));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SYSCFG_MSB = _u(@as(c_int, 2));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SYSCFG_LSB = _u(@as(c_int, 2));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SYSCFG_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SRAM5_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SRAM5_BITS = _u(@as(c_int, 0x00000002));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SRAM5_MSB = _u(@as(c_int, 1));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SRAM5_LSB = _u(@as(c_int, 1));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SRAM5_ACCESS = "RW";
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SRAM4_RESET = _u(@as(c_int, 0x1));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SRAM4_BITS = _u(@as(c_int, 0x00000001));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SRAM4_MSB = _u(@as(c_int, 0));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SRAM4_LSB = _u(@as(c_int, 0));
pub const CLOCKS_SLEEP_EN1_CLK_SYS_SRAM4_ACCESS = "RW";
pub const CLOCKS_ENABLED0_OFFSET = _u(@as(c_int, 0x000000b0));
pub const CLOCKS_ENABLED0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal));
pub const CLOCKS_ENABLED0_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM3_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal));
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM3_MSB = _u(@as(c_int, 31));
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM3_LSB = _u(@as(c_int, 31));
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM3_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM2_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal));
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM2_MSB = _u(@as(c_int, 30));
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM2_LSB = _u(@as(c_int, 30));
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM2_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM1_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal));
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM1_MSB = _u(@as(c_int, 29));
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM1_LSB = _u(@as(c_int, 29));
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM1_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM0_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal));
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM0_MSB = _u(@as(c_int, 28));
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM0_LSB = _u(@as(c_int, 28));
pub const CLOCKS_ENABLED0_CLK_SYS_SRAM0_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_SPI1_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_SPI1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal));
pub const CLOCKS_ENABLED0_CLK_SYS_SPI1_MSB = _u(@as(c_int, 27));
pub const CLOCKS_ENABLED0_CLK_SYS_SPI1_LSB = _u(@as(c_int, 27));
pub const CLOCKS_ENABLED0_CLK_SYS_SPI1_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_PERI_SPI1_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_PERI_SPI1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal));
pub const CLOCKS_ENABLED0_CLK_PERI_SPI1_MSB = _u(@as(c_int, 26));
pub const CLOCKS_ENABLED0_CLK_PERI_SPI1_LSB = _u(@as(c_int, 26));
pub const CLOCKS_ENABLED0_CLK_PERI_SPI1_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_SPI0_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_SPI0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal));
pub const CLOCKS_ENABLED0_CLK_SYS_SPI0_MSB = _u(@as(c_int, 25));
pub const CLOCKS_ENABLED0_CLK_SYS_SPI0_LSB = _u(@as(c_int, 25));
pub const CLOCKS_ENABLED0_CLK_SYS_SPI0_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_PERI_SPI0_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_PERI_SPI0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const CLOCKS_ENABLED0_CLK_PERI_SPI0_MSB = _u(@as(c_int, 24));
pub const CLOCKS_ENABLED0_CLK_PERI_SPI0_LSB = _u(@as(c_int, 24));
pub const CLOCKS_ENABLED0_CLK_PERI_SPI0_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_SIO_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_SIO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal));
pub const CLOCKS_ENABLED0_CLK_SYS_SIO_MSB = _u(@as(c_int, 23));
pub const CLOCKS_ENABLED0_CLK_SYS_SIO_LSB = _u(@as(c_int, 23));
pub const CLOCKS_ENABLED0_CLK_SYS_SIO_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_RTC_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_RTC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal));
pub const CLOCKS_ENABLED0_CLK_SYS_RTC_MSB = _u(@as(c_int, 22));
pub const CLOCKS_ENABLED0_CLK_SYS_RTC_LSB = _u(@as(c_int, 22));
pub const CLOCKS_ENABLED0_CLK_SYS_RTC_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_RTC_RTC_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_RTC_RTC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal));
pub const CLOCKS_ENABLED0_CLK_RTC_RTC_MSB = _u(@as(c_int, 21));
pub const CLOCKS_ENABLED0_CLK_RTC_RTC_LSB = _u(@as(c_int, 21));
pub const CLOCKS_ENABLED0_CLK_RTC_RTC_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_ROSC_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_ROSC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal));
pub const CLOCKS_ENABLED0_CLK_SYS_ROSC_MSB = _u(@as(c_int, 20));
pub const CLOCKS_ENABLED0_CLK_SYS_ROSC_LSB = _u(@as(c_int, 20));
pub const CLOCKS_ENABLED0_CLK_SYS_ROSC_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_ROM_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_ROM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal));
pub const CLOCKS_ENABLED0_CLK_SYS_ROM_MSB = _u(@as(c_int, 19));
pub const CLOCKS_ENABLED0_CLK_SYS_ROM_LSB = _u(@as(c_int, 19));
pub const CLOCKS_ENABLED0_CLK_SYS_ROM_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_RESETS_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_RESETS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal));
pub const CLOCKS_ENABLED0_CLK_SYS_RESETS_MSB = _u(@as(c_int, 18));
pub const CLOCKS_ENABLED0_CLK_SYS_RESETS_LSB = _u(@as(c_int, 18));
pub const CLOCKS_ENABLED0_CLK_SYS_RESETS_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_PWM_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_PWM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal));
pub const CLOCKS_ENABLED0_CLK_SYS_PWM_MSB = _u(@as(c_int, 17));
pub const CLOCKS_ENABLED0_CLK_SYS_PWM_LSB = _u(@as(c_int, 17));
pub const CLOCKS_ENABLED0_CLK_SYS_PWM_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_PSM_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_PSM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal));
pub const CLOCKS_ENABLED0_CLK_SYS_PSM_MSB = _u(@as(c_int, 16));
pub const CLOCKS_ENABLED0_CLK_SYS_PSM_LSB = _u(@as(c_int, 16));
pub const CLOCKS_ENABLED0_CLK_SYS_PSM_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_PLL_USB_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_PLL_USB_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal));
pub const CLOCKS_ENABLED0_CLK_SYS_PLL_USB_MSB = _u(@as(c_int, 15));
pub const CLOCKS_ENABLED0_CLK_SYS_PLL_USB_LSB = _u(@as(c_int, 15));
pub const CLOCKS_ENABLED0_CLK_SYS_PLL_USB_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_PLL_SYS_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_PLL_SYS_BITS = _u(@as(c_int, 0x00004000));
pub const CLOCKS_ENABLED0_CLK_SYS_PLL_SYS_MSB = _u(@as(c_int, 14));
pub const CLOCKS_ENABLED0_CLK_SYS_PLL_SYS_LSB = _u(@as(c_int, 14));
pub const CLOCKS_ENABLED0_CLK_SYS_PLL_SYS_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_PIO1_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_PIO1_BITS = _u(@as(c_int, 0x00002000));
pub const CLOCKS_ENABLED0_CLK_SYS_PIO1_MSB = _u(@as(c_int, 13));
pub const CLOCKS_ENABLED0_CLK_SYS_PIO1_LSB = _u(@as(c_int, 13));
pub const CLOCKS_ENABLED0_CLK_SYS_PIO1_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_PIO0_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_PIO0_BITS = _u(@as(c_int, 0x00001000));
pub const CLOCKS_ENABLED0_CLK_SYS_PIO0_MSB = _u(@as(c_int, 12));
pub const CLOCKS_ENABLED0_CLK_SYS_PIO0_LSB = _u(@as(c_int, 12));
pub const CLOCKS_ENABLED0_CLK_SYS_PIO0_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_PADS_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_PADS_BITS = _u(@as(c_int, 0x00000800));
pub const CLOCKS_ENABLED0_CLK_SYS_PADS_MSB = _u(@as(c_int, 11));
pub const CLOCKS_ENABLED0_CLK_SYS_PADS_LSB = _u(@as(c_int, 11));
pub const CLOCKS_ENABLED0_CLK_SYS_PADS_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_VREG_AND_CHIP_RESET_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_VREG_AND_CHIP_RESET_BITS = _u(@as(c_int, 0x00000400));
pub const CLOCKS_ENABLED0_CLK_SYS_VREG_AND_CHIP_RESET_MSB = _u(@as(c_int, 10));
pub const CLOCKS_ENABLED0_CLK_SYS_VREG_AND_CHIP_RESET_LSB = _u(@as(c_int, 10));
pub const CLOCKS_ENABLED0_CLK_SYS_VREG_AND_CHIP_RESET_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_JTAG_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_JTAG_BITS = _u(@as(c_int, 0x00000200));
pub const CLOCKS_ENABLED0_CLK_SYS_JTAG_MSB = _u(@as(c_int, 9));
pub const CLOCKS_ENABLED0_CLK_SYS_JTAG_LSB = _u(@as(c_int, 9));
pub const CLOCKS_ENABLED0_CLK_SYS_JTAG_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_IO_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_IO_BITS = _u(@as(c_int, 0x00000100));
pub const CLOCKS_ENABLED0_CLK_SYS_IO_MSB = _u(@as(c_int, 8));
pub const CLOCKS_ENABLED0_CLK_SYS_IO_LSB = _u(@as(c_int, 8));
pub const CLOCKS_ENABLED0_CLK_SYS_IO_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_I2C1_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_I2C1_BITS = _u(@as(c_int, 0x00000080));
pub const CLOCKS_ENABLED0_CLK_SYS_I2C1_MSB = _u(@as(c_int, 7));
pub const CLOCKS_ENABLED0_CLK_SYS_I2C1_LSB = _u(@as(c_int, 7));
pub const CLOCKS_ENABLED0_CLK_SYS_I2C1_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_I2C0_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_I2C0_BITS = _u(@as(c_int, 0x00000040));
pub const CLOCKS_ENABLED0_CLK_SYS_I2C0_MSB = _u(@as(c_int, 6));
pub const CLOCKS_ENABLED0_CLK_SYS_I2C0_LSB = _u(@as(c_int, 6));
pub const CLOCKS_ENABLED0_CLK_SYS_I2C0_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_DMA_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_DMA_BITS = _u(@as(c_int, 0x00000020));
pub const CLOCKS_ENABLED0_CLK_SYS_DMA_MSB = _u(@as(c_int, 5));
pub const CLOCKS_ENABLED0_CLK_SYS_DMA_LSB = _u(@as(c_int, 5));
pub const CLOCKS_ENABLED0_CLK_SYS_DMA_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_BUSFABRIC_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_BUSFABRIC_BITS = _u(@as(c_int, 0x00000010));
pub const CLOCKS_ENABLED0_CLK_SYS_BUSFABRIC_MSB = _u(@as(c_int, 4));
pub const CLOCKS_ENABLED0_CLK_SYS_BUSFABRIC_LSB = _u(@as(c_int, 4));
pub const CLOCKS_ENABLED0_CLK_SYS_BUSFABRIC_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_BUSCTRL_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_BUSCTRL_BITS = _u(@as(c_int, 0x00000008));
pub const CLOCKS_ENABLED0_CLK_SYS_BUSCTRL_MSB = _u(@as(c_int, 3));
pub const CLOCKS_ENABLED0_CLK_SYS_BUSCTRL_LSB = _u(@as(c_int, 3));
pub const CLOCKS_ENABLED0_CLK_SYS_BUSCTRL_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_ADC_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_ADC_BITS = _u(@as(c_int, 0x00000004));
pub const CLOCKS_ENABLED0_CLK_SYS_ADC_MSB = _u(@as(c_int, 2));
pub const CLOCKS_ENABLED0_CLK_SYS_ADC_LSB = _u(@as(c_int, 2));
pub const CLOCKS_ENABLED0_CLK_SYS_ADC_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_ADC_ADC_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_ADC_ADC_BITS = _u(@as(c_int, 0x00000002));
pub const CLOCKS_ENABLED0_CLK_ADC_ADC_MSB = _u(@as(c_int, 1));
pub const CLOCKS_ENABLED0_CLK_ADC_ADC_LSB = _u(@as(c_int, 1));
pub const CLOCKS_ENABLED0_CLK_ADC_ADC_ACCESS = "RO";
pub const CLOCKS_ENABLED0_CLK_SYS_CLOCKS_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED0_CLK_SYS_CLOCKS_BITS = _u(@as(c_int, 0x00000001));
pub const CLOCKS_ENABLED0_CLK_SYS_CLOCKS_MSB = _u(@as(c_int, 0));
pub const CLOCKS_ENABLED0_CLK_SYS_CLOCKS_LSB = _u(@as(c_int, 0));
pub const CLOCKS_ENABLED0_CLK_SYS_CLOCKS_ACCESS = "RO";
pub const CLOCKS_ENABLED1_OFFSET = _u(@as(c_int, 0x000000b4));
pub const CLOCKS_ENABLED1_BITS = _u(@as(c_int, 0x00007fff));
pub const CLOCKS_ENABLED1_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_ENABLED1_CLK_SYS_XOSC_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED1_CLK_SYS_XOSC_BITS = _u(@as(c_int, 0x00004000));
pub const CLOCKS_ENABLED1_CLK_SYS_XOSC_MSB = _u(@as(c_int, 14));
pub const CLOCKS_ENABLED1_CLK_SYS_XOSC_LSB = _u(@as(c_int, 14));
pub const CLOCKS_ENABLED1_CLK_SYS_XOSC_ACCESS = "RO";
pub const CLOCKS_ENABLED1_CLK_SYS_XIP_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED1_CLK_SYS_XIP_BITS = _u(@as(c_int, 0x00002000));
pub const CLOCKS_ENABLED1_CLK_SYS_XIP_MSB = _u(@as(c_int, 13));
pub const CLOCKS_ENABLED1_CLK_SYS_XIP_LSB = _u(@as(c_int, 13));
pub const CLOCKS_ENABLED1_CLK_SYS_XIP_ACCESS = "RO";
pub const CLOCKS_ENABLED1_CLK_SYS_WATCHDOG_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED1_CLK_SYS_WATCHDOG_BITS = _u(@as(c_int, 0x00001000));
pub const CLOCKS_ENABLED1_CLK_SYS_WATCHDOG_MSB = _u(@as(c_int, 12));
pub const CLOCKS_ENABLED1_CLK_SYS_WATCHDOG_LSB = _u(@as(c_int, 12));
pub const CLOCKS_ENABLED1_CLK_SYS_WATCHDOG_ACCESS = "RO";
pub const CLOCKS_ENABLED1_CLK_USB_USBCTRL_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED1_CLK_USB_USBCTRL_BITS = _u(@as(c_int, 0x00000800));
pub const CLOCKS_ENABLED1_CLK_USB_USBCTRL_MSB = _u(@as(c_int, 11));
pub const CLOCKS_ENABLED1_CLK_USB_USBCTRL_LSB = _u(@as(c_int, 11));
pub const CLOCKS_ENABLED1_CLK_USB_USBCTRL_ACCESS = "RO";
pub const CLOCKS_ENABLED1_CLK_SYS_USBCTRL_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED1_CLK_SYS_USBCTRL_BITS = _u(@as(c_int, 0x00000400));
pub const CLOCKS_ENABLED1_CLK_SYS_USBCTRL_MSB = _u(@as(c_int, 10));
pub const CLOCKS_ENABLED1_CLK_SYS_USBCTRL_LSB = _u(@as(c_int, 10));
pub const CLOCKS_ENABLED1_CLK_SYS_USBCTRL_ACCESS = "RO";
pub const CLOCKS_ENABLED1_CLK_SYS_UART1_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED1_CLK_SYS_UART1_BITS = _u(@as(c_int, 0x00000200));
pub const CLOCKS_ENABLED1_CLK_SYS_UART1_MSB = _u(@as(c_int, 9));
pub const CLOCKS_ENABLED1_CLK_SYS_UART1_LSB = _u(@as(c_int, 9));
pub const CLOCKS_ENABLED1_CLK_SYS_UART1_ACCESS = "RO";
pub const CLOCKS_ENABLED1_CLK_PERI_UART1_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED1_CLK_PERI_UART1_BITS = _u(@as(c_int, 0x00000100));
pub const CLOCKS_ENABLED1_CLK_PERI_UART1_MSB = _u(@as(c_int, 8));
pub const CLOCKS_ENABLED1_CLK_PERI_UART1_LSB = _u(@as(c_int, 8));
pub const CLOCKS_ENABLED1_CLK_PERI_UART1_ACCESS = "RO";
pub const CLOCKS_ENABLED1_CLK_SYS_UART0_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED1_CLK_SYS_UART0_BITS = _u(@as(c_int, 0x00000080));
pub const CLOCKS_ENABLED1_CLK_SYS_UART0_MSB = _u(@as(c_int, 7));
pub const CLOCKS_ENABLED1_CLK_SYS_UART0_LSB = _u(@as(c_int, 7));
pub const CLOCKS_ENABLED1_CLK_SYS_UART0_ACCESS = "RO";
pub const CLOCKS_ENABLED1_CLK_PERI_UART0_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED1_CLK_PERI_UART0_BITS = _u(@as(c_int, 0x00000040));
pub const CLOCKS_ENABLED1_CLK_PERI_UART0_MSB = _u(@as(c_int, 6));
pub const CLOCKS_ENABLED1_CLK_PERI_UART0_LSB = _u(@as(c_int, 6));
pub const CLOCKS_ENABLED1_CLK_PERI_UART0_ACCESS = "RO";
pub const CLOCKS_ENABLED1_CLK_SYS_TIMER_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED1_CLK_SYS_TIMER_BITS = _u(@as(c_int, 0x00000020));
pub const CLOCKS_ENABLED1_CLK_SYS_TIMER_MSB = _u(@as(c_int, 5));
pub const CLOCKS_ENABLED1_CLK_SYS_TIMER_LSB = _u(@as(c_int, 5));
pub const CLOCKS_ENABLED1_CLK_SYS_TIMER_ACCESS = "RO";
pub const CLOCKS_ENABLED1_CLK_SYS_TBMAN_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED1_CLK_SYS_TBMAN_BITS = _u(@as(c_int, 0x00000010));
pub const CLOCKS_ENABLED1_CLK_SYS_TBMAN_MSB = _u(@as(c_int, 4));
pub const CLOCKS_ENABLED1_CLK_SYS_TBMAN_LSB = _u(@as(c_int, 4));
pub const CLOCKS_ENABLED1_CLK_SYS_TBMAN_ACCESS = "RO";
pub const CLOCKS_ENABLED1_CLK_SYS_SYSINFO_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED1_CLK_SYS_SYSINFO_BITS = _u(@as(c_int, 0x00000008));
pub const CLOCKS_ENABLED1_CLK_SYS_SYSINFO_MSB = _u(@as(c_int, 3));
pub const CLOCKS_ENABLED1_CLK_SYS_SYSINFO_LSB = _u(@as(c_int, 3));
pub const CLOCKS_ENABLED1_CLK_SYS_SYSINFO_ACCESS = "RO";
pub const CLOCKS_ENABLED1_CLK_SYS_SYSCFG_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED1_CLK_SYS_SYSCFG_BITS = _u(@as(c_int, 0x00000004));
pub const CLOCKS_ENABLED1_CLK_SYS_SYSCFG_MSB = _u(@as(c_int, 2));
pub const CLOCKS_ENABLED1_CLK_SYS_SYSCFG_LSB = _u(@as(c_int, 2));
pub const CLOCKS_ENABLED1_CLK_SYS_SYSCFG_ACCESS = "RO";
pub const CLOCKS_ENABLED1_CLK_SYS_SRAM5_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED1_CLK_SYS_SRAM5_BITS = _u(@as(c_int, 0x00000002));
pub const CLOCKS_ENABLED1_CLK_SYS_SRAM5_MSB = _u(@as(c_int, 1));
pub const CLOCKS_ENABLED1_CLK_SYS_SRAM5_LSB = _u(@as(c_int, 1));
pub const CLOCKS_ENABLED1_CLK_SYS_SRAM5_ACCESS = "RO";
pub const CLOCKS_ENABLED1_CLK_SYS_SRAM4_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_ENABLED1_CLK_SYS_SRAM4_BITS = _u(@as(c_int, 0x00000001));
pub const CLOCKS_ENABLED1_CLK_SYS_SRAM4_MSB = _u(@as(c_int, 0));
pub const CLOCKS_ENABLED1_CLK_SYS_SRAM4_LSB = _u(@as(c_int, 0));
pub const CLOCKS_ENABLED1_CLK_SYS_SRAM4_ACCESS = "RO";
pub const CLOCKS_INTR_OFFSET = _u(@as(c_int, 0x000000b8));
pub const CLOCKS_INTR_BITS = _u(@as(c_int, 0x00000001));
pub const CLOCKS_INTR_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_INTR_CLK_SYS_RESUS_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_INTR_CLK_SYS_RESUS_BITS = _u(@as(c_int, 0x00000001));
pub const CLOCKS_INTR_CLK_SYS_RESUS_MSB = _u(@as(c_int, 0));
pub const CLOCKS_INTR_CLK_SYS_RESUS_LSB = _u(@as(c_int, 0));
pub const CLOCKS_INTR_CLK_SYS_RESUS_ACCESS = "RO";
pub const CLOCKS_INTE_OFFSET = _u(@as(c_int, 0x000000bc));
pub const CLOCKS_INTE_BITS = _u(@as(c_int, 0x00000001));
pub const CLOCKS_INTE_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_INTE_CLK_SYS_RESUS_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_INTE_CLK_SYS_RESUS_BITS = _u(@as(c_int, 0x00000001));
pub const CLOCKS_INTE_CLK_SYS_RESUS_MSB = _u(@as(c_int, 0));
pub const CLOCKS_INTE_CLK_SYS_RESUS_LSB = _u(@as(c_int, 0));
pub const CLOCKS_INTE_CLK_SYS_RESUS_ACCESS = "RW";
pub const CLOCKS_INTF_OFFSET = _u(@as(c_int, 0x000000c0));
pub const CLOCKS_INTF_BITS = _u(@as(c_int, 0x00000001));
pub const CLOCKS_INTF_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_INTF_CLK_SYS_RESUS_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_INTF_CLK_SYS_RESUS_BITS = _u(@as(c_int, 0x00000001));
pub const CLOCKS_INTF_CLK_SYS_RESUS_MSB = _u(@as(c_int, 0));
pub const CLOCKS_INTF_CLK_SYS_RESUS_LSB = _u(@as(c_int, 0));
pub const CLOCKS_INTF_CLK_SYS_RESUS_ACCESS = "RW";
pub const CLOCKS_INTS_OFFSET = _u(@as(c_int, 0x000000c4));
pub const CLOCKS_INTS_BITS = _u(@as(c_int, 0x00000001));
pub const CLOCKS_INTS_RESET = _u(@as(c_int, 0x00000000));
pub const CLOCKS_INTS_CLK_SYS_RESUS_RESET = _u(@as(c_int, 0x0));
pub const CLOCKS_INTS_CLK_SYS_RESUS_BITS = _u(@as(c_int, 0x00000001));
pub const CLOCKS_INTS_CLK_SYS_RESUS_MSB = _u(@as(c_int, 0));
pub const CLOCKS_INTS_CLK_SYS_RESUS_LSB = _u(@as(c_int, 0));
pub const CLOCKS_INTS_CLK_SYS_RESUS_ACCESS = "RO";
pub const clocks_hw = @import("std").zig.c_translation.cast([*c]clocks_hw_t, CLOCKS_BASE);
pub const KHZ = @as(c_int, 1000);
pub const MHZ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal);
pub const PLL_COMMON_REFDIV = @as(c_int, 1);
pub const PLL_SYS_VCO_FREQ_KHZ = @as(c_int, 1500) * KHZ;
pub const PLL_SYS_POSTDIV1 = @as(c_int, 6);
pub const PLL_SYS_POSTDIV2 = @as(c_int, 2);
pub const PLL_USB_VCO_FREQ_KHZ = @as(c_int, 1200) * KHZ;
pub const PLL_USB_POSTDIV1 = @as(c_int, 5);
pub const PLL_USB_POSTDIV2 = @as(c_int, 5);
pub const PARAM_ASSERTIONS_ENABLED_CLOCKS = @as(c_int, 0);
pub const pico_error_codes = enum_pico_error_codes;
pub const stdio_driver = struct_stdio_driver;
pub const alarm_pool = struct_alarm_pool;
pub const repeating_timer = struct_repeating_timer;
pub const gpio_function = enum_gpio_function;
pub const gpio_irq_level = enum_gpio_irq_level;
pub const gpio_override = enum_gpio_override;
pub const gpio_slew_rate = enum_gpio_slew_rate;
pub const gpio_drive_strength = enum_gpio_drive_strength;
pub const uart_inst = struct_uart_inst;
pub const __lock = struct___lock;
pub const __sbuf = struct___sbuf;
pub const __sFILE = struct___sFILE;
pub const __locale_t = struct___locale_t;
pub const _Bigint = struct__Bigint;
pub const __tm = struct___tm;
pub const _rand48 = struct__rand48;
pub const _on_exit_args = struct__on_exit_args;
pub const _atexit = struct__atexit;
pub const _glue = struct__glue;
pub const _reent = struct__reent;
pub const timeval = struct_timeval;
pub const timespec = struct_timespec;
pub const itimerspec = struct_itimerspec;
pub const sched_param = struct_sched_param;
pub const _binary_info_core = struct__binary_info_core;
pub const _binary_info_raw_data = struct__binary_info_raw_data;
pub const _binary_info_sized_data = struct__binary_info_sized_data;
pub const _binary_info_list_zero_terminated = struct__binary_info_list_zero_terminated;
pub const _binary_info_id_and_int = struct__binary_info_id_and_int;
pub const _binary_info_id_and_string = struct__binary_info_id_and_string;
pub const _binary_info_block_device = struct__binary_info_block_device;
pub const _binary_info_pins_with_func = struct__binary_info_pins_with_func;
pub const _binary_info_pins_with_name = struct__binary_info_pins_with_name;
pub const _binary_info_named_group = struct__binary_info_named_group;
pub const pio_sm_hw = struct_pio_sm_hw;
pub const pio_instr_bits = enum_pio_instr_bits;
pub const pio_src_dest = enum_pio_src_dest;
pub const pio_fifo_join = enum_pio_fifo_join;
pub const pio_mov_status_type = enum_pio_mov_status_type;
pub const pio_program = struct_pio_program;
pub const pio_interrupt_source = enum_pio_interrupt_source;
pub const clock_index = enum_clock_index;
